{"version":3,"file":"react-dxcomponents.umd.js","sources":["../src/javascript/i18n/getI18n.js","../src/javascript/reduxStore.js","../src/javascript/theme.js","../src/javascript/router/createOutletHistory.js","../src/javascript/router/OutletRouter.js","../src/javascript/router/RouterExample.jsx","../src/javascript/context/DxContextProvider.jsx","../src/javascript/context/withDxContext.jsx","../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/i18n/LanguageSwitcher.jsx","../src/javascript/layout/TestLayout.jsx","../src/javascript/nodesTable/withNodesFromPath.jsx","../src/javascript/mutations/Mutation.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/nodesTable/withPathFromSelection.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/picker/Picker.jsx"],"sourcesContent":["import i18n from 'i18next';\nimport XHR from 'i18next-xhr-backend';\n// import LanguageDetector from 'i18next-browser-languagedetector/';\nimport { reactI18nextModule } from 'react-i18next';\n\nfunction getI18n(options) {\n    options = options || {};\n    i18n\n        .use(XHR)\n        // .use(LanguageDetector)\n        // .use(reactI18nextModule) // if not using I18nextProvider\n        .init({\n            lng: (options.currentLanguage ? options.currentLanguage : undefined),\n            fallbackLng: 'en',\n            debug: true,\n\n            interpolation: {\n                escapeValue: false, // not needed for react!!\n            },\n\n            // react i18next special options (optional)\n            react: {\n                wait: false,\n                bindI18n: 'languageChanged loaded',\n                bindStore: 'added removed',\n                nsMode: 'default'\n            },\n\n            backend: {\n                loadPath: (options.contextPath ? options.contextPath : '') + '/modules/{{ns}}/javascript/locales/{{lng}}.json',\n            }\n        });\n    return i18n;\n}\n\n\nexport { getI18n };","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import {createMuiTheme} from 'material-ui';\nimport {indigo, pink, red} from 'material-ui/colors/index'\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\nlet theme = createMuiTheme({\n    palette: {\n        contrastThreshold: 3.1,\n        tonalOffset: 0.07,\n        primary: {\n            light: indigo[300],\n            main: indigo[500],\n            dark: indigo[700],\n        },\n        secondary: {\n            light: pink[200],\n            main: pink[400],\n            dark: pink[700],\n        },\n        error: {\n            light: red.A200,\n            main: red.A400,\n            dark: red.A700\n        },\n    },\n});\n\nexport { theme }\n","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nlet baseHistory = createHashHistory();\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {OutletRouter as Router} from './OutletRouter'\nimport {Link, Route} from 'react-router-dom'\nimport {Paper, Typography} from 'material-ui'\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 1\n                </Typography>\n                <Typography component=\"p\">\n                    Param = {props.match.params.value}\n                </Typography>\n            </Paper>\n        );\n        let Test2 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 2\n                </Typography>\n            </Paper>\n\n        );\n        let Test3 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 3\n                </Typography>\n            </Paper>\n        );\n\n        return (<Router outlet={this.props.id}>\n            <div>\n                <Link to={'/test1/value1'}>test1/value1</Link>\n                <Link to={'/test1/value2'}>Test1/value2</Link>\n                <Link to={'/test2'}>test2</Link>\n                <Link to={'/test3'}>test3</Link>\n\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React from 'react';\nimport {MuiThemeProvider} from 'material-ui';\nimport {getI18n} from \"../i18n/getI18n\";\nimport {store} from '../reduxStore';\nimport {theme} from '../theme'\nimport {client} from '@jahia/apollo-dx';\nimport {ApolloProvider} from 'react-apollo';\nimport {Provider} from 'react-redux'\nimport {I18nextProvider} from 'react-i18next'\nimport {HashRouter} from 'react-router-dom'\nimport {OutletRouter} from '../router'\nimport PropTypes from 'prop-types';\nimport * as _ from \"lodash\";\n\nclass DxContextProvider extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    getChildContext() {\n        return {dxContext: this.props.dxContext};\n    }\n\n    render() {\n        let {dxContext, children, i18n, apollo, redux, mui, router} = this.props;\n\n        let Component = React.Children.only(children);\n        if (i18n) {\n            let options = {currentLanguage:dxContext.uilang, contextPath:dxContext.contextPath};\n            if (typeof i18n === 'object') {\n                Object.assign(options, i18n)\n            }\n            Component = React.createElement(I18nextProvider, {i18n:getI18n(options)}, Component);\n        }\n        if (router) {\n            let router = HashRouter;\n            let options = {};\n            if (typeof router === 'object') {\n                if (router.type === 'outlet') {\n                    router = OutletRouter;\n                    options.outlet = router.outlet;\n                }\n            }\n            Component = React.createElement(HashRouter, options, Component);\n        }\n        if (apollo) {\n            let options = {contextPath:dxContext.contextPath};\n            if (typeof apollo === 'object') {\n                Object.assign(options, apollo)\n            }\n            Component = React.createElement(ApolloProvider, {client:client(options)}, Component);\n        }\n        if (redux) {\n            Component = React.createElement(Provider, {store:store}, Component);\n        }\n        if (mui) {\n            let theTheme = theme;\n            if (typeof mui === 'object') {\n                theTheme = _.merge({}, theme, mui);\n            }\n            Component = React.createElement(MuiThemeProvider, {theme:theTheme}, Component);\n        }\n        return Component;\n    }\n}\n\nDxContextProvider.childContextTypes = {\n    dxContext: PropTypes.object\n};\n\nexport {DxContextProvider}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction withDxContext() {\n    return (WrappedComponent) => {\n        let Component = class extends React.Component {\n            render() {\n                return (<WrappedComponent dxContext={this.context.dxContext} {...this.props} />)\n            }\n        }\n\n        Component.contextTypes = {\n            dxContext: PropTypes.object\n        };\n\n        return Component\n    }\n}\n\nexport { withDxContext }","import React from 'react';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<div>{this.state.reactElements}</div>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedView.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedView(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<Component {...this.props} />);\n    }\n}\n\nDynamicComponentsList.propTypes = {\n    /**\n     * Id of the \"componentsFolder\" to look for\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Component to use to do the rendering\n     */\n    renderComponent: PropTypes.element\n}\n\nexport {DynamicComponentsList};\n","import React from 'react';\nimport {Button, Menu, MenuItem} from 'material-ui';\nimport {translate} from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nclass LanguageSwitcher extends React.Component {\n\n    constructor(props,context) {\n        super(props,context);\n        this.state = {\n            anchorEl: null,\n        };\n    }\n\n    handleClick(event) {\n        this.setState({anchorEl: event.target});\n    }\n\n    handleClose(lang) {\n        this.setState({anchorEl: null});\n        if (lang) {\n            this.context.i18n.changeLanguage(lang);\n        }\n    };\n\n    render() {\n        let availableLocales = ['fr', 'en'];\n\n        return (<div>\n            <Button onClick={this.handleClick.bind(this)}\n            >{this.props.t('label.languages')}</Button>\n            <Menu open={Boolean(this.state.anchorEl)} onClose={this.handleClose.bind(this, null)}\n                  anchorEl={this.state.anchorEl}>\n                {availableLocales.map((locale) => (\n                    <MenuItem onClick={this.handleClose.bind(this, locale)} key={locale}\n                              value={locale}>{locale}</MenuItem>))}\n            </Menu>\n        </div>);\n    }\n}\n\nLanguageSwitcher.contextTypes = {\n    i18n: PropTypes.object\n};\n\nLanguageSwitcher = translate('react-dxcomponents')(LanguageSwitcher);\n\n\nexport {LanguageSwitcher}\n","import React from 'react';\nimport {Grid, Paper} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet TestLayout = function (props) {\n    return (<Grid container>\n        <Grid item xs={12} md={6}>\n            <Paper> {props.leftCol}</Paper>\n        </Grid>\n        <Grid item xs={12} md={6}>\n            <Paper>{props.rightCol}</Paper>\n        </Grid>\n    </Grid>);\n};\n\n\nTestLayout.propTypes = {\n    leftCol: PropTypes.element,\n    rightCol: PropTypes.element\n};\n\nexport {TestLayout};","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nfunction withNodesFromPath(fragments) {\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let nodes = [];\n\n            let jcr = data.jcr;\n\n            if (jcr) {\n                if (jcr.node) {\n                    nodes = jcr.node.children.nodes;\n                }\n            }\n\n            return {\n                ...ownProps,\n                nodes: nodes,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let vars = {\n                path: props.path,\n                types: props.types,\n            };\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars,\n                skip: !props.path\n            }\n        };\n\n        let query = gql`\n            query NodesQuery($path:String!, $types:[String]!) {\n                jcr {\n                    node:nodeByPath(path: $path) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        return graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n    }\n}\n\nexport {withNodesFromPath};\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {withNodesFromPath} from \"../nodesTable/withNodesFromPath\";\nimport {Button, Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let RenderComponent = (props) => (<Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Update</TableCell>\n                        <TableCell>Delete</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableCell>{node.name}</TableCell>\n                            <TableCell>{node.myprop.value}</TableCell>\n                            <TableCell><Button onClick={() => this.props.setPropertyMutation({\n                                variables: {\n                                    path: node.path,\n                                    value: (\"test:\" + new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}>Update</Button></TableCell>\n                            <TableCell><Button onClick={() => this.props.removeNodeMutation({\n                                variables: {\n                                    path: node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}>Delete</Button></TableCell>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        );\n\n        this.Component = withNodesFromPath([{\n            applyFor: \"node\",\n            gql: gql`fragment Test on JCRNode {\n                myprop:property(name:\"myprop\") {\n                    value\n                }\n            }`\n        }])(RenderComponent);\n    }\n\n\n    render() {\n        let Component = this.Component;\n        return (\n            <div>\n                <Button onClick={() => this.props.addNodeMutation({\n                    variables: {\n                        name: (\"name-\" + (new Date().getTime())),\n                        value: (\"test:\" + new Date())\n                    },\n                    refetchQueries: [\"NodesQuery\"]\n                })}>New</Button>\n\n                <Component path={\"/\"} types={[\"nt:unstructured\"]}/>\n            </div>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path)\n        }\n    }\n`;\n\nlet MutationExample = graphql(setProperty, {name: 'setPropertyMutation'})(\n    graphql(addNode, {name: 'addNodeMutation'})(\n        graphql(removeNode, {name: 'removeNodeMutation'})(MutationExampleView)));\n\nexport {MutationExample};","import React from 'react';\nimport {Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableCell>Name</TableCell>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableCell>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableCell>\n        </TableRow>);\n\n    return (<Table>\n                <TableHead>\n                    {headers()}\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>)\n};\n\nNodesTableViewMaterial.propTypes = {\n    headers: PropTypes.func,\n    row: PropTypes.func,\n    textRenderer: PropTypes.func,\n    nodes: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\n\nfunction withPathFromSelection(reduxStoreId) {\n    return (WrappedComponent) => {\n        return connect(\n            (state, ownProps) => ({\n                ...ownProps,\n                path: (state[\"selectedPaths_\" + reduxStoreId] && state[\"selectedPaths_\" + reduxStoreId].length === 1) ? state[\"selectedPaths_\" + reduxStoreId][0] : null,\n            }),\n            () => ({}))(WrappedComponent);\n    }\n}\n\nexport { withPathFromSelection }","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, RadioButtonChecked, RadioButtonUnchecked} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterial = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <RadioButtonChecked/> :\n                        <RadioButtonUnchecked/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem: PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func\n};\n\nPickerViewMaterial = withTheme()(PickerViewMaterial);\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, CheckBoxOutlineBlank, CheckBox} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected, true) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <CheckBox/> :\n                        <CheckBoxOutlineBlank/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nPickerViewMaterialMultiple = withTheme()(PickerViewMaterialMultiple);\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass Picker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        let query = gql`\n            query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                jcr {\n                    rootNodes:nodesByPath(paths: $rootPaths) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}, limit:1) {\n                            pageInfo {\n                                totalCount\n                            }\n                        }\n                        selectable : isNodeType(type: {types:$selectable})\n                        openable : isNodeType(type: {types:$openable})\n                        ... node\n                    },\n                    openNodes:nodesByPath(paths: $openPaths) {\n                        path\n                        uuid\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                children(typesFilter:{types:$types}, limit:1) {\n                                    pageInfo {\n                                        totalCount\n                                    }\n                                }\n                                selectable : isNodeType(type: {types:$selectable})\n                                openable : isNodeType(type: {types:$openable})\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        let { fragments, ...graphqlComponentProps } = props;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        this.graphqlComponentProps = graphqlComponentProps;\n\n        let state = {};\n        let that = this;\n        if (!props.openPaths) {\n            state.openPaths = props.defaultOpenPaths ? _.clone(props.defaultOpenPaths) : [];\n            graphqlComponentProps.onOpenItem = (path,open) => {\n                that.setState( (prevState, props) => ({\n                    openPaths: open ? [\n                        ...prevState.openPaths,\n                        path\n                    ] : _.filter(prevState.openPaths, (thispath) => thispath !== path)\n                }));\n                if (props.onOpenItem) {\n                    props.onOpenItem(path,open);\n                }\n            }\n        }\n\n        if (!props.selectedPaths) {\n            state.selectedPaths = props.defaultSelectedPaths ? _.clone(props.defaultSelectedPaths) :  [];\n            graphqlComponentProps.onSelectItem = (path,selected,multiple) => {\n                that.setState((prevState, props)=> ({\n                    selectedPaths: selected ? [\n                        ...(multiple ? prevState.selectedPaths : []),\n                            path\n                        ] : _.filter(prevState.selectedPaths, (thispath) => thispath !== path)\n                }));\n                if (props.onSelectItem) {\n                    props.onSelectItem(path,select,multiple);\n                }\n            }\n        }\n        this.state = state;\n\n        this.GraphQLComponent = graphql(query, {\n            props: this.mapResultsToProps,\n            options: this.mapPropsToOptions\n        })(this.props.render);\n    }\n\n    componentDidUpdate(prevProps, prevState, prevContext) {\n        if (this.props.onSelectionChange && !_.isEqual(this.state.selectedPaths,prevState.selectedPaths)) {\n            this.props.onSelectionChange(this.state.selectedPaths);\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextState) {\n        let { fragments, onOpenItem, onSelectItem, ...graphqlComponentProps } = nextProps;\n        _.assign(this.graphqlComponentProps, graphqlComponentProps);\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let selectedPaths = ownProps.selectedPaths;\n        let openPaths = ownProps.openPaths ? ownProps.openPaths : [];\n\n        let pickerEntries = [];\n        let nodesById = {};\n        let jcr = data.jcr;\n\n        let addNode = function (node, depth, index) {\n            let selected = false;\n            if (node.selectable) {\n                selected = _.indexOf(selectedPaths, node.path) !== -1\n            }\n            let pickerNode = {\n                name: node.name,\n                path: node.path,\n                open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                selected: selected,\n                openable: node.openable,\n                selectable: node.selectable,\n                depth: depth,\n                prefix: _.repeat(\"&nbsp;\", depth * 3),\n                node: node,\n                hidden: false,\n                hasChildren: node.children.pageInfo.totalCount > 0\n            };\n            pickerEntries.splice(index, 0, pickerNode);\n            nodesById[node.uuid] = pickerNode;\n            return pickerNode;\n        };\n\n        if (jcr) {\n            if (jcr.rootNodes) {\n                _.forEach(jcr.rootNodes, rootNode => {\n                    let root = addNode(rootNode, 0, 0);\n                    root.hidden = ownProps.hideRoot;\n                });\n            }\n            if (jcr.openNodes) {\n                _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                    let parent = nodesById[node.uuid];\n                    if (parent) {\n                        let parentIndex = _.indexOf(pickerEntries, parent);\n                        _.forEachRight(node.children.nodes, (child) => {\n                            addNode(child, parent.depth + 1, parentIndex + 1)\n                        })\n                    }\n                });\n            }\n        }\n\n        // Nodes loaded, fill selection list\n        let selectedNodes = _.filter(pickerEntries, (node) => {\n            return node.selected\n        }).map((node) => {\n            return node.node\n        });\n\n        selectedPaths = _.map(selectedNodes, \"path\");\n        pickerEntries = _.filter(pickerEntries, pickerNode => {\n            return !pickerNode.hidden;\n        });\n\n        return {\n            ...ownProps,\n            pickerEntries: pickerEntries,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let openPaths = props.openPaths ? props.openPaths : [];\n\n        let fullyOpenPath = (props, path) => {\n            let rootFound = false;\n            _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                if (!rootFound) {\n                    _.forEach(props.rootPaths, rootPath => {\n                        rootFound = rootFound || _.startsWith(acc, rootPath);\n                    })\n                }\n                if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                    openPaths.push(acc);\n                }\n                return acc + \"/\" + it\n            }, \"\");\n        };\n\n        if (props.selectedPaths) {\n            _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n        }\n\n        let vars = {\n            rootPaths: props.rootPaths,\n            types: _.union(props.openableTypes, props.selectableTypes),\n            selectable: props.selectableTypes,\n            openable: props.openableTypes,\n            openPaths: openPaths,\n        };\n\n        if (props.queryVariables) {\n            _.assign(vars, props.queryVariables);\n        }\n\n        return {\n            variables: vars\n        }\n    }\n\n    render() {\n        let GraphQLComponent = this.GraphQLComponent;\n\n        return <GraphQLComponent {...this.graphqlComponentProps} {...this.state} />\n    }\n}\n\nPicker.propTypes = {\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open by default (uncontrolled mode)\n     */\n    defaultOpenPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of open folders in controlled mode\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * Preselected items path (uncontrolled mode)\n     */\n    defaultSelectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of selected path in controlled mode\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Callback when the selection has changed\n     */\n    onSelectionChange: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree. Should accept : pickerEntries,onSelectItem,onOpenItem . Other properties are passed through.\n     */\n    render: PropTypes.func,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    queryVariables: PropTypes.object\n\n};\n\n\nexport {Picker}"],"names":["getI18n","options","use","XHR","init","currentLanguage","undefined","contextPath","i18n","reducers","store","debugTool","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","state","action","_","value","key","resetStateReducer","type","theme","createMuiTheme","indigo","pink","red","A200","A400","A700","createOutletHistory","baseHistory","outletName","getPath","path","parts","base","location","pathname","newPath","indexOf","substr","split","p","startsWith","push","getState","newState","extractPath","s","part","length","initialLocation","listeners","history","createHref","replace","n","go","goBack","goForward","prompt","block","listener","unlisten","listen","event","assign","call","createHashHistory","OutletRouter","props","outletHistory","outlet","dispose","React","children","Component","RouterExample","Test1","match","params","Test2","Test3","id","Route","DxContextProvider","dxContext","apollo","redux","mui","router","Children","only","uilang","createElement","I18nextProvider","HashRouter","ApolloProvider","client","Provider","theTheme","MuiThemeProvider","childContextTypes","PropTypes","object","withDxContext","WrappedComponent","context","contextTypes","SimpleListView","components","done","then","reactElements","setState","componentDidMount","DynamicComponentsList","componentCache","data","ownProps","jcr","safeEval","eval","nodesByQuery","nodes","renderedView","output","imports","concat","c","getImports","promise","Promise","all","imp","SystemJS","import","r","ReactDOM","m","splice","renderComponent","cacheMatch","f","dataComponent","query","gql","graphql","mapResultsToProps","mapPropsToOptions","propTypes","string","isRequired","element","LanguageSwitcher","anchorEl","target","lang","changeLanguage","availableLocales","handleClick","bind","t","Boolean","handleClose","map","locale","translate","TestLayout","leftCol","rightCol","withNodesFromPath","fragments","ViewComponent","node","vars","types","queryVariables","MutationExampleView","RenderComponent","uuid","name","myprop","setPropertyMutation","Date","removeNodeMutation","addNodeMutation","getTime","setProperty","addNode","removeNode","MutationExample","NodesTableViewMaterial","headers","row","func","arrayOf","withPathFromSelection","reduxStoreId","connect","PickerViewMaterial","pickerEntries","entry","selectable","onSelectItem","selected","onOpenItem","open","opacity","RadioButtonChecked","RadioButtonUnchecked","ListItemText","paddingLeft","depth","spacing","unit","openable","hasChildren","ExpandLess","ExpandMore","array","withTheme","PickerViewMaterialMultiple","CheckBox","CheckBoxOutlineBlank","Picker","graphqlComponentProps","that","openPaths","defaultOpenPaths","prevState","thispath","selectedPaths","defaultSelectedPaths","multiple","select","GraphQLComponent","render","prevProps","prevContext","onSelectionChange","nextProps","nextState","nodesById","index","pickerNode","pageInfo","totalCount","rootNodes","root","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","child","selectedNodes","fullyOpenPath","rootFound","reduce","acc","it","rootPaths","rootPath","openableTypes","selectableTypes","oneOfType","shape"],"mappings":"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"}