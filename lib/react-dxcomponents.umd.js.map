{"version":3,"file":"react-dxcomponents.umd.js","sources":["../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/reduxStore.js","../src/javascript/picker/withPickerModel.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/nodesTable/withNodesFromPath.jsx","../src/javascript/nodesTable/withPathFromSelection.jsx","../src/javascript/layout/TestLayout.jsx","../src/javascript/router/createOutletHistory.js","../src/javascript/router/router.js","../src/javascript/engine/Engine.jsx","../src/javascript/router/RouterExample.jsx","../src/javascript/mutations/Mutation.jsx","../src/javascript/theme.js"],"sourcesContent":["import React from 'react';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<div>{this.state.reactElements}</div>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedView.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedView(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nDynamicComponentsList.propTypes = {\n    /**\n     * Id of the \"componentsFolder\" to look for\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Component to use to do the rendering\n     */\n    renderComponent: PropTypes.element\n}\n\nexport {DynamicComponentsList};\n","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\nimport {reducers, resetStateReducer, store} from \"../reduxStore\";\n\nfunction withPickerModel(fragments, reduxStoreId) {\n\n\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let selectedPaths = ownProps.selectedPaths;\n            let openPaths = ownProps.openPaths ? ownProps.openPaths : [];\n\n            let pickerEntries = [];\n            let nodesById = {};\n            let jcr = data.jcr;\n\n            let addNode = function (node, depth, index) {\n                let selected = false;\n                if (node.selectable) {\n                    selected = _.indexOf(selectedPaths, node.path) !== -1\n                }\n                let pickerNode = {\n                    name: node.name,\n                    path: node.path,\n                    open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                    selected: selected,\n                    openable: node.openable,\n                    selectable: node.selectable,\n                    depth: depth,\n                    prefix: _.repeat(\"&nbsp;\", depth * 3),\n                    node: node,\n                    hidden: false,\n                    hasChildren: node.children.pageInfo.totalCount > 0\n                };\n                pickerEntries.splice(index, 0, pickerNode);\n                nodesById[node.uuid] = pickerNode;\n                return pickerNode;\n            };\n\n            if (jcr) {\n                if (jcr.rootNodes) {\n                    _.forEach(jcr.rootNodes, rootNode => {\n                        let root = addNode(rootNode, 0, 0);\n                        root.hidden = ownProps.hideRoot;\n                    });\n                }\n                if (jcr.openNodes) {\n                    _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                        let parent = nodesById[node.uuid];\n                        if (parent) {\n                            let parentIndex = _.indexOf(pickerEntries, parent);\n                            _.forEachRight(node.children.nodes, (child) => {\n                                addNode(child, parent.depth + 1, parentIndex + 1)\n                            })\n                        }\n                    });\n                }\n            }\n\n            // Nodes loaded, fill selection list\n            let selectedNodes = _.filter(pickerEntries, (node) => {\n                return node.selected\n            }).map((node) => {\n                return node.node\n            });\n\n            selectedPaths = _.map(selectedNodes, \"path\");\n            pickerEntries = _.filter(pickerEntries, pickerNode => {\n                return !pickerNode.hidden;\n            });\n            return {\n                ...ownProps,\n                pickerEntries: pickerEntries,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let openPaths = props.openPaths ? props.openPaths : [];\n\n            let fullyOpenPath = (props, path) => {\n                let rootFound = false;\n                _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                    if (!rootFound) {\n                        _.forEach(props.rootPaths, rootPath => {\n                            rootFound = rootFound || _.startsWith(acc, rootPath);\n                        })\n                    }\n                    if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                        openPaths.push(acc);\n                    }\n                    return acc + \"/\" + it\n                }, \"\");\n            };\n\n            if (props.selectedPaths) {\n                _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n            }\n\n            let vars = {\n                rootPaths: props.rootPaths,\n                types: _.union(props.openableTypes, props.selectableTypes),\n                selectable: props.selectableTypes,\n                openable: props.openableTypes,\n                openPaths: openPaths,\n            };\n\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars\n            }\n        };\n\n        let query = gql`\n            query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                jcr {\n                    rootNodes:nodesByPath(paths: $rootPaths) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}, limit:1) {\n                            pageInfo {\n                                totalCount\n                            }\n                        }\n                        selectable : isNodeType(type: {types:$selectable})\n                        openable : isNodeType(type: {types:$openable})\n                        ... node\n                    },\n                    openNodes:nodesByPath(paths: $openPaths) {\n                        path\n                        uuid\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                children(typesFilter:{types:$types}, limit:1) {\n                                    pageInfo {\n                                        totalCount\n                                    }\n                                }\n                                selectable : isNodeType(type: {types:$selectable})\n                                openable : isNodeType(type: {types:$openable})\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        let GraphQLComponent = graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n\n\n        if (reduxStoreId) {\n            // Redux map\n            let mapStateToProps = (state, ownProps) => {\n                return {\n                    ...ownProps,\n                    openPaths: state[\"openPaths_\" + reduxStoreId] ? state[\"openPaths_\" + reduxStoreId] : ownProps.openPaths,\n                    selectedPaths: state[\"selectedPaths_\" + reduxStoreId] ? state[\"selectedPaths_\" + reduxStoreId] : ownProps.selectedPaths\n                }\n            };\n\n            let mapDispatchToProps = (dispatch, ownProps) => {\n                return {\n                    onSelectItem(path, select, multiple) {\n                        dispatch({\n                            type: select ? 'SELECT_PICKER_ENTRY_' + (multiple ? \"MULTIPLE_\" : \"SINGLE_\") + reduxStoreId : 'UNSELECT_PICKER_ENTRY_' + reduxStoreId,\n                            path: path\n                        })\n                    },\n                    onOpenItem(path, open) {\n                        dispatch({\n                            type: open ? 'OPEN_PICKER_ENTRY_' + reduxStoreId : 'CLOSE_PICKER_ENTRY_' + reduxStoreId,\n                            path: path\n                        })\n                    }\n                }\n            };\n\n            let ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(GraphQLComponent);\n\n            return class extends React.Component {\n                constructor(props) {\n                    super(props);\n                }\n\n                componentWillMount() {\n                    // Setup reducers\n                    reducers[\"openPaths_\" + reduxStoreId] = (state = this.props.openPaths || [], action) => {\n                        let index = state.indexOf(action.path);\n                        if (action.type === 'OPEN_PICKER_ENTRY_' + reduxStoreId && index === -1) {\n                            return [\n                                ...state,\n                                action.path\n                            ]\n                        } else if (action.type === 'CLOSE_PICKER_ENTRY_' + reduxStoreId && index !== -1) {\n                            return _.filter(state, (path) => path !== action.path);\n                        }\n                        return state;\n                    };\n                    reducers[\"selectedPaths_\" + reduxStoreId] = (state = this.props.selectedPaths || [], action) => {\n                        let index = state.indexOf(action.path);\n                        if (action.type === 'SELECT_PICKER_ENTRY_MULTIPLE_' + reduxStoreId && index === -1) {\n                            return [\n                                ...state,\n                                action.path\n                            ]\n                        } else if (action.type === 'SELECT_PICKER_ENTRY_SINGLE_' + reduxStoreId) {\n                            return [action.path];\n                        } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + reduxStoreId && index !== -1) {\n                            return _.filter(state, (path) => path !== action.path);\n                        }\n                        return state;\n                    };\n                }\n\n                componentWillUnmount() {\n                    reducers[\"openPaths_\" + reduxStoreId] = resetStateReducer;\n                    reducers[\"selectedPaths_\" + reduxStoreId] = resetStateReducer;\n\n                    store.dispatch({type: \"RESET_STATE\"});\n\n                    delete reducers[\"openPaths_\" + reduxStoreId];\n                    delete reducers[\"selectedPaths_\" + reduxStoreId];\n                }\n\n                render() {\n                    return (<ConnectedComponent {...this.props}/>)\n                }\n            };\n        } else {\n            return class extends React.Component {\n                constructor(props) {\n                    super(props);\n                    this.state = {\n                        openPaths: props.openPaths ? props.openPaths : [],\n                        selectedPaths: props.selectedPaths ? props.selectedPaths : (props.selectedPath ? [props.selectedPath] : [])\n                    };\n                }\n\n                onSelectItem(state, path, selected, multiple) {\n                    this.setState({\n                        openPaths: state.openPaths,\n                        selectedPaths: selected ? [\n                            ...(multiple ? state.selectedPaths : []),\n                            path\n                        ] : _.filter(state.selectedPaths, (thispath) => thispath !== path),\n                    });\n                }\n\n                onOpenItem(state, path, open) {\n                    this.setState({\n                        openPaths: open ? [\n                            ...state.openPaths,\n                            path\n                        ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                        selectedPaths: state.selectedPaths\n                    });\n                }\n\n\n                render() {\n                    return <GraphQLComponent {...this.props}\n                                             onOpenItem={this.onOpenItem.bind(this, this.state)}\n                                             onSelectItem={this.onSelectItem.bind(this, this.state)}\n                                             openPaths={this.state.openPaths}\n                                             selectedPaths={this.state.selectedPaths}\n                    />;\n                }\n\n            }\n        }\n    }\n}\n\n// PickerData.propTypes = {\n//     /**\n//      * List of root paths for the picker\n//      */\n//     rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * List of folder paths that are open\n//      */\n//     openPaths: PropTypes.arrayOf(PropTypes.string),\n//\n//     /**\n//      * List of node types that can be \"opened\" (folders)\n//      */\n//     openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * List of node types that can be \"selected\" (items)\n//      */\n//     selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * If the picker allows multiple selection\n//      */\n//     multipleSelection: PropTypes.bool,\n//\n//     /**\n//      * Preselected item path (for single selection picker)\n//      */\n//     selectedPath: PropTypes.string,\n//\n//     /**\n//      * Preselected items path (for multiple selection picker)\n//      */\n//     selectedPaths: PropTypes.arrayOf(PropTypes.string),\n//\n//     /**\n//      * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n//      */\n//     textRenderer: PropTypes.func,\n//\n//     /**\n//      * Component to use to do the full rendering of the tree\n//      */\n//     renderComponent: PropTypes.element,\n//\n//     /**\n//      * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n//      */\n//     fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n//         PropTypes.string,\n//         PropTypes.shape({\n//             applyFor: PropTypes.string.isRequired,\n//             variables: PropTypes.string,\n//             gql: PropTypes.object.isRequired\n//         })\n//     ])),\n//\n//     /**\n//      * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n//      */\n//     variables: PropTypes.object\n//\n// };\n//\n\nexport {withPickerModel};\n","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, RadioButtonChecked, RadioButtonUnchecked} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterial = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <RadioButtonChecked/> :\n                        <RadioButtonUnchecked/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem: PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func\n};\n\nPickerViewMaterial = withTheme()(PickerViewMaterial);\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, CheckBoxOutlineBlank, CheckBox} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected, true) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <CheckBox/> :\n                        <CheckBoxOutlineBlank/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nPickerViewMaterialMultiple = withTheme()(PickerViewMaterialMultiple);\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableCell>Name</TableCell>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableCell>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableCell>\n        </TableRow>);\n\n    return (<Table>\n                <TableHead>\n                    {headers()}\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>)\n};\n\nNodesTableViewMaterial.propTypes = {\n    headers: PropTypes.func,\n    row: PropTypes.func,\n    textRenderer: PropTypes.func,\n    nodes: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nfunction withNodesFromPath(fragments) {\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let nodes = [];\n\n            let jcr = data.jcr;\n\n            if (jcr) {\n                if (jcr.node) {\n                    nodes = jcr.node.children.nodes;\n                }\n            }\n\n            return {\n                ...ownProps,\n                nodes: nodes,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let vars = {\n                path: props.path,\n                types: props.types,\n            };\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars,\n                skip: !props.path\n            }\n        };\n\n        let query = gql`\n            query NodesQuery($path:String!, $types:[String]!) {\n                jcr {\n                    node:nodeByPath(path: $path) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        return graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n    }\n}\n\nexport {withNodesFromPath};\n","import React from 'react';\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\n\nfunction withPathFromSelection(reduxStoreId) {\n    return (WrappedComponent) => {\n        return connect(\n            (state, ownProps) => ({\n                ...ownProps,\n                path: (state[\"selectedPaths_\" + reduxStoreId] && state[\"selectedPaths_\" + reduxStoreId].length === 1) ? state[\"selectedPaths_\" + reduxStoreId][0] : null,\n            }),\n            () => ({}))(WrappedComponent);\n    }\n}\n\nexport { withPathFromSelection }","import React from 'react';\nimport {Grid, Paper} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet TestLayout = function (props) {\n    return (<Grid container>\n        <Grid item xs={12} md={6}>\n            <Paper> {props.leftCol}</Paper>\n        </Grid>\n        <Grid item xs={12} md={6}>\n            <Paper>{props.rightCol}</Paper>\n        </Grid>\n    </Grid>);\n};\n\n\nTestLayout.propTypes = {\n    leftCol: PropTypes.element,\n    rightCol: PropTypes.element\n};\n\nexport {TestLayout};","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nlet baseHistory = createHashHistory();\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {Button, Dialog, DialogTitle , DialogContent, DialogActions} from 'material-ui';\nimport * as _ from \"lodash\";\nimport {OutletRouter as Router} from '../router/router'\nimport {Link, Route} from 'react-router-dom'\n\nclass Engine extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n        };\n        this.components = [\n            {\n                link:\"/link1\",\n                label:\"Link 1\",\n                component: (props) => <div>toto</div>\n            },\n            {\n                link:\"/link2\",\n                label:\"Link 2\",\n                component: (props) => (<div>titi</div>)\n            }\n        ];\n    }\n\n    handleOpen() {\n        this.setState({open: true});\n    };\n\n    handleClose() {\n        this.setState({open: false});\n    };\n\n    render() {\n        return (\n            <div>\n                <Button onClick={()=>this.handleOpen()}>Open</Button>\n                <Dialog\n                    open={this.state.open}\n                    onClose={()=>this.handleClose()}\n                >\n                    <DialogTitle>Dialog</DialogTitle>\n                    <DialogContent>\n                    <Router outlet={\"outlet1\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                    <Router outlet={\"outlet2\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={()=>this.handleClose()}>Cancel</Button>,\n                        <Button onClick={()=>this.handleClose()}>Submit</Button>\n                    </DialogActions>\n                </Dialog>\n\n            </div>);\n    }\n\n\n}\n\nexport {Engine}\n","import React from 'react';\nimport {OutletRouter as Router} from './router'\nimport {Link, Route} from 'react-router-dom'\n\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (<div>Test1 {props.match.params.value}</div>)\n        let Test2 = props => (<div>Test2</div>);\n        let Test3 = props => (<div>Test3</div>);\n\n        return (<Router outlet={this.props.id}>\n            <div>\n\n                ---- links : ----\n                <Link to={'/test1/toto'}>Test1 toto</Link> -\n                <Link to={'/test1/tutu'}>Test1 tutu</Link> -\n                <Link to={'/test2'}>Test2</Link> -\n                <Link to={'/test3'}>Test3</Link> -\n\n                <Router outlet=\"new\">\n                    <div>\n                        <Link to={'/test1'}>Test1/other</Link> -\n                        <Link to={'/test2'}>Test2/other</Link>\n                    </div>\n                </Router>\n                ---- routes : ----\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n\n                <Router outlet=\"new\">\n                    <div>\n                        <Route path={'/test1'} component={Test1}/>\n                        <Route path={'/test2'} component={Test2}/>\n                    </div>\n                </Router>\n\n                ------------------\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {client} from \"@jahia/apollo-dx\";\nimport {withNodesFromPath} from \"../nodesTable/withNodesFromPath\";\nimport {Button, Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let RenderComponent = (props) => (<Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Update</TableCell>\n                        <TableCell>Delete</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableCell>{node.name}</TableCell>\n                            <TableCell>{node.myprop.value}</TableCell>\n                            <TableCell><Button onClick={() => this.props.setPropertyMutation({\n                                variables:{\n                                    path:node.path,\n                                    value:(\"test:\"+new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}>Update</Button></TableCell>\n                            <TableCell><Button onClick={() => this.props.removeNodeMutation({\n                                variables:{\n                                    path:node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}>Delete</Button></TableCell>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        );\n\n        this.Component = withNodesFromPath([{\n            applyFor: \"node\",\n            gql: gql`fragment Test on JCRNode {\n            myprop:property(name:\"myprop\") {\n                value\n            }\n        }`\n        }])(RenderComponent);\n    }\n\n\n    render() {\n        let Component = this.Component;\n        return (\n            <div>\n            <Button onClick={() => this.props.addNodeMutation({\n                variables:{\n                    name:(\"name-\"+(new Date().getTime())),\n                    value:(\"test:\"+new Date())\n                },\n                refetchQueries: [\"NodesQuery\"]\n            })} >New</Button>\n\n            <Component path={\"/\"} types={[\"nt:unstructured\"]}/>\n            </div>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path) \n        }\n    }\n`;\n\nclass MutationExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.Component =\n            graphql(setProperty, { name: 'setPropertyMutation' })(\n                graphql(addNode, { name: 'addNodeMutation' })(\n                    graphql(removeNode, { name: 'removeNodeMutation' })(MutationExampleView)));\n    }\n\n    render() {\n        let Component = this.Component;\n        return (<ApolloProvider client={client}><Component/></ApolloProvider>)\n    }\n}\n\nexport { MutationExample};","import {createMuiTheme} from 'material-ui';\nimport * as _ from \"lodash\";\n\nvar indigo = {\n    50: '#e8eaf6',\n    100: '#c5cae9',\n    200: '#9fa8da',\n    300: '#7986cb',\n    400: '#5c6bc0',\n    500: '#3f51b5',\n    600: '#3949ab',\n    700: '#303f9f',\n    800: '#283593',\n    900: '#1a237e',\n    A100: '#8c9eff',\n    A200: '#536dfe',\n    A400: '#3d5afe',\n    A700: '#304ffe'\n};\n\nvar pink = {\n    50: '#fce4ec',\n    100: '#f8bbd0',\n    200: '#f48fb1',\n    300: '#f06292',\n    400: '#ec407a',\n    500: '#e91e63',\n    600: '#d81b60',\n    700: '#c2185b',\n    800: '#ad1457',\n    900: '#880e4f',\n    A100: '#ff80ab',\n    A200: '#ff4081',\n    A400: '#f50057',\n    A700: '#c51162'\n};\n\nvar red = {\n    50: '#ffebee',\n    100: '#ffcdd2',\n    200: '#ef9a9a',\n    300: '#e57373',\n    400: '#ef5350',\n    500: '#f44336',\n    600: '#e53935',\n    700: '#d32f2f',\n    800: '#c62828',\n    900: '#b71c1c',\n    A100: '#ff8a80',\n    A200: '#ff5252',\n    A400: '#ff1744',\n    A700: '#d50000'\n};\n\nconst theme = createMuiTheme();\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\n// const theme = createMuiTheme({\n//     palette: {\n//         contrastThreshold: 3.1,\n//         tonalOffset: 0.07,\n//         primary: {\n//             light: indigo[300],\n//             main: indigo[500],\n//             dark: indigo[700],\n//             contrastText: defaultTheme.palette.getContrastText(indigo[500]),\n//         },\n//         secondary: {\n//             light: pink.A200,\n//             main: pink.A400,\n//             dark: pink.A700,\n//             contrastText: defaultTheme.palette.getContrastText(pink.A400),\n//         },\n//         error: red.A400,\n//     },\n// });\nconsole.log(theme);\nexport { theme }\n"],"names":["SimpleListView","props","state","components","done","then","reactElements","setState","componentDidMount","React","Component","DynamicComponentsList","componentCache","data","ownProps","jcr","safeEval","eval","nodesByQuery","_","nodes","n","renderedView","output","imports","concat","c","getImports","promise","length","Promise","all","imp","SystemJS","import","s","r","createElement","ReactDOM","m","splice","id","renderComponent","cacheMatch","f","dataComponent","query","gql","graphql","mapResultsToProps","mapPropsToOptions","push","client","propTypes","PropTypes","string","isRequired","element","reducers","store","debugTool","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","action","value","key","resetStateReducer","type","undefined","withPickerModel","fragments","reduxStoreId","ViewComponent","selectedPaths","openPaths","pickerEntries","nodesById","addNode","node","depth","index","selected","selectable","path","pickerNode","name","openable","children","pageInfo","totalCount","uuid","rootNodes","root","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","child","selectedNodes","map","fullyOpenPath","rootFound","reduce","acc","it","rootPaths","rootPath","vars","openableTypes","selectableTypes","queryVariables","GraphQLComponent","mapStateToProps","mapDispatchToProps","dispatch","select","multiple","open","ConnectedComponent","connect","indexOf","selectedPath","thispath","onOpenItem","bind","onSelectItem","PickerViewMaterial","entry","opacity","RadioButtonChecked","RadioButtonUnchecked","ListItemText","paddingLeft","theme","spacing","unit","call","hasChildren","ExpandLess","ExpandMore","array","func","withTheme","PickerViewMaterialMultiple","CheckBox","CheckBoxOutlineBlank","NodesTableViewMaterial","headers","row","arrayOf","object","withNodesFromPath","types","withPathFromSelection","WrappedComponent","TestLayout","leftCol","rightCol","createOutletHistory","baseHistory","outletName","getPath","parts","base","location","pathname","newPath","substr","split","p","startsWith","getState","newState","extractPath","part","initialLocation","listeners","history","createHref","replace","go","goBack","goForward","prompt","block","listener","unlisten","listen","event","assign","createHashHistory","OutletRouter","outletHistory","outlet","dispose","Engine","handleOpen","handleClose","e","link","label","Route","component","RouterExample","Test1","match","params","Test2","Test3","MutationExampleView","RenderComponent","myprop","setPropertyMutation","Date","removeNodeMutation","addNodeMutation","getTime","setProperty","removeNode","MutationExample","createMuiTheme","console","log"],"mappings":"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"}