{"version":3,"file":"react-dxcomponents.umd.js","sources":["../src/javascript/themeProvider.js","../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/picker/PickerData.jsx","../src/javascript/reduxStore.js","../src/javascript/picker/PickerRedux.jsx","../src/javascript/picker/PickerState.jsx","../src/javascript/picker/Picker.jsx","../src/javascript/picker/PickerView.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/nodesTable/NodesTableData.jsx","../src/javascript/nodesTable/NodesTable.jsx","../src/javascript/layout/TestLayout.jsx","../src/javascript/router/createOutletHistory.js","../src/javascript/router/router.js","../src/javascript/engine/Engine.jsx","../src/javascript/router/RouterExample.jsx","../src/javascript/mutations/Mutation.jsx"],"sourcesContent":["import {getMuiTheme, lightBaseTheme} from 'material-ui/styles/index';\nimport * as _ from \"lodash\";\n\nfunction muiTheme() {\n    let ssrMode = (typeof window === 'undefined');\n    if (ssrMode) {\n        var req = global.request;\n\n        let theme = _.clone(lightBaseTheme);\n        theme.userAgent = req.getHeader(\"User-Agent\");\n        return getMuiTheme(theme);\n    } else {\n        return getMuiTheme(lightBaseTheme);\n    }\n}\n\nexport { muiTheme };","import React from 'react';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<MuiThemeProvider muiTheme={muiTheme()}><div>{this.state.reactElements}</div></MuiThemeProvider>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedView.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedView(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nDynamicComponentsList.propTypes = {\n    /**\n     * Id of the \"componentsFolder\" to look for\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Component to use to do the rendering\n     */\n    renderComponent: PropTypes.element\n}\n\nexport {DynamicComponentsList};\n","import React from 'react';\nimport {IconButton, List, ListItem, makeSelectable} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\nimport {ExpandLess, ExpandMore} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet SelectableList = makeSelectable(List);\n\nlet PickerViewMaterial = function (props) {\n    return (\n        <MuiThemeProvider muiTheme={muiTheme()}>\n            <SelectableList value={props.selectedPath} onChange={\n                (event, path) => {\n                    if (path && (props.pickerEntries.find(entry => entry.path === path).selectable)) {\n                        props.onSelectItem(path, true)\n                    }\n                }\n            }>\n                {props.pickerEntries.map((entry) =>\n                    (<ListItem value={entry.path} key={entry.path} nestedLevel={entry.depth + 1}\n                               primaryText={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name}\n                               rightIconButton={entry.openable ? (<IconButton\n                                   onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                   <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    />)\n                )}\n            </SelectableList>\n        </MuiThemeProvider>\n    )\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    selectedPath: PropTypes.string,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {Checkbox, IconButton, List, ListItem} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\nimport PropTypes from 'prop-types';\n\nimport {ExpandLess, ExpandMore} from 'material-ui-icons'\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (\n        <MuiThemeProvider muiTheme={muiTheme()}>\n            <List>\n                {props.pickerEntries.map((entry) =>\n                    (<ListItem primaryTogglesNestedList={true} key={entry.path} nestedLevel={entry.depth+1} primaryText={props['textRenderer'] ? props['textRenderer'].call(this,entry) : entry.name}\n                               leftCheckbox={entry.selectable ? <Checkbox checked={ entry.selected } /> : null}\n                               onClick={()=>{if (entry.selectable) { props.onSelectItem(entry.path, !entry.selected)}}} rightIconButton={entry.openable ? <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{ entry.open ? <ExpandLess/> : <ExpandMore/> }</IconButton> : null}\n                    />)\n                )}\n            </List>\n        </MuiThemeProvider>\n\n    )\n};\n\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n\n};\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {PickerViewMaterial} from './PickerViewMaterial'\nimport {PickerViewMaterialMultiple} from \"./PickerViewMaterialMultiple\";\nimport PropTypes from 'prop-types';\n\nclass PickerData extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let selectedPaths = ownProps.multipleSelection ? ownProps.selectedPaths : [ownProps.selectedPath];\n        let openPaths = ownProps.openPaths ? ownProps.openPaths : [];\n\n        let pickerEntries = [];\n        let nodesById = {};\n        let jcr = data.jcr;\n\n        let addNode = function (node, depth, index) {\n            let selected = false;\n            if (node.selectable) {\n                selected = _.indexOf(selectedPaths, node.path) !== -1\n            }\n            let pickerNode = {\n                name: node.name,\n                path: node.path,\n                open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                selected: selected,\n                openable: node.openable,\n                selectable: node.selectable,\n                depth: depth,\n                prefix: _.repeat(\"&nbsp;\", depth * 3),\n                node: node,\n                hidden: false\n            };\n            pickerEntries.splice(index, 0, pickerNode);\n            nodesById[node.uuid] = pickerNode;\n            return pickerNode;\n        };\n\n        if (jcr) {\n            if (jcr.rootNodes) {\n                _.forEach(jcr.rootNodes, rootNode => {\n                    let root = addNode(rootNode, 0, 0);\n                    root.hidden = ownProps.hideRoot;\n                });\n            }\n            if (jcr.openNodes) {\n                _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                    let parent = nodesById[node.uuid];\n                    if (parent) {\n                        let parentIndex = _.indexOf(pickerEntries, parent);\n                        _.forEachRight(node.children.nodes, (child) => {\n                            addNode(child, parent.depth + 1, parentIndex + 1)\n                        })\n                    }\n                });\n            }\n        }\n\n        // Nodes loaded, fill selection list\n        let selectedNodes = _.filter(pickerEntries, (node) => {\n            return node.selected\n        }).map((node) => {\n            return node.node\n        });\n\n        selectedPaths = _.map(selectedNodes, \"path\");\n        pickerEntries = _.filter(pickerEntries, pickerNode => {\n            return !pickerNode.hidden;\n        });\n        return {\n            ...ownProps,\n            pickerEntries: pickerEntries,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let openPaths = props.openPaths ? props.openPaths : [];\n\n        let fullyOpenPath = (props, path) => {\n            let rootFound = false;\n            _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                if (!rootFound) {\n                    _.forEach(props.rootPaths, rootPath => {\n                        rootFound = rootFound || _.startsWith(acc, rootPath);\n                    })\n                }\n                if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                    openPaths.push(acc);\n                }\n                return acc + \"/\" + it\n            }, \"\");\n        };\n\n        if (props.multipleSelection) {\n            _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n        } else {\n            fullyOpenPath(props, props.selectedPath);\n        }\n\n        let vars = {\n            rootPaths: props.rootPaths,\n            types: _.union(props.openableTypes, props.selectableTypes),\n            selectable: props.selectableTypes,\n            openable: props.openableTypes,\n            openPaths: openPaths,\n        };\n        if (props.variables) {\n            _.assign(vars, props.variables);\n        }\n\n        return {\n            variables: vars\n        }\n    }\n\n    render() {\n        let fragments = this.props.fragments;\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => JSON.stringify(f.fragments) === JSON.stringify(fragments) && f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                    jcr {\n                        rootNodes:nodesByPath(paths: $rootPaths) {\n                            path\n                            uuid\n                            name\n                            selectable : isNodeType(type: {types:$selectable})\n                            openable : isNodeType(type: {types:$openable})\n                            ... node\n                        },\n                        openNodes:nodesByPath(paths: $openPaths) {\n                            path\n                            uuid\n                            children(typesFilter:{types:$types}) {\n                                nodes {\n                                    path\n                                    uuid\n                                    name\n                                    selectable : isNodeType(type: {types:$selectable})\n                                    openable : isNodeType(type: {types:$openable})\n                                    ... node\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            replaceFragmentsInDocument(query, fragments);\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || this.props.multipleSelection ? PickerViewMaterialMultiple : PickerViewMaterial);\n\n            this.componentCache.push({fragments: fragments, renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider  client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nPickerData.propTypes = {\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n\n};\n\nexport { PickerData };\n","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import React from 'react';\nimport {connect, Provider} from 'react-redux'\nimport {PickerData} from './PickerData'\nimport {reducers, store, resetStateReducer} from \"../reduxStore\";\nimport PropTypes from 'prop-types';\n\nclass PickerRedux extends React.Component {\n    constructor(props) {\n        super(props);\n        this.PickerReduxWithoutStore = connect(this.mapStateToProps, this.mapDispatchToProps)(PickerData);\n    }\n\n    mapStateToProps(state, ownProps) {\n        if (ownProps.multipleSelection) {\n            return {\n                ...ownProps,\n                openPaths: state[\"openPaths_\" + ownProps.id] ? state[\"openPaths_\" + ownProps.id] : ownProps.openPaths,\n                selectedPaths: state[\"selectedPaths_\" + ownProps.id] ? state[\"selectedPaths_\" + ownProps.id] : ownProps.selectedPaths\n            }\n        } else {\n            return {\n                ...ownProps,\n                openPaths: state[\"openPaths_\" + ownProps.id] ? state[\"openPaths_\" + ownProps.id] : ownProps.openPaths,\n                selectedPath: state[\"selectedPath_\" + ownProps.id] ? state[\"selectedPath_\" + ownProps.id] : ownProps.selectedPath\n            }\n        }\n    };\n\n    mapDispatchToProps(dispatch, ownProps) {\n        return {\n            onSelectItem(path, select) {\n                dispatch({\n                    type: select ? 'SELECT_PICKER_ENTRY_' + ownProps.id : 'UNSELECT_PICKER_ENTRY_' + ownProps.id,\n                    path: path\n                })\n            },\n            onOpenItem(path, open) {\n                dispatch({\n                    type: open ? 'OPEN_PICKER_ENTRY_' + ownProps.id : 'CLOSE_PICKER_ENTRY_' + ownProps.id,\n                    path: path\n                })\n            }\n        }\n    };\n\n    openPaths() {\n        return (state = this.props.openPaths || [], action) => {\n            let index = state.indexOf(action.path);\n            if (action.type === 'OPEN_PICKER_ENTRY_' + this.props.id && index === -1) {\n                return [\n                    ...state,\n                    action.path\n                ]\n            } else if (action.type === 'CLOSE_PICKER_ENTRY_' + this.props.id && index !== -1) {\n                return _.filter(state, (path) => path !== action.path);\n            }\n            return state;\n        };\n    }\n\n\n    selectedPath() {\n        return (state = this.props.selectedPath, action) => {\n            if (action.type === 'SELECT_PICKER_ENTRY_' + this.props.id) {\n                return action.path\n            } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + this.props.id) {\n                return null;\n            }\n            return state;\n        };\n    }\n\n    selectedPaths() {\n        return (state = this.props.selectedPaths || [], action) => {\n            let index = state.indexOf(action.path);\n            if (action.type === 'SELECT_PICKER_ENTRY_' + this.props.id && index === -1) {\n                return [\n                    ...state,\n                    action.path\n                ]\n            } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + this.props.id && index !== -1) {\n                return _.filter(state, (path) => path !== action.path);\n            }\n            return state;\n        };\n    }\n\n\n    componentWillMount() {\n        reducers[\"openPaths_\" + this.props.id] = this.openPaths();\n        if (this.props.multipleSelection) {\n            reducers[\"selectedPaths_\" + this.props.id] = this.selectedPaths();\n        } else {\n            reducers[\"selectedPath_\" + this.props.id] = this.selectedPath();\n        }\n    }\n\n    componentWillUnmount() {\n        reducers[\"openPaths_\" + this.props.id] = resetStateReducer;\n        reducers[\"selectedPath_\" + this.props.id] = resetStateReducer;\n        reducers[\"selectedPaths_\" + this.props.id] = resetStateReducer;\n\n        store.dispatch({type:\"RESET_STATE\"});\n\n        delete reducers[\"openPaths_\" + this.props.id];\n        delete reducers[\"selectedPath_\" + this.props.id];\n        delete reducers[\"selectedPaths_\" + this.props.id];\n    }\n\n    render() {\n        let PickerReduxWithoutStore = this.PickerReduxWithoutStore;\n        return (<Provider store={ store }><PickerReduxWithoutStore {...this.props}/></Provider>)\n    }\n}\n\n\nPickerRedux.propTypes = {\n    /**\n     * Identifier for the picker redux store\n     */\n    id: PropTypes.string,\n\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n\n};\n\n\nexport { PickerRedux };\n","import React from 'react';\nimport {PickerData} from './PickerData';\nimport * as _ from \"lodash\";\nimport PropTypes from 'prop-types';\n\n\nclass PickerState extends React.Component {\n\n    constructor(props) {\n        super(props);\n        if (props.multipleSelection) {\n            this.state = {\n                openPaths: props.openPaths ? props.openPaths : [],\n                selectedPaths: props.selectedPaths ? props.selectedPaths : []\n            }\n        } else {\n            this.state = {\n                openPaths: props.openPaths ? props.openPaths : [],\n                selectedPath: props.selectedPath ? props.selectedPath : null\n            }\n        }\n    }\n\n    onSelectItem(state, path, selected) {\n        if (this.props.multipleSelection) {\n            this.setState({\n                openPaths: state.openPaths,\n                selectedPaths: selected ? [\n                    ...state.selectedPaths,\n                    path\n                ] : _.filter(state.selectedPaths, (thispath) => thispath !== path),\n            });\n        } else {\n            this.setState({\n                openPaths: state.openPaths,\n                selectedPath: selected ? path : null\n            });\n        }\n\n    }\n\n    onOpenItem(state, path, open) {\n        if (this.props.multipleSelection) {\n            this.setState({\n                openPaths: open ? [\n                    ...state.openPaths,\n                    path\n                ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                selectedPaths: state.selectedPaths\n            });\n        } else {\n            this.setState({\n                openPaths: open ? [\n                    ...state.openPaths,\n                    path\n                ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                selectedPath: state.selectedPath\n            });\n        }\n    }\n\n\n    render() {\n        if (this.props.multipleSelection) {\n            return React.createElement(PickerData, {\n                ...this.props,\n                openPaths: this.state.openPaths,\n                selectedPaths: this.state.selectedPaths,\n                onOpenItem: this.onOpenItem.bind(this, this.state),\n                onSelectItem: this.onSelectItem.bind(this, this.state)\n            })\n        } else {\n            return React.createElement(PickerData, {\n                ...this.props,\n                openPaths: this.state.openPaths,\n                selectedPath: this.state.selectedPath,\n                onOpenItem: this.onOpenItem.bind(this, this.state),\n                onSelectItem: this.onSelectItem.bind(this, this.state)\n            })\n        }\n    }\n}\n\nPickerState.propTypes = {\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n};\n\nexport { PickerState }\n","import React from 'react';\nimport {PickerRedux} from './PickerRedux'\nimport {PickerState} from './PickerState'\nimport PropTypes from 'prop-types';\n\nlet Picker = function(props) {\n    let Picker = props.pickerType === \"state\" ? PickerState : PickerRedux;\n    return (<Picker {...props} />);\n};\n\nPicker.propTypes = {\n    /**\n     * Identifier for the picker redux store\n     */\n    id: PropTypes.string,\n\n    /**\n     * Type of internal state storage - either redux (can be shared) or internal state\n     */\n    pickerType: PropTypes.oneOf(['state', 'redux']),\n\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n\n};\n\nPicker.defaultProps = {\n    rootPaths: ['/'],\n    openableTypes:['nt:base'],\n    selectableTypes:['nt:base']\n};\n\nexport { Picker };","import React from 'react';\nimport PropTypes from 'prop-types';\n\nlet PickerView = function (props) {\n    return (\n        <div>\n            {props.pickerEntries.map((entry) => (\n                <div key={entry.path} style={{marginLeft: (10* entry.depth)+'px'}}>\n                    <input type=\"checkbox\" checked={ entry.open } onChange={(event) => props.onOpenItem(entry.path, event.target.checked)}/>\n                    <input type=\"checkbox\" checked={ entry.selected } onChange={(event) => props.onSelectItem(entry.path, event.target.checked)}/>\n                    <span>{props['textRenderer'] ? props['textRenderer'].call(this,entry) : entry.name}</span>\n                </div>\n            ))}\n        </div>\n    )\n};\n\nPickerView.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nexport { PickerView };","import React from 'react';\nimport {\n    Table,\n    TableBody,\n    TableHeader,\n    TableHeaderColumn,\n    TableRow,\n    TableRowColumn\n} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\nimport PropTypes from 'prop-types';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableHeaderColumn>Name</TableHeaderColumn>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableRowColumn>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableRowColumn>\n        </TableRow>);\n\n    return (\n        <MuiThemeProvider muiTheme={muiTheme()}>\n            <Table>\n                <TableHeader >\n                    {headers()}\n                </TableHeader>\n                <TableBody >\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>\n        </MuiThemeProvider>\n    )\n};\n\nNodesTableViewMaterial.propTypes = {\n    headers: PropTypes.func,\n    row: PropTypes.func,\n    textRenderer: PropTypes.func,\n    nodes: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {NodesTableViewMaterial} from './NodesTableViewMaterial'\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass NodesTableData extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let nodes = [];\n\n        let jcr = data.jcr;\n\n        if (jcr) {\n            if (jcr.node) {\n                nodes = jcr.node.children.nodes;\n            }\n        }\n\n        return {\n            ...ownProps,\n            nodes: nodes,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let vars = {\n            path: props.path,\n            types: props.types,\n        };\n        if (props.variables) {\n            _.assign(vars, props.variables);\n        }\n\n        return {\n            variables: vars,\n            skip: !props.path\n        }\n    }\n\n    render() {\n        let fragments = this.props.fragments;\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => JSON.stringify(f.fragments) === JSON.stringify(fragments) && f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query NodesQuery($path:String!, $types:[String]!) {\n                    jcr {\n                        node:nodeByPath(path: $path) {\n                            path\n                            uuid\n                            name\n                            children(typesFilter:{types:$types}) {\n                                nodes {\n                                    path\n                                    uuid\n                                    name\n                                    ... node\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            replaceFragmentsInDocument(query, fragments);\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || NodesTableViewMaterial);\n\n            this.componentCache.push({fragments: fragments, renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider  client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nNodesTableData.propTypes = {\n    /**\n     * Path of the nodes to display\n     */\n    path: PropTypes.string.isRequired,\n\n    /**\n     * List of node types of nodes to display\n     */\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * Function that returns a <TableRow> component for the header\n     */\n    headers: PropTypes.func,\n\n    /**\n     * Function that returns a <TableRow> component for a row, takes a JCR node as parameter\n     */\n    row: PropTypes.func,\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the table\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n};\n\nexport { NodesTableData };\n","import React from 'react';\nimport {NodesTableData} from './NodesTableData'\nimport {connect, Provider} from 'react-redux'\nimport {reducers, store} from \"../reduxStore\";\nimport PropTypes from 'prop-types';\n\nclass NodesTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.NodesTableWithoutStore = connect(this.mapStateToProps, this.mapDispatchToProps)(NodesTableData);\n    }\n\n    mapStateToProps(state, ownProps) {\n        return {\n            ...ownProps,\n            path: state[\"selectedPath_\"+ ownProps.id] ? state[\"selectedPath_\"+ ownProps.id] : ownProps.defaultPath,\n        }\n    };\n\n    mapDispatchToProps(dispatch, ownProps) {\n        return {\n        }\n    };\n\n    componentWillMount() {\n    }\n\n    componentWillUnmount() {\n    }\n\n    render() {\n        let NodesTableWithoutStore = this.NodesTableWithoutStore;\n        return (<Provider store={ store }><NodesTableWithoutStore {...this.props}/></Provider>)\n    }\n}\n\nNodesTable.propTypes = {\n    /**\n     * Id of the redux store where the selected path is taken\n     */\n    id: PropTypes.string,\n\n    /**\n     * Path of the nodes to display\n     */\n    defaultPath: PropTypes.string.isRequired,\n\n    /**\n     * List of node types of nodes to display\n     */\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * Function that returns a <TableRow> component for the header\n     */\n    headers: PropTypes.func,\n\n    /**\n     * Function that returns a <TableRow> component for a row, takes a JCR node as parameter\n     */\n    row: PropTypes.func,\n\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the table\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n};\n\nexport { NodesTable };\n","import React from 'react';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport PropTypes from 'prop-types';\n\nlet TestLayout = function(props) {\n    return (<Grid fluid>\n        <Row>\n            <Col xs={6} md={3}>{props.leftCol}</Col>\n            <Col xs={6} md={6}>{props.rightCol}</Col>\n        </Row>\n    </Grid>);\n};\n\n\nTestLayout.propTypes = {\n    leftCol: PropTypes.element,\n    rightCol: PropTypes.element\n};\n\nexport { TestLayout };","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nlet baseHistory = createHashHistory();\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {Dialog, FlatButton} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\nimport * as _ from \"lodash\";\nimport {OutletRouter as Router} from '../router/router'\nimport {Link, Route} from 'react-router-dom'\n\nclass Engine extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n        };\n        this.components = [\n            {\n                link:\"/link1\",\n                label:\"Link 1\",\n                component: (props) => <div>toto</div>\n            },\n            {\n                link:\"/link2\",\n                label:\"Link 2\",\n                component: (props) => (<div>titi</div>)\n            }\n        ];\n    }\n\n    handleOpen() {\n        this.setState({open: true});\n    };\n\n    handleClose() {\n        this.setState({open: false});\n    };\n\n    render() {\n        return (<MuiThemeProvider muiTheme={muiTheme()}>\n            <div>\n                <FlatButton label=\"Open\" onClick={()=>this.handleOpen()}/>\n                <Dialog\n                    title=\"Dialog With Actions\"\n                    actions={[\n                        <FlatButton label=\"Cancel\" primary={true} onClick={()=>this.handleClose()}/>,\n                        <FlatButton label=\"Submit\" primary={true} keyboardFocused={true} onClick={()=>this.handleClose()}/>\n                    ]}\n                    modal={false}\n                    open={this.state.open}\n                    onRequestClose={()=>this.handleClose()}\n                >\n                    <Router outlet={\"outlet1\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                    <Router outlet={\"outlet2\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                </Dialog>\n\n            </div>\n        </MuiThemeProvider>);\n    }\n\n\n}\n\nexport {Engine}\n","import React from 'react';\nimport {OutletRouter as Router} from './router'\nimport {Link, Route} from 'react-router-dom'\n\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (<div>Test1 {props.match.params.value}</div>)\n        let Test2 = props => (<div>Test2</div>);\n        let Test3 = props => (<div>Test3</div>);\n\n        return (<Router outlet={this.props.id}>\n            <div>\n\n                ---- links : ----\n                <Link to={'/test1/toto'}>Test1 toto</Link> -\n                <Link to={'/test1/tutu'}>Test1 tutu</Link> -\n                <Link to={'/test2'}>Test2</Link> -\n                <Link to={'/test3'}>Test3</Link> -\n\n                <Router outlet=\"new\">\n                    <div>\n                        <Link to={'/test1'}>Test1/other</Link> -\n                        <Link to={'/test2'}>Test2/other</Link>\n                    </div>\n                </Router>\n                ---- routes : ----\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n\n                <Router outlet=\"new\">\n                    <div>\n                        <Route path={'/test1'} component={Test1}/>\n                        <Route path={'/test2'} component={Test2}/>\n                    </div>\n                </Router>\n\n                ------------------\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {client} from \"@jahia/apollo-dx\";\nimport {NodesTableData} from \"../nodesTable/NodesTableData\";\nimport {FlatButton, Table, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n        let fragment = gql`fragment Test on JCRNode {\n            myprop:property(name:\"myprop\") {\n                value\n            }\n        }`;\n\n        // let query = gql`query GetNode($path:String!) {\n        //     jcr {\n        //         nodeByPath(path:$path) {\n        //             uuid\n        //             path\n        //             ...Test\n        //         }\n        //     }\n        // } ${fragment}`;\n        //\n        // let update = (proxy, mutationResult) => {\n        //     let updatedPath = mutationResult.data.jcr.mutateNode.node.path;\n        //\n        //     let variables = {path:updatedPath};\n        //     const data = proxy.readQuery({query, variables});\n        //\n        //     delete data.jcr.nodeByPath.myprop;\n        //\n        //     debugger;\n        //\n        //     proxy.writeQuery({query, variables, data});\n        // }\n\n\n        let frags = [{\n            applyFor: \"node\",\n            gql: fragment\n        }];\n\n        let RenderComponent = (props) => (<Table>\n                <TableHeader displaySelectAll={false} >\n                    <TableRow>\n                        <TableHeaderColumn>Name</TableHeaderColumn>\n                        <TableHeaderColumn>Value</TableHeaderColumn>\n                        <TableHeaderColumn>Update</TableHeaderColumn>\n                        <TableHeaderColumn>Delete</TableHeaderColumn>\n                    </TableRow>\n                </TableHeader>\n                <TableBody displayRowCheckbox={false} selectable={false}>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableRowColumn>{node.name}</TableRowColumn>\n                            <TableRowColumn>{node.myprop.value}</TableRowColumn>\n                            <TableRowColumn><FlatButton label={\"Update\"} onClick={() => this.props.setPropertyMutation({\n                                variables:{\n                                    path:node.path,\n                                    value:(\"test:\"+new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}/></TableRowColumn>\n                            <TableRowColumn><FlatButton label={\"Delete\"} onClick={() => this.props.removeNodeMutation({\n                                variables:{\n                                    path:node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}/></TableRowColumn>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        )\n\n        return (\n            <MuiThemeProvider muiTheme={muiTheme()}>\n            <div>\n            <FlatButton label=\"New\" onClick={() => this.props.addNodeMutation({\n                variables:{\n                    name:(\"name-\"+(new Date().getTime())),\n                    value:(\"test:\"+new Date())\n                },\n                refetchQueries: [\"NodesQuery\"]\n            })} />\n\n            <NodesTableData path={\"/\"} types={[\"nt:unstructured\"]} fragments={frags} renderComponent={RenderComponent}/>\n            </div></MuiThemeProvider>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutation {\n                    mutateProperty(name:\"myprop\") {\n                        setValue(value:$value)\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path) \n        }\n    }\n`;\n\nclass MutationExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.Component =\n            graphql(setProperty, { name: 'setPropertyMutation' })(\n                graphql(addNode, { name: 'addNodeMutation' })(\n                    graphql(removeNode, { name: 'removeNodeMutation' })(MutationExampleView)));\n    }\n\n    render() {\n        let Component = this.Component;\n        return (<ApolloProvider client={client}><Component/></ApolloProvider>)\n    }\n}\n\nexport { MutationExample};"],"names":["muiTheme","ssrMode","window","req","global","request","theme","_","lightBaseTheme","userAgent","getHeader","getMuiTheme","SimpleListView","props","state","components","done","then","reactElements","setState","componentDidMount","React","Component","DynamicComponentsList","componentCache","data","ownProps","jcr","safeEval","eval","nodesByQuery","nodes","n","renderedView","output","imports","concat","c","getImports","promise","length","Promise","all","imp","SystemJS","import","s","r","createElement","ReactDOM","m","splice","id","renderComponent","cacheMatch","f","dataComponent","query","gql","graphql","mapResultsToProps","mapPropsToOptions","push","client","propTypes","PropTypes","string","isRequired","element","SelectableList","makeSelectable","List","PickerViewMaterial","selectedPath","event","path","pickerEntries","find","entry","selectable","onSelectItem","map","ListItem","depth","call","name","openable","onOpenItem","open","ExpandLess","ExpandMore","array","func","PickerViewMaterialMultiple","Checkbox","selected","PickerData","selectedPaths","multipleSelection","openPaths","nodesById","addNode","node","index","pickerNode","uuid","rootNodes","root","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","children","child","selectedNodes","fullyOpenPath","rootFound","reduce","acc","it","rootPaths","rootPath","vars","openableTypes","selectableTypes","variables","fragments","JSON","stringify","arrayOf","bool","oneOfType","shape","object","reducers","store","debugTool","__REDUX_DEVTOOLS_EXTENSION__","createStore","action","value","key","resetStateReducer","type","undefined","PickerRedux","PickerReduxWithoutStore","connect","mapStateToProps","mapDispatchToProps","dispatch","select","indexOf","filter","PickerState","thispath","bind","Picker","pickerType","oneOf","defaultProps","PickerView","marginLeft","target","checked","NodesTableViewMaterial","headers","row","NodesTableData","types","NodesTable","NodesTableWithoutStore","defaultPath","TestLayout","leftCol","rightCol","createOutletHistory","baseHistory","outletName","getPath","parts","base","location","pathname","newPath","substr","split","p","startsWith","getState","newState","extractPath","part","initialLocation","listeners","history","createHref","replace","go","goBack","goForward","prompt","block","listener","unlisten","listen","assign","createHashHistory","OutletRouter","outletHistory","outlet","dispose","Engine","FlatButton","handleOpen","handleClose","e","link","label","Route","component","RouterExample","Test1","match","params","Test2","Test3","MutationExampleView","fragment","frags","RenderComponent","myprop","setPropertyMutation","Date","removeNodeMutation","addNodeMutation","getTime","setProperty","removeNode","MutationExample"],"mappings":";;;;;;;;;;;AAGA,SAASA,QAAT,GAAoB;QACZC,UAAW,OAAOC,MAAP,KAAkB,WAAjC;QACID,OAAJ,EAAa;YACLE,MAAMC,OAAOC,OAAjB;;YAEIC,QAAQC,SAAA,CAAQC,oBAAR,CAAZ;cACMC,SAAN,GAAkBN,IAAIO,SAAJ,CAAc,YAAd,CAAlB;eACOC,kBAAYL,KAAZ,CAAP;KALJ,MAMO;eACIK,kBAAYH,oBAAZ,CAAP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICRFI;;;4BACUC,KAAZ,EAAmB;;;mIACTA,KADS;;cAEVC,KAAL,GAAa;2BACM;SADnB;;;;;;;;;4CAMgB;;;gBACZ,KAAKD,KAAL,CAAWE,UAAX,IAAyB,CAAC,KAAKC,IAAnC,EAAyC;qBAChCH,KAAL,CAAWE,UAAX,CAAsBE,IAAtB,CAA2B,UAACC,aAAD,EAAmB;2BACrCF,IAAL,GAAY,IAAZ;2BACKG,QAAL,CAAc,EAACD,eAAeA,aAAhB,EAAd;iBAFJ;;;;;6CAOa;iBACZE,iBAAL;;;;iCAGK;mBACE,KAAKJ,IAAL,GAAaK;sCAAA;kBAAkB,UAAUrB,UAA5B;;;;yBAAmDc,KAAL,CAAWI;;aAAtE,GAAkHG,yCAAzH;;;;EAvBqBA,eAAMC;;;;ACJnC,IASMC;;;mCAEUV,KAAZ,EAAmB;;;iJACTA,KADS;;cAEVW,cAAL,GAAsB,EAAtB;;;;;;gDAGgC;gBAAjBC,IAAiB,QAAjBA,IAAiB;gBAAXC,QAAW,QAAXA,QAAW;;gBAC5BX,aAAa,EAAjB;;gBAEIY,MAAMF,KAAKE,GAAf;gBACIC,WAAWC,IAAf;gBACIF,OAAOA,IAAIG,YAAf,EAA6B;6BACZvB,OAAA,CAAMA,WAAA,CAAUoB,IAAIG,YAAJ,CAAiBC,KAA3B,EAAkC,gBAAlC,CAAN,EAA0D,UAACC,CAAD;2BAAMJ,SAAS,MAAMI,EAAEC,YAAF,CAAeC,MAArB,GAA8B,GAAvC,CAAN;iBAA1D,CAAb;;;gBAGAC,UAAU,EAAd;oBACA,CAAOpB,UAAP,EAAmB,aAAK;0BACVoB,QAAQC,MAAR,CAAeC,EAAEC,UAAF,EAAf,CAAV;aADJ;gBAGIC,gBAAJ;gBACIJ,QAAQK,MAAR,GAAiB,CAArB,EAAwB;0BACVC,QAAQC,GAAR,CAAYnC,OAAA,CAAM4B,OAAN,EAAe,UAACQ,GAAD;2BAASC,SAASC,MAAT,CAAgBF,GAAhB,CAAT;iBAAf,CAAZ,EAA2D1B,IAA3D,CAAgE,aAAK;wBACvEC,gBAAgBX,OAAA,CAAMQ,UAAN,EAAkB,UAACsB,CAAD,EAAO;4BACrCS,IAAIT,EAAEC,UAAF,GAAeE,MAAvB;4BACIO,IAAIV,EAAEW,aAAF,WAAgB3B,cAAhB,EAAuB4B,QAAvB,2BAAoCC,CAApC,GAAR;0BACEC,MAAF,CAASL,CAAT;+BACOC,CAAP;qBAJgB,CAApB;2BAMO7B,aAAP;iBAPM,CAAV;;;gCAYGQ,QADP;4BAEgBa;;;;;0CAIF1B,OAAO;mBACd;2BACS;2BACD,gEAAgEA,MAAMuC,EAAtE,GAA2E;;aAF1F;;;;iCAOK;gBACDC,kBAAkB,KAAKxC,KAAL,CAAWwC,eAAjC;;gBAEIC,aAAa/C,QAAA,CAAO,KAAKiB,cAAZ,EAA4B,UAAC+B,CAAD;uBAAOA,EAAEF,eAAF,KAAsBA,eAA7B;aAA5B,CAAjB;gBACI/B,qBAAJ;gBACIgC,UAAJ,EAAgB;+BACAA,WAAWE,aAAvB;aADJ,MAEO;oBACCC,QAAQC,GAAR,iBAAJ;;+BA2BYC,oBAAQF,KAAR,EAAe;2BAChB,KAAKG,iBADW;6BAEd,KAAKC;iBAFN,EAGTR,mBAAmBzC,cAHV,CAAZ;;qBAKKY,cAAL,CAAoBsC,IAApB,CAAyB,EAACT,iBAAiBA,eAAlB,EAAmCG,eAAelC,YAAlD,EAAzB;;;mBAGID;0CAAA;kBAAgB,QAAQ0C,eAAxB;6CAAiCzC,YAAD,EAAe,KAAKT,KAApB;aAAxC;;;;EA1F4BQ,eAAMC;;AA8F1CC,sBAAsByC,SAAtB,GAAkC;;;;QAI1BC,UAAUC,MAAV,CAAiBC,UAJS;;;;;qBASbF,UAAUG;CAT/B;;AChGA,IAAIC,iBAAiBC,0BAAeC,eAAf,CAArB;;AAEA,IAAIC,qBAAqB,SAArBA,kBAAqB,CAAU3D,KAAV,EAAiB;;;WAElCQ;8BAAA;UAAkB,UAAUrB,UAA5B;;0BACI;cAAgB,OAAOa,MAAM4D,YAA7B,EAA2C,UACvC,kBAACC,KAAD,EAAQC,IAAR,EAAiB;wBACTA,QAAS9D,MAAM+D,aAAN,CAAoBC,IAApB,CAAyB;+BAASC,MAAMH,IAAN,KAAeA,IAAxB;qBAAzB,EAAuDI,UAApE,EAAiF;8BACvEC,YAAN,CAAmBL,IAAnB,EAAyB,IAAzB;;iBAHZ;kBAOWC,aAAN,CAAoBK,GAApB,CAAwB,UAACH,KAAD;uBACpBzD,6BAAC6D,mBAAD,IAAU,OAAOJ,MAAMH,IAAvB,EAA6B,KAAKG,MAAMH,IAAxC,EAA8C,aAAaG,MAAMK,KAAN,GAAc,CAAzE;iCACuBtE,MAAM,cAAN,IAAwBA,MAAM,cAAN,EAAsBuE,IAAtB,QAAiCN,KAAjC,CAAxB,GAAkEA,MAAMO,IAD/F;qCAE2BP,MAAMQ,QAAN,GAAkBjE;6CAAA;;qCACtB;uCAAMR,MAAM0E,UAAN,CAAiBT,MAAMH,IAAvB,EAA6B,CAACG,MAAMU,IAApC,CAAN;6BADsB;8BACkCA,IAAN,GAC3DnE,6BAACoE,0BAAD,OAD2D,GAC3CpE,6BAACqE,0BAAD;qBAFH,GAEkC;kBALzC;aAAxB;;KATb;CADJ;;AAuBAlB,mBAAmBR,SAAnB,GAA+B;mBACZC,UAAU0B,KAAV,CAAgBxB,UADJ;kBAEbF,UAAUC,MAFG;kBAGZD,UAAU2B,IAHE;gBAIf3B,UAAU2B,IAJK;kBAKb3B,UAAU2B;CAL5B;;ACxBA,IAAIC,6BAA6B,SAA7BA,0BAA6B,CAAUhF,KAAV,EAAiB;;;WAE1CQ;8BAAA;UAAkB,UAAUrB,UAA5B;;2BACI;;kBACW4E,aAAN,CAAoBK,GAApB,CAAwB,UAACH,KAAD;uBACpBzD,6BAAC6D,mBAAD,IAAU,0BAA0B,IAApC,EAA0C,KAAKJ,MAAMH,IAArD,EAA2D,aAAaG,MAAMK,KAAN,GAAY,CAApF,EAAuF,aAAatE,MAAM,cAAN,IAAwBA,MAAM,cAAN,EAAsBuE,IAAtB,QAAgCN,KAAhC,CAAxB,GAAiEA,MAAMO,IAA3K;kCACwBP,MAAMC,UAAN,GAAmB1D,6BAACyE,mBAAD,IAAU,SAAUhB,MAAMiB,QAA1B,GAAnB,GAA6D,IADrF;6BAEmB,mBAAI;4BAAKjB,MAAMC,UAAV,EAAsB;kCAAQC,YAAN,CAAmBF,MAAMH,IAAzB,EAA+B,CAACG,MAAMiB,QAAtC;;qBAFhD,EAEmG,iBAAiBjB,MAAMQ,QAAN,GAAiBjE;6CAAA;0BAAY,SAAS;uCAAMR,MAAM0E,UAAN,CAAiBT,MAAMH,IAAvB,EAA6B,CAACG,MAAMU,IAApC,CAAN;6BAArB;8BAA8EA,IAAN,GAAanE,6BAACoE,0BAAD,OAAb,GAA6BpE,6BAACqE,0BAAD;qBAAtH,GAAqJ;kBAHrP;aAAxB;;KAHb;CADJ;;AAiBAG,2BAA2B7B,SAA3B,GAAuC;mBACpBC,UAAU0B,KAAV,CAAgBxB,UADI;kBAEpBF,UAAU2B,IAFU;gBAGvB3B,UAAU2B,IAHa;kBAIrB3B,UAAU2B;;CAJ5B;;;;ACzBA,IASMI;;;wBAEUnF,KAAZ,EAAmB;;;2HACTA,KADS;;cAEVW,cAAL,GAAsB,EAAtB;;;;;;gDAGgC;gBAAjBC,IAAiB,QAAjBA,IAAiB;gBAAXC,QAAW,QAAXA,QAAW;;gBAC5BuE,gBAAgBvE,SAASwE,iBAAT,GAA6BxE,SAASuE,aAAtC,GAAsD,CAACvE,SAAS+C,YAAV,CAA1E;gBACI0B,YAAYzE,SAASyE,SAAT,GAAqBzE,SAASyE,SAA9B,GAA0C,EAA1D;;gBAEIvB,gBAAgB,EAApB;gBACIwB,YAAY,EAAhB;gBACIzE,MAAMF,KAAKE,GAAf;;gBAEI0E,UAAU,SAAVA,OAAU,CAAUC,IAAV,EAAgBnB,KAAhB,EAAuBoB,QAAvB,EAA8B;oBACpCR,WAAW,KAAf;oBACIO,KAAKvB,UAAT,EAAqB;+BACNxE,WAAA,CAAU0F,aAAV,EAAyBK,KAAK3B,IAA9B,MAAwC,CAAC,CAApD;;oBAEA6B,aAAa;0BACPF,KAAKjB,IADE;0BAEPiB,KAAK3B,IAFE;0BAGP2B,KAAKhB,QAAL,IAAiB/E,WAAA,CAAU4F,SAAV,EAAqBG,KAAK3B,IAA1B,MAAoC,CAAC,CAH/C;8BAIHoB,QAJG;8BAKHO,KAAKhB,QALF;gCAMDgB,KAAKvB,UANJ;2BAONI,KAPM;4BAQL5E,UAAA,CAAS,QAAT,EAAmB4E,QAAQ,CAA3B,CARK;0BASPmB,IATO;4BAUL;iBAVZ;8BAYcnD,MAAd,CAAqBoD,QAArB,EAA4B,CAA5B,EAA+BC,UAA/B;0BACUF,KAAKG,IAAf,IAAuBD,UAAvB;uBACOA,UAAP;aAnBJ;;gBAsBI7E,GAAJ,EAAS;oBACDA,IAAI+E,SAAR,EAAmB;+BACf,CAAU/E,IAAI+E,SAAd,EAAyB,oBAAY;4BAC7BC,OAAON,QAAQO,QAAR,EAAkB,CAAlB,EAAqB,CAArB,CAAX;6BACKC,MAAL,GAAcnF,SAASoF,QAAvB;qBAFJ;;oBAKAnF,IAAIoF,SAAR,EAAmB;8BACf,CAASpF,IAAIoF,SAAb,EAAwB,CAAC,MAAD,CAAxB,EAAkCC,OAAlC,CAA0C,UAACV,IAAD,EAAU;4BAC5CW,SAASb,UAAUE,KAAKG,IAAf,CAAb;4BACIQ,MAAJ,EAAY;gCACJC,cAAc3G,WAAA,CAAUqE,aAAV,EAAyBqC,MAAzB,CAAlB;4CACA,CAAeX,KAAKa,QAAL,CAAcpF,KAA7B,EAAoC,UAACqF,KAAD,EAAW;wCACnCA,KAAR,EAAeH,OAAO9B,KAAP,GAAe,CAA9B,EAAiC+B,cAAc,CAA/C;6BADJ;;qBAJR;;;;;gBAaJG,gBAAgB9G,UAAA,CAASqE,aAAT,EAAwB,UAAC0B,IAAD,EAAU;uBAC3CA,KAAKP,QAAZ;aADgB,EAEjBd,GAFiB,CAEb,UAACqB,IAAD,EAAU;uBACNA,KAAKA,IAAZ;aAHgB,CAApB;;4BAMgB/F,OAAA,CAAM8G,aAAN,EAAqB,MAArB,CAAhB;4BACgB9G,UAAA,CAASqE,aAAT,EAAwB,sBAAc;uBAC3C,CAAC4B,WAAWK,MAAnB;aADY,CAAhB;gCAIOnF,QADP;+BAEmBkD;;;;;0CAIL/D,OAAO;gBACjBsF,YAAYtF,MAAMsF,SAAN,GAAkBtF,MAAMsF,SAAxB,GAAoC,EAApD;;gBAEImB,gBAAgB,SAAhBA,aAAgB,CAACzG,KAAD,EAAQ8D,IAAR,EAAiB;oBAC7B4C,YAAY,KAAhB;wBACA,CAAOhH,SAAA,CAAQoE,IAAR,EAAc,GAAd,CAAP,EAA2B6C,MAA3B,CAAkC,UAACC,GAAD,EAAMC,EAAN,EAAa;wBACvC,CAACH,SAAL,EAAgB;mCACZ,CAAU1G,MAAM8G,SAAhB,EAA2B,oBAAY;wCACvBJ,aAAahH,cAAA,CAAakH,GAAb,EAAkBG,QAAlB,CAAzB;yBADJ;;wBAIAL,aAAahH,WAAA,CAAU4F,SAAV,EAAqBsB,GAArB,MAA8B,CAAC,CAAhD,EAAmD;kCACrC3D,IAAV,CAAe2D,GAAf;;2BAEGA,MAAM,GAAN,GAAYC,EAAnB;iBATJ,EAUG,EAVH;aAFJ;;gBAeI7G,MAAMqF,iBAAV,EAA6B;wBACzB,CAAOrF,MAAMoF,aAAb,EAA4B;2BAAQqB,cAAczG,KAAd,EAAqB8D,IAArB,CAAR;iBAA5B;aADJ,MAEO;8BACW9D,KAAd,EAAqBA,MAAM4D,YAA3B;;;gBAGAoD,OAAO;2BACIhH,MAAM8G,SADV;uBAEApH,SAAA,CAAQM,MAAMiH,aAAd,EAA6BjH,MAAMkH,eAAnC,CAFA;4BAGKlH,MAAMkH,eAHX;0BAIGlH,MAAMiH,aAJT;2BAKI3B;aALf;gBAOItF,MAAMmH,SAAV,EAAqB;0BACjB,CAASH,IAAT,EAAehH,MAAMmH,SAArB;;;mBAGG;2BACQH;aADf;;;;iCAKK;gBACDI,YAAY,KAAKpH,KAAL,CAAWoH,SAA3B;gBACI5E,kBAAkB,KAAKxC,KAAL,CAAWwC,eAAjC;;gBAEIC,aAAa/C,QAAA,CAAO,KAAKiB,cAAZ,EAA4B,UAAC+B,CAAD;uBAAO2E,KAAKC,SAAL,CAAe5E,EAAE0E,SAAjB,MAAgCC,KAAKC,SAAL,CAAeF,SAAf,CAAhC,IAA6D1E,EAAEF,eAAF,KAAsBA,eAA1F;aAA5B,CAAjB;gBACI/B,qBAAJ;gBACIgC,UAAJ,EAAgB;+BACAA,WAAWE,aAAvB;aADJ,MAEO;oBACCC,QAAQC,GAAR,mBAAJ;;oDA4B2BD,KAA3B,EAAkCwE,SAAlC;;+BAEYtE,oBAAQF,KAAR,EAAe;2BAChB,KAAKG,iBADW;6BAEd,KAAKC;iBAFN,EAGTR,mBAAmB,KAAKxC,KAAL,CAAWqF,iBAA9B,GAAkDL,0BAAlD,GAA+ErB,kBAHtE,CAAZ;;qBAKKhD,cAAL,CAAoBsC,IAApB,CAAyB,EAACmE,WAAWA,SAAZ,EAAuB5E,iBAAiBA,eAAxC,EAAyDG,eAAelC,YAAxE,EAAzB;;;mBAGID;0CAAA;kBAAiB,QAAQ0C,eAAzB;6CAAkCzC,YAAD,EAAe,KAAKT,KAApB;aAAzC;;;;EAjKiBQ,eAAMC;;AAqK/B0E,WAAWhC,SAAX,GAAuB;;;;eAIRC,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAJ5B;;;;;eASRF,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,CATQ;;;;;mBAcJD,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAdhC;;;;;qBAmBFF,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAnBlC;;;;;uBAwBAF,UAAUoE,IAxBV;;;;;kBA6BLpE,UAAUC,MA7BL;;;;;mBAkCJD,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,CAlCI;;;;;kBAuCLD,UAAU2B,IAvCL;;;;;qBA4CF3B,UAAUG,OA5CR;;;;;eAiDRH,UAAUmE,OAAV,CAAkBnE,UAAUqE,SAAV,CAAoB,CAC7CrE,UAAUC,MADmC,EAE7CD,UAAUsE,KAAV,CAAgB;kBACFtE,UAAUC,MAAV,CAAiBC,UADf;mBAEDF,UAAUC,MAFT;aAGPD,UAAUuE,MAAV,CAAiBrE;KAH1B,CAF6C,CAApB,CAAlB,CAjDQ;;;;;eA6DRF,UAAUuE;;CA7DzB;;AC3KA,IAAMC,WAAW,EAAjB;;AAEA,IAAMC,QAAQ,YAAY;QAClBC,kBAAJ;QACI,OAAOzI,MAAP,KAAkB,WAAtB,EAAmC;oBACnBA,OAAO0I,4BAAP,IAAuC1I,OAAO0I,4BAAP,CAAoC;kBAC7E,UAD6E;wBAEvE;SAFmC,CAAnD;;;WAMGC,kBAAY;YAAC/H,KAAD,uEAAS,EAAT;YAAagI,MAAb;eAAwBvI,aAAA,CAAYkI,QAAZ,EAAsB,UAACM,KAAD,EAAQC,GAAR;mBAAgBD,MAAMjI,MAAMkI,GAAN,CAAN,EAAkBF,MAAlB,CAAhB;SAAtB,CAAxB;KAAZ,EAAsGH,SAAtG,CAAP;CATU,EAAd;;AAYA,IAAMM,oBAAoB,SAApBA,iBAAoB,CAASnI,KAAT,EAAgBgI,MAAhB,EAAwB;QAC1CA,OAAOI,IAAP,KAAgB,aAApB,EAAmC;eACxBC,SAAP;;WAEGrI,KAAP;CAJJ;;ICXMsI;;;yBACUvI,KAAZ,EAAmB;;;6HACTA,KADS;;cAEVwI,uBAAL,GAA+BC,mBAAQ,MAAKC,eAAb,EAA8B,MAAKC,kBAAnC,EAAuDxD,UAAvD,CAA/B;;;;;;wCAGYlF,OAAOY,UAAU;gBACzBA,SAASwE,iBAAb,EAAgC;oCAErBxE,QADP;+BAEeZ,MAAM,eAAeY,SAAS0B,EAA9B,IAAoCtC,MAAM,eAAeY,SAAS0B,EAA9B,CAApC,GAAwE1B,SAASyE,SAFhG;mCAGmBrF,MAAM,mBAAmBY,SAAS0B,EAAlC,IAAwCtC,MAAM,mBAAmBY,SAAS0B,EAAlC,CAAxC,GAAgF1B,SAASuE;;aAJhH,MAMO;oCAEIvE,QADP;+BAEeZ,MAAM,eAAeY,SAAS0B,EAA9B,IAAoCtC,MAAM,eAAeY,SAAS0B,EAA9B,CAApC,GAAwE1B,SAASyE,SAFhG;kCAGkBrF,MAAM,kBAAkBY,SAAS0B,EAAjC,IAAuCtC,MAAM,kBAAkBY,SAAS0B,EAAjC,CAAvC,GAA8E1B,SAAS+C;;;;;;2CAK9FgF,UAAU/H,UAAU;mBAC5B;4BAAA,wBACUiD,IADV,EACgB+E,MADhB,EACwB;6BACd;8BACCA,SAAS,yBAAyBhI,SAAS0B,EAA3C,GAAgD,2BAA2B1B,SAAS0B,EADrF;8BAECuB;qBAFV;iBAFD;0BAAA,sBAOQA,IAPR,EAOca,IAPd,EAOoB;6BACV;8BACCA,OAAO,uBAAuB9D,SAAS0B,EAAvC,GAA4C,wBAAwB1B,SAAS0B,EAD9E;8BAECuB;qBAFV;;aARR;;;;oCAgBQ;;;mBACD,YAAgD;oBAA/C7D,KAA+C,uEAAvC,OAAKD,KAAL,CAAWsF,SAAX,IAAwB,EAAe;oBAAX2C,MAAW;;oBAC/CvC,WAAQzF,MAAM6I,OAAN,CAAcb,OAAOnE,IAArB,CAAZ;oBACImE,OAAOI,IAAP,KAAgB,uBAAuB,OAAKrI,KAAL,CAAWuC,EAAlD,IAAwDmD,aAAU,CAAC,CAAvE,EAA0E;uDAE/DzF,KADP,IAEIgI,OAAOnE,IAFX;iBADJ,MAKO,IAAImE,OAAOI,IAAP,KAAgB,wBAAwB,OAAKrI,KAAL,CAAWuC,EAAnD,IAAyDmD,aAAU,CAAC,CAAxE,EAA2E;2BACvEhG,EAAEqJ,MAAF,CAAS9I,KAAT,EAAgB,UAAC6D,IAAD;+BAAUA,SAASmE,OAAOnE,IAA1B;qBAAhB,CAAP;;uBAEG7D,KAAP;aAVJ;;;;uCAeW;;;mBACJ,YAA6C;oBAA5CA,KAA4C,uEAApC,OAAKD,KAAL,CAAW4D,YAAyB;oBAAXqE,MAAW;;oBAC5CA,OAAOI,IAAP,KAAgB,yBAAyB,OAAKrI,KAAL,CAAWuC,EAAxD,EAA4D;2BACjD0F,OAAOnE,IAAd;iBADJ,MAEO,IAAImE,OAAOI,IAAP,KAAgB,2BAA2B,OAAKrI,KAAL,CAAWuC,EAA1D,EAA8D;2BAC1D,IAAP;;uBAEGtC,KAAP;aANJ;;;;wCAUY;;;mBACL,YAAoD;oBAAnDA,KAAmD,uEAA3C,OAAKD,KAAL,CAAWoF,aAAX,IAA4B,EAAe;oBAAX6C,MAAW;;oBACnDvC,WAAQzF,MAAM6I,OAAN,CAAcb,OAAOnE,IAArB,CAAZ;oBACImE,OAAOI,IAAP,KAAgB,yBAAyB,OAAKrI,KAAL,CAAWuC,EAApD,IAA0DmD,aAAU,CAAC,CAAzE,EAA4E;uDAEjEzF,KADP,IAEIgI,OAAOnE,IAFX;iBADJ,MAKO,IAAImE,OAAOI,IAAP,KAAgB,2BAA2B,OAAKrI,KAAL,CAAWuC,EAAtD,IAA4DmD,aAAU,CAAC,CAA3E,EAA8E;2BAC1EhG,EAAEqJ,MAAF,CAAS9I,KAAT,EAAgB,UAAC6D,IAAD;+BAAUA,SAASmE,OAAOnE,IAA1B;qBAAhB,CAAP;;uBAEG7D,KAAP;aAVJ;;;;6CAeiB;qBACR,eAAe,KAAKD,KAAL,CAAWuC,EAAnC,IAAyC,KAAK+C,SAAL,EAAzC;gBACI,KAAKtF,KAAL,CAAWqF,iBAAf,EAAkC;yBACrB,mBAAmB,KAAKrF,KAAL,CAAWuC,EAAvC,IAA6C,KAAK6C,aAAL,EAA7C;aADJ,MAEO;yBACM,kBAAkB,KAAKpF,KAAL,CAAWuC,EAAtC,IAA4C,KAAKqB,YAAL,EAA5C;;;;;+CAIe;qBACV,eAAe,KAAK5D,KAAL,CAAWuC,EAAnC,IAAyC6F,iBAAzC;qBACS,kBAAkB,KAAKpI,KAAL,CAAWuC,EAAtC,IAA4C6F,iBAA5C;qBACS,mBAAmB,KAAKpI,KAAL,CAAWuC,EAAvC,IAA6C6F,iBAA7C;;kBAEMQ,QAAN,CAAe,EAACP,MAAK,aAAN,EAAf;;mBAEOT,SAAS,eAAe,KAAK5H,KAAL,CAAWuC,EAAnC,CAAP;mBACOqF,SAAS,kBAAkB,KAAK5H,KAAL,CAAWuC,EAAtC,CAAP;mBACOqF,SAAS,mBAAmB,KAAK5H,KAAL,CAAWuC,EAAvC,CAAP;;;;iCAGK;gBACDiG,0BAA0B,KAAKA,uBAAnC;mBACQhI;mCAAA;kBAAU,OAAQqH,KAAlB;6CAA2B,uBAAD,EAA6B,KAAK7H,KAAlC;aAAlC;;;;EAzGkBQ,eAAMC;;AA8GhC8H,YAAYpF,SAAZ,GAAwB;;;;QAIhBC,UAAUC,MAJM;;;;;eASTD,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAT3B;;;;;eAcTF,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,CAdS;;;;;mBAmBLD,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAnB/B;;;;;qBAwBHF,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAxBjC;;;;;uBA6BDF,UAAUoE,IA7BT;;;;;kBAkCNpE,UAAUC,MAlCJ;;;;;mBAuCLD,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,CAvCK;;;;;kBA4CND,UAAU2B,IA5CJ;;;;;qBAiDH3B,UAAUG,OAjDP;;;;;eAsDTH,UAAUmE,OAAV,CAAkBnE,UAAUqE,SAAV,CAAoB,CAC7CrE,UAAUC,MADmC,EAE7CD,UAAUsE,KAAV,CAAgB;kBACFtE,UAAUC,MAAV,CAAiBC,UADf;mBAEDF,UAAUC,MAFT;aAGPD,UAAUuE,MAAV,CAAiBrE;KAH1B,CAF6C,CAApB,CAAlB,CAtDS;;;;;eAkETF,UAAUuE;;CAlEzB;;IC9GMqB;;;yBAEUhJ,KAAZ,EAAmB;;;6HACTA,KADS;;YAEXA,MAAMqF,iBAAV,EAA6B;kBACpBpF,KAAL,GAAa;2BACED,MAAMsF,SAAN,GAAkBtF,MAAMsF,SAAxB,GAAoC,EADtC;+BAEMtF,MAAMoF,aAAN,GAAsBpF,MAAMoF,aAA5B,GAA4C;aAF/D;SADJ,MAKO;kBACEnF,KAAL,GAAa;2BACED,MAAMsF,SAAN,GAAkBtF,MAAMsF,SAAxB,GAAoC,EADtC;8BAEKtF,MAAM4D,YAAN,GAAqB5D,MAAM4D,YAA3B,GAA0C;aAF5D;;;;;;;qCAOK3D,OAAO6D,MAAMoB,UAAU;gBAC5B,KAAKlF,KAAL,CAAWqF,iBAAf,EAAkC;qBACzB/E,QAAL,CAAc;+BACCL,MAAMqF,SADP;mCAEKJ,uCACRjF,MAAMmF,aADE,IAEXtB,IAFW,KAGXpE,UAAA,CAASO,MAAMmF,aAAf,EAA8B,UAAC6D,QAAD;+BAAcA,aAAanF,IAA3B;qBAA9B;iBALR;aADJ,MAQO;qBACExD,QAAL,CAAc;+BACCL,MAAMqF,SADP;kCAEIJ,WAAWpB,IAAX,GAAkB;iBAFpC;;;;;mCAQG7D,OAAO6D,MAAMa,MAAM;gBACtB,KAAK3E,KAAL,CAAWqF,iBAAf,EAAkC;qBACzB/E,QAAL,CAAc;+BACCqE,mCACJ1E,MAAMqF,SADF,IAEPxB,IAFO,KAGPpE,UAAA,CAASO,MAAMqF,SAAf,EAA0B,UAAC2D,QAAD;+BAAcA,aAAanF,IAA3B;qBAA1B,CAJM;mCAKK7D,MAAMmF;iBALzB;aADJ,MAQO;qBACE9E,QAAL,CAAc;+BACCqE,mCACJ1E,MAAMqF,SADF,IAEPxB,IAFO,KAGPpE,UAAA,CAASO,MAAMqF,SAAf,EAA0B,UAAC2D,QAAD;+BAAcA,aAAanF,IAA3B;qBAA1B,CAJM;kCAKI7D,MAAM2D;iBALxB;;;;;iCAWC;gBACD,KAAK5D,KAAL,CAAWqF,iBAAf,EAAkC;uBACvB7E,eAAM2B,aAAN,CAAoBgD,UAApB,eACA,KAAKnF,KADL;+BAEQ,KAAKC,KAAL,CAAWqF,SAFnB;mCAGY,KAAKrF,KAAL,CAAWmF,aAHvB;gCAIS,KAAKV,UAAL,CAAgBwE,IAAhB,CAAqB,IAArB,EAA2B,KAAKjJ,KAAhC,CAJT;kCAKW,KAAKkE,YAAL,CAAkB+E,IAAlB,CAAuB,IAAvB,EAA6B,KAAKjJ,KAAlC;mBALlB;aADJ,MAQO;uBACIO,eAAM2B,aAAN,CAAoBgD,UAApB,eACA,KAAKnF,KADL;+BAEQ,KAAKC,KAAL,CAAWqF,SAFnB;kCAGW,KAAKrF,KAAL,CAAW2D,YAHtB;gCAIS,KAAKc,UAAL,CAAgBwE,IAAhB,CAAqB,IAArB,EAA2B,KAAKjJ,KAAhC,CAJT;kCAKW,KAAKkE,YAAL,CAAkB+E,IAAlB,CAAuB,IAAvB,EAA6B,KAAKjJ,KAAlC;mBALlB;;;;;EAlEcO,eAAMC;;AA6EhCuI,YAAY7F,SAAZ,GAAwB;;;;eAITC,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAJ3B;;;;;eASTF,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,CATS;;;;;mBAcLD,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAd/B;;;;;qBAmBHF,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAnBjC;;;;;uBAwBDF,UAAUoE,IAxBT;;;;;kBA6BNpE,UAAUC,MA7BJ;;;;;mBAkCLD,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,CAlCK;;;;;kBAuCND,UAAU2B,IAvCJ;;;;;qBA4CH3B,UAAUG,OA5CP;;;;;eAiDTH,UAAUmE,OAAV,CAAkBnE,UAAUqE,SAAV,CAAoB,CAC7CrE,UAAUC,MADmC,EAE7CD,UAAUsE,KAAV,CAAgB;kBACFtE,UAAUC,MAAV,CAAiBC,UADf;mBAEDF,UAAUC,MAFT;aAGPD,UAAUuE,MAAV,CAAiBrE;KAH1B,CAF6C,CAApB,CAAlB,CAjDS;;;;;eA6DTF,UAAUuE;CA7DzB;;AC9EA,IAAIwB,SAAS,gBAASnJ,KAAT,EAAgB;MACrBmJ,SAASnJ,MAAMoJ,UAAN,KAAqB,OAArB,GAA+BJ,WAA/B,GAA6CT,WAA1D;SACQ/H,6BAAC,MAAD,EAAYR,KAAZ,CAAR;CAFJ;;AAKAmJ,OAAOhG,SAAP,GAAmB;;;;MAIXC,UAAUC,MAJC;;;;;cASHD,UAAUiG,KAAV,CAAgB,CAAC,OAAD,EAAU,OAAV,CAAhB,CATG;;;;;aAcJjG,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAdhC;;;;;aAmBJF,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,CAnBI;;;;;iBAwBAD,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAxBpC;;;;;mBA6BEF,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UA7BtC;;;;;qBAkCIF,UAAUoE,IAlCd;;;;;gBAuCDpE,UAAUC,MAvCT;;;;;iBA4CAD,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,CA5CA;;;;;gBAiDDD,UAAU2B,IAjDT;;;;;mBAsDE3B,UAAUG,OAtDZ;;;;;aA2DJH,UAAUmE,OAAV,CAAkBnE,UAAUqE,SAAV,CAAoB,CAC7CrE,UAAUC,MADmC,EAE7CD,UAAUsE,KAAV,CAAgB;cACFtE,UAAUC,MAAV,CAAiBC,UADf;eAEDF,UAAUC,MAFT;SAGPD,UAAUuE,MAAV,CAAiBrE;GAH1B,CAF6C,CAApB,CAAlB,CA3DI;;;;;aAuEJF,UAAUuE;;CAvEzB;;AA2EAwB,OAAOG,YAAP,GAAsB;aACP,CAAC,GAAD,CADO;iBAEJ,CAAC,SAAD,CAFI;mBAGF,CAAC,SAAD;CAHpB;;AClFA,IAAIC,aAAa,SAAbA,UAAa,CAAUvJ,KAAV,EAAiB;;;WAE1BQ;;;cACWuD,aAAN,CAAoBK,GAApB,CAAwB,UAACH,KAAD;mBACrBzD;;kBAAK,KAAKyD,MAAMH,IAAhB,EAAsB,OAAO,EAAC0F,YAAa,KAAIvF,MAAMK,KAAX,GAAkB,IAA/B,EAA7B;wDACW,MAAK,UAAZ,EAAuB,SAAUL,MAAMU,IAAvC,EAA8C,UAAU,kBAACd,KAAD;+BAAW7D,MAAM0E,UAAN,CAAiBT,MAAMH,IAAvB,EAA6BD,MAAM4F,MAAN,CAAaC,OAA1C,CAAX;qBAAxD,GADJ;wDAEW,MAAK,UAAZ,EAAuB,SAAUzF,MAAMiB,QAAvC,EAAkD,UAAU,kBAACrB,KAAD;+BAAW7D,MAAMmE,YAAN,CAAmBF,MAAMH,IAAzB,EAA+BD,MAAM4F,MAAN,CAAaC,OAA5C,CAAX;qBAA5D,GAFJ;;;;0BAGiB,cAAN,IAAwB1J,MAAM,cAAN,EAAsBuE,IAAtB,QAAgCN,KAAhC,CAAxB,GAAiEA,MAAMO;;aAJ7D;SAAxB;KAFT;CADJ;;AAcA+E,WAAWpG,SAAX,GAAuB;mBACJC,UAAU0B,KAAV,CAAgBxB,UADZ;kBAEJF,UAAU2B,IAFN;gBAGP3B,UAAU2B,IAHH;kBAIL3B,UAAU2B;CAJ5B;;ACJA,IAAI4E,yBAAyB,SAAzBA,sBAAyB,CAAU3J,KAAV,EAAiB;;;QAEtC4J,UAAU5J,MAAM,SAAN,IAAmBA,MAAM,SAAN,CAAnB,GAAsC;eAChDQ;+BAAA;;;4CACI;;;;SAF4C;KAApD;;QAKIqJ,MAAM7J,MAAM,KAAN,IAAeA,MAAM,KAAN,CAAf,GAA8B,UAACyF,IAAD;eAAWjF;+BAAA;cAAU,KAAKiF,KAAK3B,IAApB;;yCAC3C;;sBAAuB,cAAN,IAAwB9D,MAAM,cAAN,EAAsBuE,IAAtB,QAAiCkB,IAAjC,CAAxB,GAAiEA,KAAKjB;;SADvD;KAAxC;;WAKIhE;8BAAA;UAAkB,UAAUrB,UAA5B;;4BACI;;;sCACI;;;aADJ;;oCAII;;sBACW+B,KAAN,GAAclB,MAAMkB,KAAN,CAAYkD,GAAZ,CAAgByF,GAAhB,CAAd,GAAqC;;;KAPtD;CAXJ;;AAyBAF,uBAAuBxG,SAAvB,GAAmC;aACtBC,UAAU2B,IADY;SAE1B3B,UAAU2B,IAFgB;kBAGjB3B,UAAU2B,IAHO;WAIxB3B,UAAUmE,OAAV,CAAkBnE,UAAUuE,MAA5B,EAAoCrE;CAJ/C;;;;ACtCA,IAQMwG;;;4BAEU9J,KAAZ,EAAmB;;;mIACTA,KADS;;cAEVW,cAAL,GAAsB,EAAtB;;;;;;gDAGgC;gBAAjBC,IAAiB,QAAjBA,IAAiB;gBAAXC,QAAW,QAAXA,QAAW;;gBAC5BK,QAAQ,EAAZ;;gBAEIJ,MAAMF,KAAKE,GAAf;;gBAEIA,GAAJ,EAAS;oBACDA,IAAI2E,IAAR,EAAc;4BACF3E,IAAI2E,IAAJ,CAASa,QAAT,CAAkBpF,KAA1B;;;;gCAKDL,QADP;uBAEWK;;;;;0CAIGlB,OAAO;gBACjBgH,OAAO;sBACDhH,MAAM8D,IADL;uBAEA9D,MAAM+J;aAFjB;gBAII/J,MAAMmH,SAAV,EAAqB;0BACjB,CAASH,IAAT,EAAehH,MAAMmH,SAArB;;;mBAGG;2BACQH,IADR;sBAEG,CAAChH,MAAM8D;aAFjB;;;;iCAMK;gBACDsD,YAAY,KAAKpH,KAAL,CAAWoH,SAA3B;gBACI5E,kBAAkB,KAAKxC,KAAL,CAAWwC,eAAjC;;gBAEIC,aAAa/C,QAAA,CAAO,KAAKiB,cAAZ,EAA4B,UAAC+B,CAAD;uBAAO2E,KAAKC,SAAL,CAAe5E,EAAE0E,SAAjB,MAAgCC,KAAKC,SAAL,CAAeF,SAAf,CAAhC,IAA6D1E,EAAEF,eAAF,KAAsBA,eAA1F;aAA5B,CAAjB;gBACI/B,qBAAJ;gBACIgC,UAAJ,EAAgB;+BACAA,WAAWE,aAAvB;aADJ,MAEO;oBACCC,QAAQC,GAAR,mBAAJ;;oDAmB2BD,KAA3B,EAAkCwE,SAAlC;;+BAEYtE,oBAAQF,KAAR,EAAe;2BAChB,KAAKG,iBADW;6BAEd,KAAKC;iBAFN,EAGTR,mBAAmBmH,sBAHV,CAAZ;;qBAKKhJ,cAAL,CAAoBsC,IAApB,CAAyB,EAACmE,WAAWA,SAAZ,EAAuB5E,iBAAiBA,eAAxC,EAAyDG,eAAelC,YAAxE,EAAzB;;;mBAGID;0CAAA;kBAAiB,QAAQ0C,eAAzB;6CAAkCzC,YAAD,EAAe,KAAKT,KAApB;aAAzC;;;;EA7EqBQ,eAAMC;;AAiFnCqJ,eAAe3G,SAAf,GAA2B;;;;UAIjBC,UAAUC,MAAV,CAAiBC,UAJA;;;;;WAShBF,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UATpB;;;;;aAcdF,UAAU2B,IAdI;;;;;SAmBlB3B,UAAU2B,IAnBQ;;;;;kBAwBT3B,UAAU2B,IAxBD;;;;;qBA6BN3B,UAAUG,OA7BJ;;;;;eAkCZH,UAAUmE,OAAV,CAAkBnE,UAAUqE,SAAV,CAAoB,CAC7CrE,UAAUC,MADmC,EAE7CD,UAAUsE,KAAV,CAAgB;kBACFtE,UAAUC,MAAV,CAAiBC,UADf;mBAEDF,UAAUC,MAFT;aAGPD,UAAUuE,MAAV,CAAiBrE;KAH1B,CAF6C,CAApB,CAAlB,CAlCY;;;;;eA8CZF,UAAUuE;CA9CzB;;ICnFMqC;;;sBACUhK,KAAZ,EAAmB;;;uHACTA,KADS;;UAEViK,sBAAL,GAA8BxB,mBAAQ,MAAKC,eAAb,EAA8B,MAAKC,kBAAnC,EAAuDmB,cAAvD,CAA9B;;;;;;oCAGY7J,OAAOY,UAAU;0BAEtBA,QADP;cAEUZ,MAAM,kBAAiBY,SAAS0B,EAAhC,IAAsCtC,MAAM,kBAAiBY,SAAS0B,EAAhC,CAAtC,GAA4E1B,SAASqJ;;;;;uCAIhFtB,UAAU/H,UAAU;aAC5B,EAAP;;;;yCAIiB;;;2CAGE;;;6BAGd;UACDoJ,yBAAyB,KAAKA,sBAAlC;aACQzJ;2BAAA;UAAU,OAAQqH,KAAlB;qCAA2B,sBAAD,EAA4B,KAAK7H,KAAjC;OAAlC;;;;EA1BiBQ,eAAMC;;AA8B/BuJ,WAAW7G,SAAX,GAAuB;;;;MAIfC,UAAUC,MAJK;;;;;eASND,UAAUC,MAAV,CAAiBC,UATX;;;;;SAcZF,UAAUmE,OAAV,CAAkBnE,UAAUC,MAA5B,EAAoCC,UAdxB;;;;;WAmBVF,UAAU2B,IAnBA;;;;;OAwBd3B,UAAU2B,IAxBI;;;;;gBA8BL3B,UAAU2B,IA9BL;;;;;mBAmCF3B,UAAUG,OAnCR;;;;;aAwCRH,UAAUmE,OAAV,CAAkBnE,UAAUqE,SAAV,CAAoB,CAC7CrE,UAAUC,MADmC,EAE7CD,UAAUsE,KAAV,CAAgB;cACFtE,UAAUC,MAAV,CAAiBC,UADf;eAEDF,UAAUC,MAFT;SAGPD,UAAUuE,MAAV,CAAiBrE;GAH1B,CAF6C,CAApB,CAAlB,CAxCQ;;;;;aAoDRF,UAAUuE;CApDzB;;AChCA,IAAIwC,aAAa,SAAbA,UAAa,CAASnK,KAAT,EAAgB;WACrBQ;6BAAA;UAAM,WAAN;;gCACJ;;;oCACI;kBAAK,IAAI,CAAT,EAAY,IAAI,CAAhB;sBAA0B4J;aAD9B;;oCAEI;kBAAK,IAAI,CAAT,EAAY,IAAI,CAAhB;sBAA0BC;;;KAHlC;CADJ;;AAUAF,WAAWhH,SAAX,GAAuB;aACVC,UAAUG,OADA;cAETH,UAAUG;CAFxB;;ACZA,SAAS+G,mBAAT,CAA6BC,WAA7B,EAA0CC,UAA1C,EAAsD;;;QAE5CC,UAAU,SAAVA,OAAU,CAAC3G,IAAD,EAAU;YAClB4G,QAAQ,EAAZ;YACIC,OAAOJ,YAAYK,QAAZ,CAAqBC,QAAhC;YACIC,UAAUN,aAAa,GAAb,GAAmB1G,IAAjC;YACI6G,KAAK7B,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EAA4B;mBACjB6B,KAAKI,MAAL,CAAYJ,KAAK7B,OAAL,CAAa,GAAb,IAAkB,CAA9B,CAAP;mBACO6B,KAAKI,MAAL,CAAY,CAAZ,EAAcJ,KAAK7B,OAAL,CAAa,GAAb,CAAd,CAAP;oBACQ6B,KAAKK,KAAL,CAAW,IAAX,CAAR;oBACQtL,OAAA,CAAMgL,KAAN,EAAa,UAACO,CAAD;uBAAOA,EAAEC,UAAF,CAAaV,aAAa,GAA1B,IAAiCM,OAAjC,GAA2CG,CAAlD;aAAb,CAAR;;YAEAP,MAAM5B,OAAN,CAAcgC,OAAd,MAA2B,CAAC,CAAhC,EAAmC;kBACzB7H,IAAN,CAAW6H,OAAX;;eAEG,OAAMpL,QAAA,CAAOgL,KAAP,EAAa,IAAb,CAAN,GAA2B,GAAlC;KAbJ;;QAgBMS,WAAW,SAAXA,QAAW,CAAUlL,KAAV,EAAiB;YAC1BmL,iBAAJ;YACInL,KAAJ,EAAW;uBACIsK,YAAYK,QAAZ,CAAqB3K,KAArB,GAA6BsK,YAAYK,QAAZ,CAAqB3K,KAAlD,GAA0D,EAArE;qBACS,YAAYuK,UAArB,IAAmCvK,KAAnC;SAFJ,MAGO,IAAIsK,YAAYK,QAAZ,CAAqB3K,KAAzB,EAAgC;uBACxBsK,YAAYK,QAAZ,CAAqB3K,KAAhC;mBACOmL,SAAS,YAAYZ,UAArB,CAAP;;eAEGY,QAAP;KATJ;;QAYMC,cAAc,SAAdA,WAAc,CAASV,IAAT,EAAe;YAC3BA,KAAK7B,OAAL,CAAa,GAAb,IAAoB,CAAC,CAAzB,EAA4B;mBACjB6B,KAAKI,MAAL,CAAYJ,KAAK7B,OAAL,CAAa,GAAb,IAAoB,CAAhC,CAAP;mBACO6B,KAAKI,MAAL,CAAY,CAAZ,EAAeJ,KAAK7B,OAAL,CAAa,GAAb,CAAf,CAAP;gBACI4B,QAAQC,KAAKK,KAAL,CAAW,IAAX,CAAZ;gBACI/I,IAAIuI,aAAa,GAArB;gBACIc,OAAO5L,QAAA,CAAOgL,KAAP,EAAc,UAACO,CAAD;uBAAOA,EAAEC,UAAF,CAAajJ,CAAb,CAAP;aAAd,CAAX;gBACIqJ,IAAJ,EAAU;uBACCA,KAAKP,MAAL,CAAY9I,EAAEN,MAAd,CAAP;;;eAGD,EAAP;KAXJ;;QAcI4J,kBAAkB7L,SAAA,CAAQ6K,YAAYK,QAApB,CAAtB;oBACgBC,QAAhB,GAA2BQ,YAAYE,gBAAgBV,QAA5B,CAA3B;;QAEIW,YAAY,EAAhB;;QAEMC,aAAU;gBACJlB,YAAY5I,MADR;gBAEJ4I,YAAYtC,MAFR;kBAGFsD,eAHE;oBAIA,oBAACX,QAAD,EAAc;mBACfL,YAAYmB,UAAZ,CAAuB,EAACb,UAASJ,QAAQG,SAASC,QAAjB,CAAV,EAAvB,CAAP;SALQ;cAON,cAAC/G,IAAD,EAAO7D,KAAP,EAAiB;mBACZsK,YAAYtH,IAAZ,CAAiBwH,QAAQ3G,IAAR,CAAjB,EAA+BqH,SAASlL,KAAT,CAA/B,CAAP;SARQ;iBAUH,iBAAC6D,IAAD,EAAO7D,KAAP,EAAiB;wBACV0L,OAAZ,CAAoBlB,QAAQ3G,IAAR,CAApB,EAAkCqH,SAASlL,KAAT,CAAlC;SAXQ;YAaR,YAACkB,CAAD,EAAO;wBACKyK,EAAZ,CAAezK,CAAf;SAdQ;gBAgBJ,kBAAM;wBACE0K,MAAZ;SAjBQ;mBAmBD,qBAAM;wBACDC,SAAZ;SApBQ;eAsBN,eAACC,MAAD,EAAY;mBACPxB,YAAYyB,KAAZ,CAAkBD,MAAlB,CAAP;SAvBQ;gBAyBJ,gBAACE,QAAD,EAAc;sBACRhJ,IAAV,CAAegJ,QAAf;mBACO,YAAM;wBACT,CAAOT,SAAP,EAAkBS,QAAlB;aADJ;SA3BQ;iBA+BH,mBAAM;;;KA/BnB;;QAoCMC,WAAW3B,YAAY4B,MAAZ,CAAoB,UAACtI,KAAD,EAAW;YACxCC,OAAOuH,YAAYxH,MAAMgH,QAAlB,CAAX;YACI5K,cAAJ;YACI4D,MAAM5D,KAAN,IAAe4D,MAAM5D,KAAN,CAAY,YAAYuK,UAAxB,CAAnB,EAAwD;oBAC5C3G,MAAM5D,KAAN,CAAY,YAAYuK,UAAxB,CAAR;;YAEAiB,WAAQb,QAAR,CAAiBC,QAAjB,KAA8B/G,IAA9B,IAAsC2H,WAAQb,QAAR,CAAiB3K,KAAjB,KAA2BA,KAArE,EAA4E;mBACjEmM,MAAP,CAAcX,WAAQb,QAAtB,EAAgC/G,KAAhC;uBACQ+G,QAAR,CAAiBC,QAAjB,GAA4B/G,IAA5B;uBACQ8G,QAAR,CAAiB3K,KAAjB,GAAyBA,KAAzB;oBACA,CAAOuL,SAAP,EAAkB,UAACS,QAAD;uBAAcA,SAAS1H,IAAT,QAAmBkH,WAAQb,QAA3B,CAAd;aAAlB;;KAVS,CAAjB;;;;WAgBOa,UAAP;;;ACjGJ,IAAIlB,cAAc8B,2BAAlB;;IAEMC;;;0BAEUtM,KAAZ,EAAmB;;;+HACTA,KADS;;cAEVuM,aAAL,GAAqBjC,oBAAoBC,WAApB,EAAiCvK,MAAMwM,MAAvC,CAArB;;;;;;6CAGiB;;;+CAIE;iBACdD,aAAL,CAAmBE,OAAnB;;;;iCAGK;mBACGjM;kCAAA;kBAAQ,SAAS,KAAK+L,aAAtB;qBAA2CvM,KAAL,CAAWsG;aAAzD;;;;EAhBmB9F,eAAMC;;ICA3BiM;;;oBAEU1M,KAAZ,EAAmB;;;mHACTA,KADS;;cAEVC,KAAL,GAAa;kBACH;SADV;cAGKC,UAAL,GAAkB,CACd;kBACS,QADT;mBAEU,QAFV;uBAGe,mBAACF,KAAD;uBAAWQ;;;;iBAAX;;SAJD,EAMd;kBACS,QADT;mBAEU,QAFV;uBAGe,mBAACR,KAAD;uBAAYQ;;;;iBAAZ;;SATD,CAAlB;;;;;;qCAcS;iBACJF,QAAL,CAAc,EAACqE,MAAM,IAAP,EAAd;;;;sCAGU;iBACLrE,QAAL,CAAc,EAACqE,MAAM,KAAP,EAAd;;;;iCAGK;;;mBACGnE;sCAAA;kBAAkB,UAAUrB,UAA5B;;;;iDAECwN,qBAAD,IAAY,OAAM,MAAlB,EAAyB,SAAS;mCAAI,OAAKC,UAAL,EAAJ;yBAAlC,GADJ;;yCAEI;;mCACU,qBADV;qCAEa,CACLpM,6BAACmM,qBAAD,IAAY,OAAM,QAAlB,EAA2B,SAAS,IAApC,EAA0C,SAAS;2CAAI,OAAKE,WAAL,EAAJ;iCAAnD,GADK,EAELrM,6BAACmM,qBAAD,IAAY,OAAM,QAAlB,EAA2B,SAAS,IAApC,EAA0C,iBAAiB,IAA3D,EAAiE,SAAS;2CAAI,OAAKE,WAAL,EAAJ;iCAA1E,GAFK,CAFb;mCAMW,KANX;kCAOU,KAAK5M,KAAL,CAAW0E,IAPrB;4CAQoB;uCAAI,OAAKkI,WAAL,EAAJ;;;;wCAEhB;8BAAQ,QAAQ,SAAhB;;;;;;;2CAGa,CAAM,KAAK3M,UAAX,EAAuB,UAAC4M,CAAD;+CAAQtM;+DAAA;8CAAM,KAAKsM,EAAEC,IAAb,EAAmB,IAAID,EAAEC,IAAzB;8CAAkCC;yCAA1C;qCAAvB;iCAFT;;;;2CAKS,CAAM,KAAK9M,UAAX,EAAuB,UAAC4M,CAAD;+CAAQtM,6BAACyM,oBAAD,IAAO,KAAKH,EAAEC,IAAd,EAAoB,MAAMD,EAAEC,IAA5B,EAAkC,WAAWD,EAAEI,SAA/C,GAAR;qCAAvB;;;yBAhBjB;;wCAoBI;8BAAQ,QAAQ,SAAhB;;;;;;;2CAGa,CAAM,KAAKhN,UAAX,EAAuB,UAAC4M,CAAD;+CAAQtM;+DAAA;8CAAM,KAAKsM,EAAEC,IAAb,EAAmB,IAAID,EAAEC,IAAzB;8CAAkCC;yCAA1C;qCAAvB;iCAFT;;;;2CAKS,CAAM,KAAK9M,UAAX,EAAuB,UAAC4M,CAAD;+CAAQtM,6BAACyM,oBAAD,IAAO,KAAKH,EAAEC,IAAd,EAAoB,MAAMD,EAAEC,IAA5B,EAAkC,WAAWD,EAAEI,SAA/C,GAAR;qCAAvB;;;;;;aA7BzB;;;;EA9Ba1M,eAAMC;;ICJrB0M;;;2BAEUnN,KAAZ,EAAmB;;4HACTA,KADS;;;;;iCAIV;;gBAEDoN,QAAQ,SAARA,KAAQ;uBAAU5M;;;;0BAAkB6M,KAAN,CAAYC,MAAZ,CAAmBpF;iBAAzC;aAAZ;gBACIqF,QAAQ,SAARA,KAAQ;uBAAU/M;;;;iBAAV;aAAZ;gBACIgN,QAAQ,SAARA,KAAQ;uBAAUhN;;;;iBAAV;aAAZ;;mBAEQA;4BAAA;kBAAQ,QAAQ,KAAKR,KAAL,CAAWuC,EAA3B;;;;;;2CAIA;0BAAM,IAAI,aAAV;;qBAHJ;;;2CAII;0BAAM,IAAI,aAAV;;qBAJJ;;;2CAKI;0BAAM,IAAI,QAAV;;qBALJ;;;2CAMI;0BAAM,IAAI,QAAV;;qBANJ;;;oCAQI;0BAAQ,QAAO,KAAf;;;;;mDAEQ;kCAAM,IAAI,QAAV;;6BADJ;;;mDAEI;kCAAM,IAAI,QAAV;;;;qBAXZ;;iDAeK0K,oBAAD,IAAO,MAAM,eAAb,EAA8B,WAAWG,KAAzC,GAfJ;iDAgBKH,oBAAD,IAAO,MAAM,QAAb,EAAuB,WAAWM,KAAlC,GAhBJ;iDAiBKN,oBAAD,IAAO,MAAM,QAAb,EAAuB,WAAWO,KAAlC,GAjBJ;;oCAmBI;0BAAQ,QAAO,KAAf;;;;yDAESP,oBAAD,IAAO,MAAM,QAAb,EAAuB,WAAWG,KAAlC,GADJ;yDAEKH,oBAAD,IAAO,MAAM,QAAb,EAAuB,WAAWM,KAAlC;;qBAtBZ;;;aADJ;;;;EAZoB/M,eAAMC;;;;;;;ACJlC,IAUMgN;;;iCAEUzN,KAAZ,EAAmB;;wIACTA,KADS;;;;;iCAKV;;;gBACD0N,WAAW7K,GAAX,mBAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;gBA8BI8K,QAAQ,CAAC;0BACC,MADD;qBAEJD;aAFG,CAAZ;;gBAKIE,kBAAkB,SAAlBA,eAAkB,CAAC5N,KAAD;uBAAYQ;oCAAA;;;8CAC1B;0BAAa,kBAAkB,KAA/B;;+CACI;;;4DACI;;;6BADJ;;4DAEI;;;6BAFJ;;4DAGI;;;6BAHJ;;4DAII;;;;;qBANkB;;4CAS1B;0BAAW,oBAAoB,KAA/B,EAAsC,YAAY,KAAlD;8BACWU,KAAN,GAAclB,MAAMkB,KAAN,CAAYkD,GAAZ,CAAgB;mCAC3B5D;mDAAA;kCAAU,KAAKiF,KAAKG,IAApB;;6DACI;;yCAAsBpB;iCAD1B;;6DAEI;;yCAAsBqJ,MAAL,CAAY3F;iCAFjC;;6DAGI;;iEAAiByE,qBAAD,IAAY,OAAO,QAAnB,EAA6B,SAAS;mDAAM,OAAK3M,KAAL,CAAW8N,mBAAX,CAA+B;2DAC7E;0DACDrI,KAAK3B,IADJ;2DAEC,UAAQ,IAAIiK,IAAJ;iDAHoE;gEAKvE,CAAC,YAAD;;6CALwC,CAAN;yCAAtC;iCAHpB;;6DAWI;;iEAAiBpB,qBAAD,IAAY,OAAO,QAAnB,EAA6B,SAAS;mDAAM,OAAK3M,KAAL,CAAWgO,kBAAX,CAA8B;2DAC5E;0DACDvI,KAAK3B;iDAFwE;gEAItE,CAAC,YAAD;6CAJwC,CAAN;yCAAtC;;6BAZO;yBAAhB,CAAd,GAmBG;;iBA7BM;aAAtB;;mBAmCItD;sCAAA;kBAAkB,UAAUrB,UAA5B;;;;iDAECwN,qBAAD,IAAY,OAAM,KAAlB,EAAwB,SAAS;mCAAM,OAAK3M,KAAL,CAAWiO,eAAX,CAA2B;2CACpD;0CACA,UAAS,IAAIF,IAAJ,GAAWG,OAAX,EADT;2CAEC,UAAQ,IAAIH,IAAJ;iCAH2C;gDAK9C,CAAC,YAAD;6BALmB,CAAN;yBAAjC,GADA;iDASC,cAAD,IAAgB,MAAM,GAAtB,EAA2B,OAAO,CAAC,iBAAD,CAAlC,EAAuD,WAAWJ,KAAlE,EAAyE,iBAAiBC,eAA1F;;aAXJ;;;;EA7E0BnN;;AA8FlC,IAAM0N,cAActL,GAAd,kBAAN;;AAeA,IAAM2C,UAAU3C,GAAV,kBAAN;;AAcA,IAAMuL,aAAavL,GAAb,kBAAN;;IAQMwL;;;6BAEUrO,KAAZ,EAAmB;;;sIACTA,KADS;;eAEVS,SAAL,GACIqC,oBAAQqL,WAAR,EAAqB,EAAE3J,MAAM,qBAAR,EAArB,EACI1B,oBAAQ0C,OAAR,EAAiB,EAAEhB,MAAM,iBAAR,EAAjB,EACI1B,oBAAQsL,UAAR,EAAoB,EAAE5J,MAAM,oBAAR,EAApB,EAAoDiJ,mBAApD,CADJ,CADJ,CADJ;;;;;;iCAMK;gBACDhN,eAAY,KAAKA,SAArB;mBACQD;0CAAA;kBAAgB,QAAQ0C,eAAxB;6CAAiCzC,YAAD;aAAxC;;;;EAZsBD,eAAMC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}