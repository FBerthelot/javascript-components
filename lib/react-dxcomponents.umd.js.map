{"version":3,"file":"react-dxcomponents.umd.js","sources":["../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/picker/PickerData.jsx","../src/javascript/reduxStore.js","../src/javascript/picker/PickerRedux.jsx","../src/javascript/picker/PickerState.jsx","../src/javascript/picker/Picker.jsx","../src/javascript/picker/PickerView.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/nodesTable/NodesTableData.jsx","../src/javascript/nodesTable/NodesTable.jsx","../src/javascript/layout/TestLayout.jsx","../src/javascript/router/createOutletHistory.js","../src/javascript/router/router.js","../src/javascript/engine/Engine.jsx","../src/javascript/router/RouterExample.jsx","../src/javascript/mutations/Mutation.jsx","../src/javascript/theme.js"],"sourcesContent":["import React from 'react';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<div>{this.state.reactElements}</div>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedView.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedView(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nDynamicComponentsList.propTypes = {\n    /**\n     * Id of the \"componentsFolder\" to look for\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Component to use to do the rendering\n     */\n    renderComponent: PropTypes.element\n}\n\nexport {DynamicComponentsList};\n","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, RadioButtonChecked, RadioButtonUnchecked} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterial = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <RadioButtonChecked/> :\n                        <RadioButtonUnchecked/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem: PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func\n};\n\nPickerViewMaterial = withTheme()(PickerViewMaterial);\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, CheckBoxOutlineBlank, CheckBox} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <CheckBox/> :\n                        <CheckBoxOutlineBlank/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nPickerViewMaterialMultiple = withTheme()(PickerViewMaterialMultiple);\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {PickerViewMaterial} from './PickerViewMaterial'\nimport {PickerViewMaterialMultiple} from \"./PickerViewMaterialMultiple\";\nimport PropTypes from 'prop-types';\n\nclass PickerData extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let selectedPaths = ownProps.multipleSelection ? ownProps.selectedPaths : [ownProps.selectedPath];\n        let openPaths = ownProps.openPaths ? ownProps.openPaths : [];\n\n        let pickerEntries = [];\n        let nodesById = {};\n        let jcr = data.jcr;\n\n        let addNode = function (node, depth, index) {\n            let selected = false;\n            if (node.selectable) {\n                selected = _.indexOf(selectedPaths, node.path) !== -1\n            }\n            let pickerNode = {\n                name: node.name,\n                path: node.path,\n                open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                selected: selected,\n                openable: node.openable,\n                selectable: node.selectable,\n                depth: depth,\n                prefix: _.repeat(\"&nbsp;\", depth * 3),\n                node: node,\n                hidden: false,\n                hasChildren: node.children.pageInfo.totalCount > 0\n            };\n            pickerEntries.splice(index, 0, pickerNode);\n            nodesById[node.uuid] = pickerNode;\n            return pickerNode;\n        };\n\n        if (jcr) {\n            if (jcr.rootNodes) {\n                _.forEach(jcr.rootNodes, rootNode => {\n                    let root = addNode(rootNode, 0, 0);\n                    root.hidden = ownProps.hideRoot;\n                });\n            }\n            if (jcr.openNodes) {\n                _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                    let parent = nodesById[node.uuid];\n                    if (parent) {\n                        let parentIndex = _.indexOf(pickerEntries, parent);\n                        _.forEachRight(node.children.nodes, (child) => {\n                            addNode(child, parent.depth + 1, parentIndex + 1)\n                        })\n                    }\n                });\n            }\n        }\n\n        // Nodes loaded, fill selection list\n        let selectedNodes = _.filter(pickerEntries, (node) => {\n            return node.selected\n        }).map((node) => {\n            return node.node\n        });\n\n        selectedPaths = _.map(selectedNodes, \"path\");\n        pickerEntries = _.filter(pickerEntries, pickerNode => {\n            return !pickerNode.hidden;\n        });\n        return {\n            ...ownProps,\n            pickerEntries: pickerEntries,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let openPaths = props.openPaths ? props.openPaths : [];\n\n        let fullyOpenPath = (props, path) => {\n            let rootFound = false;\n            _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                if (!rootFound) {\n                    _.forEach(props.rootPaths, rootPath => {\n                        rootFound = rootFound || _.startsWith(acc, rootPath);\n                    })\n                }\n                if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                    openPaths.push(acc);\n                }\n                return acc + \"/\" + it\n            }, \"\");\n        };\n\n        if (props.multipleSelection) {\n            _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n        } else {\n            fullyOpenPath(props, props.selectedPath);\n        }\n\n        let vars = {\n            rootPaths: props.rootPaths,\n            types: _.union(props.openableTypes, props.selectableTypes),\n            selectable: props.selectableTypes,\n            openable: props.openableTypes,\n            openPaths: openPaths,\n        };\n        if (props.variables) {\n            _.assign(vars, props.variables);\n        }\n\n        return {\n            variables: vars\n        }\n    }\n\n    render() {\n        let fragments = this.props.fragments;\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => JSON.stringify(f.fragments) === JSON.stringify(fragments) && f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                    jcr {\n                        rootNodes:nodesByPath(paths: $rootPaths) {\n                            path\n                            uuid\n                            name\n                            children(typesFilter:{types:$types}, limit:1) {\n                                pageInfo {\n                                    totalCount\n                                }\n                            }\n                            selectable : isNodeType(type: {types:$selectable})\n                            openable : isNodeType(type: {types:$openable})\n                            ... node\n                        },\n                        openNodes:nodesByPath(paths: $openPaths) {\n                            path\n                            uuid\n                            children(typesFilter:{types:$types}) {\n                                nodes {\n                                    path\n                                    uuid\n                                    name\n                                    children(typesFilter:{types:$types}, limit:1) {\n                                        pageInfo {\n                                            totalCount\n                                        }\n                                    }\n                                    selectable : isNodeType(type: {types:$selectable})\n                                    openable : isNodeType(type: {types:$openable})\n                                    ... node\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            replaceFragmentsInDocument(query, fragments);\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || this.props.multipleSelection ? PickerViewMaterialMultiple : PickerViewMaterial);\n\n            this.componentCache.push({fragments: fragments, renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider  client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nPickerData.propTypes = {\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n\n};\n\nexport { PickerData };\n","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import React from 'react';\nimport {connect, Provider} from 'react-redux'\nimport {PickerData} from './PickerData'\nimport {reducers, store, resetStateReducer} from \"../reduxStore\";\nimport PropTypes from 'prop-types';\n\nclass PickerRedux extends React.Component {\n    constructor(props) {\n        super(props);\n        this.PickerReduxWithoutStore = connect(this.mapStateToProps, this.mapDispatchToProps)(PickerData);\n    }\n\n    mapStateToProps(state, ownProps) {\n        if (ownProps.multipleSelection) {\n            return {\n                ...ownProps,\n                openPaths: state[\"openPaths_\" + ownProps.id] ? state[\"openPaths_\" + ownProps.id] : ownProps.openPaths,\n                selectedPaths: state[\"selectedPaths_\" + ownProps.id] ? state[\"selectedPaths_\" + ownProps.id] : ownProps.selectedPaths\n            }\n        } else {\n            return {\n                ...ownProps,\n                openPaths: state[\"openPaths_\" + ownProps.id] ? state[\"openPaths_\" + ownProps.id] : ownProps.openPaths,\n                selectedPath: state[\"selectedPath_\" + ownProps.id] ? state[\"selectedPath_\" + ownProps.id] : ownProps.selectedPath\n            }\n        }\n    };\n\n    mapDispatchToProps(dispatch, ownProps) {\n        return {\n            onSelectItem(path, select) {\n                dispatch({\n                    type: select ? 'SELECT_PICKER_ENTRY_' + ownProps.id : 'UNSELECT_PICKER_ENTRY_' + ownProps.id,\n                    path: path\n                })\n            },\n            onOpenItem(path, open) {\n                dispatch({\n                    type: open ? 'OPEN_PICKER_ENTRY_' + ownProps.id : 'CLOSE_PICKER_ENTRY_' + ownProps.id,\n                    path: path\n                })\n            }\n        }\n    };\n\n    openPaths() {\n        return (state = this.props.openPaths || [], action) => {\n            let index = state.indexOf(action.path);\n            if (action.type === 'OPEN_PICKER_ENTRY_' + this.props.id && index === -1) {\n                return [\n                    ...state,\n                    action.path\n                ]\n            } else if (action.type === 'CLOSE_PICKER_ENTRY_' + this.props.id && index !== -1) {\n                return _.filter(state, (path) => path !== action.path);\n            }\n            return state;\n        };\n    }\n\n\n    selectedPath() {\n        return (state = this.props.selectedPath, action) => {\n            if (action.type === 'SELECT_PICKER_ENTRY_' + this.props.id) {\n                return action.path\n            } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + this.props.id) {\n                return null;\n            }\n            return state;\n        };\n    }\n\n    selectedPaths() {\n        return (state = this.props.selectedPaths || [], action) => {\n            let index = state.indexOf(action.path);\n            if (action.type === 'SELECT_PICKER_ENTRY_' + this.props.id && index === -1) {\n                return [\n                    ...state,\n                    action.path\n                ]\n            } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + this.props.id && index !== -1) {\n                return _.filter(state, (path) => path !== action.path);\n            }\n            return state;\n        };\n    }\n\n\n    componentWillMount() {\n        reducers[\"openPaths_\" + this.props.id] = this.openPaths();\n        if (this.props.multipleSelection) {\n            reducers[\"selectedPaths_\" + this.props.id] = this.selectedPaths();\n        } else {\n            reducers[\"selectedPath_\" + this.props.id] = this.selectedPath();\n        }\n    }\n\n    componentWillUnmount() {\n        reducers[\"openPaths_\" + this.props.id] = resetStateReducer;\n        reducers[\"selectedPath_\" + this.props.id] = resetStateReducer;\n        reducers[\"selectedPaths_\" + this.props.id] = resetStateReducer;\n\n        store.dispatch({type:\"RESET_STATE\"});\n\n        delete reducers[\"openPaths_\" + this.props.id];\n        delete reducers[\"selectedPath_\" + this.props.id];\n        delete reducers[\"selectedPaths_\" + this.props.id];\n    }\n\n    render() {\n        let PickerReduxWithoutStore = this.PickerReduxWithoutStore;\n        return (<Provider store={ store }><PickerReduxWithoutStore {...this.props}/></Provider>)\n    }\n}\n\n\nPickerRedux.propTypes = {\n    /**\n     * Identifier for the picker redux store\n     */\n    id: PropTypes.string,\n\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n\n};\n\n\nexport { PickerRedux };\n","import React from 'react';\nimport {PickerData} from './PickerData';\nimport * as _ from \"lodash\";\nimport PropTypes from 'prop-types';\n\n\nclass PickerState extends React.Component {\n\n    constructor(props) {\n        super(props);\n        if (props.multipleSelection) {\n            this.state = {\n                openPaths: props.openPaths ? props.openPaths : [],\n                selectedPaths: props.selectedPaths ? props.selectedPaths : []\n            }\n        } else {\n            this.state = {\n                openPaths: props.openPaths ? props.openPaths : [],\n                selectedPath: props.selectedPath ? props.selectedPath : null\n            }\n        }\n    }\n\n    onSelectItem(state, path, selected) {\n        if (this.props.multipleSelection) {\n            this.setState({\n                openPaths: state.openPaths,\n                selectedPaths: selected ? [\n                    ...state.selectedPaths,\n                    path\n                ] : _.filter(state.selectedPaths, (thispath) => thispath !== path),\n            });\n        } else {\n            this.setState({\n                openPaths: state.openPaths,\n                selectedPath: selected ? path : null\n            });\n        }\n\n    }\n\n    onOpenItem(state, path, open) {\n        if (this.props.multipleSelection) {\n            this.setState({\n                openPaths: open ? [\n                    ...state.openPaths,\n                    path\n                ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                selectedPaths: state.selectedPaths\n            });\n        } else {\n            this.setState({\n                openPaths: open ? [\n                    ...state.openPaths,\n                    path\n                ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                selectedPath: state.selectedPath\n            });\n        }\n    }\n\n\n    render() {\n        if (this.props.multipleSelection) {\n            return React.createElement(PickerData, {\n                ...this.props,\n                openPaths: this.state.openPaths,\n                selectedPaths: this.state.selectedPaths,\n                onOpenItem: this.onOpenItem.bind(this, this.state),\n                onSelectItem: this.onSelectItem.bind(this, this.state)\n            })\n        } else {\n            return React.createElement(PickerData, {\n                ...this.props,\n                openPaths: this.state.openPaths,\n                selectedPath: this.state.selectedPath,\n                onOpenItem: this.onOpenItem.bind(this, this.state),\n                onSelectItem: this.onSelectItem.bind(this, this.state)\n            })\n        }\n    }\n}\n\nPickerState.propTypes = {\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n};\n\nexport { PickerState }\n","import React from 'react';\nimport {PickerRedux} from './PickerRedux'\nimport {PickerState} from './PickerState'\nimport PropTypes from 'prop-types';\n\nlet Picker = function(props) {\n    let Picker = props.pickerType === \"state\" ? PickerState : PickerRedux;\n    return (<Picker {...props} />);\n};\n\nPicker.propTypes = {\n    /**\n     * Identifier for the picker redux store\n     */\n    id: PropTypes.string,\n\n    /**\n     * Type of internal state storage - either redux (can be shared) or internal state\n     */\n    pickerType: PropTypes.oneOf(['state', 'redux']),\n\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n\n};\n\nPicker.defaultProps = {\n    rootPaths: ['/'],\n    openableTypes:['nt:base'],\n    selectableTypes:['nt:base']\n};\n\nexport { Picker };","import React from 'react';\nimport PropTypes from 'prop-types';\n\nlet PickerView = function (props) {\n    return (\n        <div>\n            {props.pickerEntries.map((entry) => (\n                <div key={entry.path} style={{marginLeft: (10* entry.depth)+'px'}}>\n                    <input type=\"checkbox\" checked={ entry.open } onChange={(event) => props.onOpenItem(entry.path, event.target.checked)}/>\n                    <input type=\"checkbox\" checked={ entry.selected } onChange={(event) => props.onSelectItem(entry.path, event.target.checked)}/>\n                    <span>{props['textRenderer'] ? props['textRenderer'].call(this,entry) : entry.name}</span>\n                </div>\n            ))}\n        </div>\n    )\n};\n\nPickerView.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nexport { PickerView };","import React from 'react';\nimport {Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableCell>Name</TableCell>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableCell>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableCell>\n        </TableRow>);\n\n    return (<Table>\n                <TableHead>\n                    {headers()}\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>)\n};\n\nNodesTableViewMaterial.propTypes = {\n    headers: PropTypes.func,\n    row: PropTypes.func,\n    textRenderer: PropTypes.func,\n    nodes: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {NodesTableViewMaterial} from './NodesTableViewMaterial'\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass NodesTableData extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let nodes = [];\n\n        let jcr = data.jcr;\n\n        if (jcr) {\n            if (jcr.node) {\n                nodes = jcr.node.children.nodes;\n            }\n        }\n\n        return {\n            ...ownProps,\n            nodes: nodes,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let vars = {\n            path: props.path,\n            types: props.types,\n        };\n        if (props.variables) {\n            _.assign(vars, props.variables);\n        }\n\n        return {\n            variables: vars,\n            skip: !props.path\n        }\n    }\n\n    render() {\n        let fragments = this.props.fragments;\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => JSON.stringify(f.fragments) === JSON.stringify(fragments) && f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query NodesQuery($path:String!, $types:[String]!) {\n                    jcr {\n                        node:nodeByPath(path: $path) {\n                            path\n                            uuid\n                            name\n                            children(typesFilter:{types:$types}) {\n                                nodes {\n                                    path\n                                    uuid\n                                    name\n                                    ... node\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            replaceFragmentsInDocument(query, fragments);\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || NodesTableViewMaterial);\n\n            this.componentCache.push({fragments: fragments, renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider  client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nNodesTableData.propTypes = {\n    /**\n     * Path of the nodes to display\n     */\n    path: PropTypes.string,\n\n    /**\n     * List of node types of nodes to display\n     */\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * Function that returns a <TableRow> component for the header\n     */\n    headers: PropTypes.func,\n\n    /**\n     * Function that returns a <TableRow> component for a row, takes a JCR node as parameter\n     */\n    row: PropTypes.func,\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the table\n     */\n    renderComponent: PropTypes.func,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n};\n\nexport { NodesTableData };\n","import React from 'react';\nimport {NodesTableData} from './NodesTableData'\nimport {connect, Provider} from 'react-redux'\nimport {reducers, store} from \"../reduxStore\";\nimport PropTypes from 'prop-types';\n\nclass NodesTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.NodesTableWithoutStore = connect(this.mapStateToProps, this.mapDispatchToProps)(NodesTableData);\n    }\n\n    mapStateToProps(state, ownProps) {\n        return {\n            ...ownProps,\n            path: state[\"selectedPath_\"+ ownProps.id] ? state[\"selectedPath_\"+ ownProps.id] : ownProps.defaultPath,\n        }\n    };\n\n    mapDispatchToProps(dispatch, ownProps) {\n        return {\n        }\n    };\n\n    componentWillMount() {\n    }\n\n    componentWillUnmount() {\n    }\n\n    render() {\n        let NodesTableWithoutStore = this.NodesTableWithoutStore;\n        return (<Provider store={ store }><NodesTableWithoutStore {...this.props}/></Provider>)\n    }\n}\n\nNodesTable.propTypes = {\n    /**\n     * Id of the redux store where the selected path is taken\n     */\n    id: PropTypes.string,\n\n    /**\n     * Path of the nodes to display\n     */\n    defaultPath: PropTypes.string,\n\n    /**\n     * List of node types of nodes to display\n     */\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * Function that returns a <TableRow> component for the header\n     */\n    headers: PropTypes.func,\n\n    /**\n     * Function that returns a <TableRow> component for a row, takes a JCR node as parameter\n     */\n    row: PropTypes.func,\n\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the table\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n};\n\nexport { NodesTable };\n","import React from 'react';\nimport {Grid, Paper} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet TestLayout = function (props) {\n    return (<Grid container>\n        <Grid item xs={12} md={6}>\n            <Paper> {props.leftCol}</Paper>\n        </Grid>\n        <Grid item xs={12} md={6}>\n            <Paper>{props.rightCol}</Paper>\n        </Grid>\n    </Grid>);\n};\n\n\nTestLayout.propTypes = {\n    leftCol: PropTypes.element,\n    rightCol: PropTypes.element\n};\n\nexport {TestLayout};","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nlet baseHistory = createHashHistory();\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {Button, Dialog, DialogTitle , DialogContent, DialogActions} from 'material-ui';\nimport * as _ from \"lodash\";\nimport {OutletRouter as Router} from '../router/router'\nimport {Link, Route} from 'react-router-dom'\n\nclass Engine extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n        };\n        this.components = [\n            {\n                link:\"/link1\",\n                label:\"Link 1\",\n                component: (props) => <div>toto</div>\n            },\n            {\n                link:\"/link2\",\n                label:\"Link 2\",\n                component: (props) => (<div>titi</div>)\n            }\n        ];\n    }\n\n    handleOpen() {\n        this.setState({open: true});\n    };\n\n    handleClose() {\n        this.setState({open: false});\n    };\n\n    render() {\n        return (\n            <div>\n                <Button onClick={()=>this.handleOpen()}>Open</Button>\n                <Dialog\n                    open={this.state.open}\n                    onClose={()=>this.handleClose()}\n                >\n                    <DialogTitle>Dialog</DialogTitle>\n                    <DialogContent>\n                    <Router outlet={\"outlet1\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                    <Router outlet={\"outlet2\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button primary={true} onClick={()=>this.handleClose()}>Cancel</Button>,\n                        <Button primary={true} onClick={()=>this.handleClose()}>Submit</Button>\n                    </DialogActions>\n                </Dialog>\n\n            </div>);\n    }\n\n\n}\n\nexport {Engine}\n","import React from 'react';\nimport {OutletRouter as Router} from './router'\nimport {Link, Route} from 'react-router-dom'\n\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (<div>Test1 {props.match.params.value}</div>)\n        let Test2 = props => (<div>Test2</div>);\n        let Test3 = props => (<div>Test3</div>);\n\n        return (<Router outlet={this.props.id}>\n            <div>\n\n                ---- links : ----\n                <Link to={'/test1/toto'}>Test1 toto</Link> -\n                <Link to={'/test1/tutu'}>Test1 tutu</Link> -\n                <Link to={'/test2'}>Test2</Link> -\n                <Link to={'/test3'}>Test3</Link> -\n\n                <Router outlet=\"new\">\n                    <div>\n                        <Link to={'/test1'}>Test1/other</Link> -\n                        <Link to={'/test2'}>Test2/other</Link>\n                    </div>\n                </Router>\n                ---- routes : ----\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n\n                <Router outlet=\"new\">\n                    <div>\n                        <Route path={'/test1'} component={Test1}/>\n                        <Route path={'/test2'} component={Test2}/>\n                    </div>\n                </Router>\n\n                ------------------\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {client} from \"@jahia/apollo-dx\";\nimport {NodesTableData} from \"../nodesTable/NodesTableData\";\nimport {Button, Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n        let fragment = gql`fragment Test on JCRNode {\n            myprop:property(name:\"myprop\") {\n                value\n            }\n        }`;\n\n        // let query = gql`query GetNode($path:String!) {\n        //     jcr {\n        //         nodeByPath(path:$path) {\n        //             uuid\n        //             path\n        //             ...Test\n        //         }\n        //     }\n        // } ${fragment}`;\n        //\n        // let update = (proxy, mutationResult) => {\n        //     let updatedPath = mutationResult.data.jcr.mutateNode.node.path;\n        //\n        //     let variables = {path:updatedPath};\n        //     const data = proxy.readQuery({query, variables});\n        //\n        //     delete data.jcr.nodeByPath.myprop;\n        //\n        //     debugger;\n        //\n        //     proxy.writeQuery({query, variables, data});\n        // }\n\n\n        let frags = [{\n            applyFor: \"node\",\n            gql: fragment\n        }];\n\n        let RenderComponent = (props) => (<Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Update</TableCell>\n                        <TableCell>Delete</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableCell>{node.name}</TableCell>\n                            <TableCell>{node.myprop.value}</TableCell>\n                            <TableCell><Button onClick={() => this.props.setPropertyMutation({\n                                variables:{\n                                    path:node.path,\n                                    value:(\"test:\"+new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}>Update</Button></TableCell>\n                            <TableCell><Button onClick={() => this.props.removeNodeMutation({\n                                variables:{\n                                    path:node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}>Delete</Button></TableCell>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        );\n\n        return (\n            <div>\n            <Button onClick={() => this.props.addNodeMutation({\n                variables:{\n                    name:(\"name-\"+(new Date().getTime())),\n                    value:(\"test:\"+new Date())\n                },\n                refetchQueries: [\"NodesQuery\"]\n            })} >New</Button>\n\n            <NodesTableData path={\"/\"} types={[\"nt:unstructured\"]} fragments={frags} renderComponent={RenderComponent}/>\n            </div>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path) \n        }\n    }\n`;\n\nclass MutationExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.Component =\n            graphql(setProperty, { name: 'setPropertyMutation' })(\n                graphql(addNode, { name: 'addNodeMutation' })(\n                    graphql(removeNode, { name: 'removeNodeMutation' })(MutationExampleView)));\n    }\n\n    render() {\n        let Component = this.Component;\n        return (<ApolloProvider client={client}><Component/></ApolloProvider>)\n    }\n}\n\nexport { MutationExample};","import {createMuiTheme} from 'material-ui';\nimport * as _ from \"lodash\";\n\nvar indigo = {\n    50: '#e8eaf6',\n    100: '#c5cae9',\n    200: '#9fa8da',\n    300: '#7986cb',\n    400: '#5c6bc0',\n    500: '#3f51b5',\n    600: '#3949ab',\n    700: '#303f9f',\n    800: '#283593',\n    900: '#1a237e',\n    A100: '#8c9eff',\n    A200: '#536dfe',\n    A400: '#3d5afe',\n    A700: '#304ffe'\n};\n\nvar pink = {\n    50: '#fce4ec',\n    100: '#f8bbd0',\n    200: '#f48fb1',\n    300: '#f06292',\n    400: '#ec407a',\n    500: '#e91e63',\n    600: '#d81b60',\n    700: '#c2185b',\n    800: '#ad1457',\n    900: '#880e4f',\n    A100: '#ff80ab',\n    A200: '#ff4081',\n    A400: '#f50057',\n    A700: '#c51162'\n};\n\nvar red = {\n    50: '#ffebee',\n    100: '#ffcdd2',\n    200: '#ef9a9a',\n    300: '#e57373',\n    400: '#ef5350',\n    500: '#f44336',\n    600: '#e53935',\n    700: '#d32f2f',\n    800: '#c62828',\n    900: '#b71c1c',\n    A100: '#ff8a80',\n    A200: '#ff5252',\n    A400: '#ff1744',\n    A700: '#d50000'\n};\n\nconst theme = createMuiTheme();\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\n// const theme = createMuiTheme({\n//     palette: {\n//         contrastThreshold: 3.1,\n//         tonalOffset: 0.07,\n//         primary: {\n//             light: indigo[300],\n//             main: indigo[500],\n//             dark: indigo[700],\n//             contrastText: defaultTheme.palette.getContrastText(indigo[500]),\n//         },\n//         secondary: {\n//             light: pink.A200,\n//             main: pink.A400,\n//             dark: pink.A700,\n//             contrastText: defaultTheme.palette.getContrastText(pink.A400),\n//         },\n//         error: red.A400,\n//     },\n// });\nconsole.log(theme);\nexport { theme }\n"],"names":["SimpleListView","props","state","components","done","then","reactElements","setState","componentDidMount","React","Component","DynamicComponentsList","componentCache","data","ownProps","jcr","safeEval","eval","nodesByQuery","_","nodes","n","renderedView","output","imports","concat","c","getImports","promise","length","Promise","all","imp","SystemJS","import","s","r","createElement","ReactDOM","m","splice","id","renderComponent","cacheMatch","f","dataComponent","query","gql","graphql","mapResultsToProps","mapPropsToOptions","push","client","propTypes","PropTypes","string","isRequired","element","PickerViewMaterial","pickerEntries","map","entry","selectable","onSelectItem","path","selected","onOpenItem","open","opacity","RadioButtonChecked","RadioButtonUnchecked","ListItemText","paddingLeft","depth","theme","spacing","unit","call","name","openable","hasChildren","ExpandLess","ExpandMore","array","func","withTheme","PickerViewMaterialMultiple","CheckBox","CheckBoxOutlineBlank","PickerData","selectedPaths","multipleSelection","selectedPath","openPaths","nodesById","addNode","node","index","pickerNode","children","pageInfo","totalCount","uuid","rootNodes","root","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","child","selectedNodes","fullyOpenPath","rootFound","reduce","acc","it","rootPaths","rootPath","vars","openableTypes","selectableTypes","variables","fragments","JSON","stringify","arrayOf","bool","oneOfType","shape","object","reducers","store","debugTool","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","action","value","key","resetStateReducer","type","undefined","PickerRedux","PickerReduxWithoutStore","connect","mapStateToProps","mapDispatchToProps","dispatch","select","indexOf","filter","PickerState","thispath","bind","Picker","pickerType","oneOf","defaultProps","PickerView","marginLeft","event","target","checked","NodesTableViewMaterial","headers","row","NodesTableData","types","NodesTable","NodesTableWithoutStore","defaultPath","TestLayout","leftCol","rightCol","createOutletHistory","baseHistory","outletName","getPath","parts","base","location","pathname","newPath","substr","split","p","startsWith","getState","newState","extractPath","part","initialLocation","listeners","history","createHref","replace","go","goBack","goForward","prompt","block","listener","unlisten","listen","assign","createHashHistory","OutletRouter","outletHistory","outlet","dispose","Engine","handleOpen","handleClose","e","link","label","Route","component","RouterExample","Test1","match","params","Test2","Test3","MutationExampleView","fragment","frags","RenderComponent","myprop","setPropertyMutation","Date","removeNodeMutation","addNodeMutation","getTime","setProperty","removeNode","MutationExample","createMuiTheme","console","log"],"mappings":"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"}