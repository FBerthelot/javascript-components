{"version":3,"file":"react-dxcomponents.umd.js","sources":["../src/javascript/i18n/getI18n.js","../src/javascript/reduxStore.js","../src/javascript/theme.js","../src/javascript/router/createOutletHistory.js","../src/javascript/router/OutletRouter.js","../src/javascript/router/RouterExample.jsx","../src/javascript/context/DxContextProvider.jsx","../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/i18n/LanguageSwitcher.jsx","../src/javascript/layout/TestLayout.jsx","../src/javascript/nodesTable/withNodesFromPath.jsx","../src/javascript/mutations/Mutation.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/nodesTable/withPathFromSelection.jsx","../src/javascript/picker/withPickerModel.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx"],"sourcesContent":["import i18n from 'i18next';\nimport XHR from 'i18next-xhr-backend';\n// import LanguageDetector from 'i18next-browser-languagedetector/';\nimport { reactI18nextModule } from 'react-i18next';\n\nfunction getI18n(options) {\n    options = options || {};\n    i18n\n        .use(XHR)\n        // .use(LanguageDetector)\n        // .use(reactI18nextModule) // if not using I18nextProvider\n        .init({\n            lng: (options.currentLanguage ? options.currentLanguage : undefined),\n            fallbackLng: 'en',\n            debug: true,\n\n            interpolation: {\n                escapeValue: false, // not needed for react!!\n            },\n\n            // react i18next special options (optional)\n            react: {\n                wait: false,\n                bindI18n: 'languageChanged loaded',\n                bindStore: 'added removed',\n                nsMode: 'default'\n            },\n\n            backend: {\n                loadPath: (options.contextPath ? options.contextPath : '') + '/modules/{{ns}}/javascript/locales/{{lng}}.json',\n            }\n        });\n    return i18n;\n}\n\n\nexport { getI18n };","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import {createMuiTheme} from 'material-ui';\nimport * as _ from \"lodash\";\n\nvar indigo = {\n    50: '#e8eaf6',\n    100: '#c5cae9',\n    200: '#9fa8da',\n    300: '#7986cb',\n    400: '#5c6bc0',\n    500: '#3f51b5',\n    600: '#3949ab',\n    700: '#303f9f',\n    800: '#283593',\n    900: '#1a237e',\n    A100: '#8c9eff',\n    A200: '#536dfe',\n    A400: '#3d5afe',\n    A700: '#304ffe'\n};\n\nvar pink = {\n    50: '#fce4ec',\n    100: '#f8bbd0',\n    200: '#f48fb1',\n    300: '#f06292',\n    400: '#ec407a',\n    500: '#e91e63',\n    600: '#d81b60',\n    700: '#c2185b',\n    800: '#ad1457',\n    900: '#880e4f',\n    A100: '#ff80ab',\n    A200: '#ff4081',\n    A400: '#f50057',\n    A700: '#c51162'\n};\n\nvar red = {\n    50: '#ffebee',\n    100: '#ffcdd2',\n    200: '#ef9a9a',\n    300: '#e57373',\n    400: '#ef5350',\n    500: '#f44336',\n    600: '#e53935',\n    700: '#d32f2f',\n    800: '#c62828',\n    900: '#b71c1c',\n    A100: '#ff8a80',\n    A200: '#ff5252',\n    A400: '#ff1744',\n    A700: '#d50000'\n};\n\nconst theme = createMuiTheme();\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\n// const theme = createMuiTheme({\n//     palette: {\n//         contrastThreshold: 3.1,\n//         tonalOffset: 0.07,\n//         primary: {\n//             light: indigo[300],\n//             main: indigo[500],\n//             dark: indigo[700],\n//             contrastText: defaultTheme.palette.getContrastText(indigo[500]),\n//         },\n//         secondary: {\n//             light: pink.A200,\n//             main: pink.A400,\n//             dark: pink.A700,\n//             contrastText: defaultTheme.palette.getContrastText(pink.A400),\n//         },\n//         error: red.A400,\n//     },\n// });\n\nexport { theme }\n","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nlet baseHistory = createHashHistory();\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {OutletRouter as Router} from './OutletRouter'\nimport {Link, Route} from 'react-router-dom'\nimport {Paper, Typography} from 'material-ui'\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 1\n                </Typography>\n                <Typography component=\"p\">\n                    Param = {props.match.params.value}\n                </Typography>\n            </Paper>\n        );\n        let Test2 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 2\n                </Typography>\n            </Paper>\n\n        );\n        let Test3 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 3\n                </Typography>\n            </Paper>\n        );\n\n        return (<Router outlet={this.props.id}>\n            <div>\n                <Link to={'/test1/value1'}>test1/value1</Link>\n                <Link to={'/test1/value2'}>Test1/value2</Link>\n                <Link to={'/test2'}>test2</Link>\n                <Link to={'/test3'}>test3</Link>\n\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React from 'react';\nimport {MuiThemeProvider} from 'material-ui';\nimport {getI18n} from \"../i18n/getI18n\";\nimport {store} from '../reduxStore';\nimport {theme} from '../theme'\nimport {client} from '@jahia/apollo-dx';\nimport {ApolloProvider} from 'react-apollo';\nimport {Provider} from 'react-redux'\nimport {I18nextProvider} from 'react-i18next'\nimport {HashRouter} from 'react-router-dom'\nimport {OutletRouter} from '../router'\nimport PropTypes from 'prop-types';\n\nclass DxContextProvider extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    getChildContext() {\n        return {dxContext: this.props.dxContext};\n    }\n\n    render() {\n        let {dxContext, children, i18n, apollo, redux, mui, router} = this.props;\n\n        let Component = React.Children.only(children);\n        if (i18n) {\n            let options = {currentLanguage:dxContext.uilang, contextPath:dxContext.contextPath};\n            if (typeof i18n === 'object') {\n                Object.assign(options, i18n)\n            }\n            Component = React.createElement(I18nextProvider, {i18n:getI18n(options)}, Component);\n        }\n        if (router) {\n            let router = HashRouter;\n            let options = {};\n            if (typeof router === 'object') {\n                if (router.type === 'outlet') {\n                    router = OutletRouter;\n                    options.outlet = router.outlet;\n                }\n            }\n            Component = React.createElement(HashRouter, options, Component);\n        }\n        if (apollo) {\n            let options = {contextPath:dxContext.contextPath};\n            if (typeof apollo === 'object') {\n                Object.assign(options, apollo)\n            }\n            Component = React.createElement(ApolloProvider, {client:client(options)}, Component);\n        }\n        if (redux) {\n            Component = React.createElement(Provider, {store:store}, Component);\n        }\n        if (mui) {\n            Component = React.createElement(MuiThemeProvider, {theme:theme}, Component);\n        }\n        return Component;\n    }\n}\n\nDxContextProvider.childContextTypes = {\n    dxContext: PropTypes.object\n};\n\nexport {DxContextProvider}","import React from 'react';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<div>{this.state.reactElements}</div>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedView.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedView(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<Component {...this.props} />);\n    }\n}\n\nDynamicComponentsList.propTypes = {\n    /**\n     * Id of the \"componentsFolder\" to look for\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Component to use to do the rendering\n     */\n    renderComponent: PropTypes.element\n}\n\nexport {DynamicComponentsList};\n","import React from 'react';\nimport {Button, Menu, MenuItem} from 'material-ui';\nimport {translate} from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nclass LanguageSwitcher extends React.Component {\n\n    constructor(props,context) {\n        super(props,context);\n        this.state = {\n            anchorEl: null,\n        };\n    }\n\n    handleClick(event) {\n        this.setState({anchorEl: event.target});\n    }\n\n    handleClose(lang) {\n        this.setState({anchorEl: null});\n        if (lang) {\n            this.context.i18n.changeLanguage(lang);\n        }\n    };\n\n    render() {\n        let availableLocales = ['fr', 'en'];\n\n        return (<div>\n            <Button onClick={this.handleClick.bind(this)}\n            >{this.props.t('label.languages')}</Button>\n            <Menu open={Boolean(this.state.anchorEl)} onClose={this.handleClose.bind(this, null)}\n                  anchorEl={this.state.anchorEl}>\n                {availableLocales.map((locale) => (\n                    <MenuItem onClick={this.handleClose.bind(this, locale)} key={locale}\n                              value={locale}>{locale}</MenuItem>))}\n            </Menu>\n        </div>);\n    }\n}\n\nLanguageSwitcher.contextTypes = {\n    i18n: PropTypes.object\n};\n\nLanguageSwitcher = translate('react-dxcomponents')(LanguageSwitcher);\n\n\nexport {LanguageSwitcher}\n","import React from 'react';\nimport {Grid, Paper} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet TestLayout = function (props) {\n    return (<Grid container>\n        <Grid item xs={12} md={6}>\n            <Paper> {props.leftCol}</Paper>\n        </Grid>\n        <Grid item xs={12} md={6}>\n            <Paper>{props.rightCol}</Paper>\n        </Grid>\n    </Grid>);\n};\n\n\nTestLayout.propTypes = {\n    leftCol: PropTypes.element,\n    rightCol: PropTypes.element\n};\n\nexport {TestLayout};","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nfunction withNodesFromPath(fragments) {\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let nodes = [];\n\n            let jcr = data.jcr;\n\n            if (jcr) {\n                if (jcr.node) {\n                    nodes = jcr.node.children.nodes;\n                }\n            }\n\n            return {\n                ...ownProps,\n                nodes: nodes,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let vars = {\n                path: props.path,\n                types: props.types,\n            };\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars,\n                skip: !props.path\n            }\n        };\n\n        let query = gql`\n            query NodesQuery($path:String!, $types:[String]!) {\n                jcr {\n                    node:nodeByPath(path: $path) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        return graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n    }\n}\n\nexport {withNodesFromPath};\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {withNodesFromPath} from \"../nodesTable/withNodesFromPath\";\nimport {Button, Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let RenderComponent = (props) => (<Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Update</TableCell>\n                        <TableCell>Delete</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableCell>{node.name}</TableCell>\n                            <TableCell>{node.myprop.value}</TableCell>\n                            <TableCell><Button onClick={() => this.props.setPropertyMutation({\n                                variables: {\n                                    path: node.path,\n                                    value: (\"test:\" + new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}>Update</Button></TableCell>\n                            <TableCell><Button onClick={() => this.props.removeNodeMutation({\n                                variables: {\n                                    path: node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}>Delete</Button></TableCell>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        );\n\n        this.Component = withNodesFromPath([{\n            applyFor: \"node\",\n            gql: gql`fragment Test on JCRNode {\n                myprop:property(name:\"myprop\") {\n                    value\n                }\n            }`\n        }])(RenderComponent);\n    }\n\n\n    render() {\n        let Component = this.Component;\n        return (\n            <div>\n                <Button onClick={() => this.props.addNodeMutation({\n                    variables: {\n                        name: (\"name-\" + (new Date().getTime())),\n                        value: (\"test:\" + new Date())\n                    },\n                    refetchQueries: [\"NodesQuery\"]\n                })}>New</Button>\n\n                <Component path={\"/\"} types={[\"nt:unstructured\"]}/>\n            </div>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path)\n        }\n    }\n`;\n\nlet MutationExample = graphql(setProperty, {name: 'setPropertyMutation'})(\n    graphql(addNode, {name: 'addNodeMutation'})(\n        graphql(removeNode, {name: 'removeNodeMutation'})(MutationExampleView)));\n\nexport {MutationExample};","import React from 'react';\nimport {Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableCell>Name</TableCell>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableCell>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableCell>\n        </TableRow>);\n\n    return (<Table>\n                <TableHead>\n                    {headers()}\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>)\n};\n\nNodesTableViewMaterial.propTypes = {\n    headers: PropTypes.func,\n    row: PropTypes.func,\n    textRenderer: PropTypes.func,\n    nodes: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\n\nfunction withPathFromSelection(reduxStoreId) {\n    return (WrappedComponent) => {\n        return connect(\n            (state, ownProps) => ({\n                ...ownProps,\n                path: (state[\"selectedPaths_\" + reduxStoreId] && state[\"selectedPaths_\" + reduxStoreId].length === 1) ? state[\"selectedPaths_\" + reduxStoreId][0] : null,\n            }),\n            () => ({}))(WrappedComponent);\n    }\n}\n\nexport { withPathFromSelection }","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\nimport {reducers, resetStateReducer, store} from \"../reduxStore\";\n\nfunction withPickerModel(fragments, reduxStoreId) {\n\n\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let selectedPaths = ownProps.selectedPaths;\n            let openPaths = ownProps.openPaths ? ownProps.openPaths : [];\n\n            let pickerEntries = [];\n            let nodesById = {};\n            let jcr = data.jcr;\n\n            let addNode = function (node, depth, index) {\n                let selected = false;\n                if (node.selectable) {\n                    selected = _.indexOf(selectedPaths, node.path) !== -1\n                }\n                let pickerNode = {\n                    name: node.name,\n                    path: node.path,\n                    open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                    selected: selected,\n                    openable: node.openable,\n                    selectable: node.selectable,\n                    depth: depth,\n                    prefix: _.repeat(\"&nbsp;\", depth * 3),\n                    node: node,\n                    hidden: false,\n                    hasChildren: node.children.pageInfo.totalCount > 0\n                };\n                pickerEntries.splice(index, 0, pickerNode);\n                nodesById[node.uuid] = pickerNode;\n                return pickerNode;\n            };\n\n            if (jcr) {\n                if (jcr.rootNodes) {\n                    _.forEach(jcr.rootNodes, rootNode => {\n                        let root = addNode(rootNode, 0, 0);\n                        root.hidden = ownProps.hideRoot;\n                    });\n                }\n                if (jcr.openNodes) {\n                    _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                        let parent = nodesById[node.uuid];\n                        if (parent) {\n                            let parentIndex = _.indexOf(pickerEntries, parent);\n                            _.forEachRight(node.children.nodes, (child) => {\n                                addNode(child, parent.depth + 1, parentIndex + 1)\n                            })\n                        }\n                    });\n                }\n            }\n\n            // Nodes loaded, fill selection list\n            let selectedNodes = _.filter(pickerEntries, (node) => {\n                return node.selected\n            }).map((node) => {\n                return node.node\n            });\n\n            selectedPaths = _.map(selectedNodes, \"path\");\n            pickerEntries = _.filter(pickerEntries, pickerNode => {\n                return !pickerNode.hidden;\n            });\n            return {\n                ...ownProps,\n                pickerEntries: pickerEntries,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let openPaths = props.openPaths ? props.openPaths : [];\n\n            let fullyOpenPath = (props, path) => {\n                let rootFound = false;\n                _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                    if (!rootFound) {\n                        _.forEach(props.rootPaths, rootPath => {\n                            rootFound = rootFound || _.startsWith(acc, rootPath);\n                        })\n                    }\n                    if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                        openPaths.push(acc);\n                    }\n                    return acc + \"/\" + it\n                }, \"\");\n            };\n\n            if (props.selectedPaths) {\n                _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n            }\n\n            let vars = {\n                rootPaths: props.rootPaths,\n                types: _.union(props.openableTypes, props.selectableTypes),\n                selectable: props.selectableTypes,\n                openable: props.openableTypes,\n                openPaths: openPaths,\n            };\n\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars\n            }\n        };\n\n        let query = gql`\n            query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                jcr {\n                    rootNodes:nodesByPath(paths: $rootPaths) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}, limit:1) {\n                            pageInfo {\n                                totalCount\n                            }\n                        }\n                        selectable : isNodeType(type: {types:$selectable})\n                        openable : isNodeType(type: {types:$openable})\n                        ... node\n                    },\n                    openNodes:nodesByPath(paths: $openPaths) {\n                        path\n                        uuid\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                children(typesFilter:{types:$types}, limit:1) {\n                                    pageInfo {\n                                        totalCount\n                                    }\n                                }\n                                selectable : isNodeType(type: {types:$selectable})\n                                openable : isNodeType(type: {types:$openable})\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        let GraphQLComponent = graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n\n\n        if (reduxStoreId) {\n            // Redux map\n            let mapStateToProps = (state, ownProps) => {\n                return {\n                    ...ownProps,\n                    openPaths: state[\"openPaths_\" + reduxStoreId] ? state[\"openPaths_\" + reduxStoreId] : ownProps.openPaths,\n                    selectedPaths: state[\"selectedPaths_\" + reduxStoreId] ? state[\"selectedPaths_\" + reduxStoreId] : ownProps.selectedPaths\n                }\n            };\n\n            let mapDispatchToProps = (dispatch, ownProps) => {\n                return {\n                    onSelectItem(path, select, multiple) {\n                        dispatch({\n                            type: select ? 'SELECT_PICKER_ENTRY_' + (multiple ? \"MULTIPLE_\" : \"SINGLE_\") + reduxStoreId : 'UNSELECT_PICKER_ENTRY_' + reduxStoreId,\n                            path: path\n                        })\n                    },\n                    onOpenItem(path, open) {\n                        dispatch({\n                            type: open ? 'OPEN_PICKER_ENTRY_' + reduxStoreId : 'CLOSE_PICKER_ENTRY_' + reduxStoreId,\n                            path: path\n                        })\n                    }\n                }\n            };\n\n            let ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(GraphQLComponent);\n\n            return class extends React.Component {\n                constructor(props) {\n                    super(props);\n                }\n\n                componentWillMount() {\n                    // Setup reducers\n                    reducers[\"openPaths_\" + reduxStoreId] = (state = this.props.openPaths || [], action) => {\n                        let index = state.indexOf(action.path);\n                        if (action.type === 'OPEN_PICKER_ENTRY_' + reduxStoreId && index === -1) {\n                            return [\n                                ...state,\n                                action.path\n                            ]\n                        } else if (action.type === 'CLOSE_PICKER_ENTRY_' + reduxStoreId && index !== -1) {\n                            return _.filter(state, (path) => path !== action.path);\n                        }\n                        return state;\n                    };\n                    reducers[\"selectedPaths_\" + reduxStoreId] = (state = this.props.selectedPaths || [], action) => {\n                        let index = state.indexOf(action.path);\n                        if (action.type === 'SELECT_PICKER_ENTRY_MULTIPLE_' + reduxStoreId && index === -1) {\n                            return [\n                                ...state,\n                                action.path\n                            ]\n                        } else if (action.type === 'SELECT_PICKER_ENTRY_SINGLE_' + reduxStoreId) {\n                            return [action.path];\n                        } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + reduxStoreId && index !== -1) {\n                            return _.filter(state, (path) => path !== action.path);\n                        }\n                        return state;\n                    };\n                }\n\n                componentWillUnmount() {\n                    reducers[\"openPaths_\" + reduxStoreId] = resetStateReducer;\n                    reducers[\"selectedPaths_\" + reduxStoreId] = resetStateReducer;\n\n                    store.dispatch({type: \"RESET_STATE\"});\n\n                    delete reducers[\"openPaths_\" + reduxStoreId];\n                    delete reducers[\"selectedPaths_\" + reduxStoreId];\n                }\n\n                render() {\n                    return (<ConnectedComponent {...this.props}/>)\n                }\n            };\n        } else {\n            return class extends React.Component {\n                constructor(props) {\n                    super(props);\n                    this.state = {\n                        openPaths: props.openPaths ? props.openPaths : [],\n                        selectedPaths: props.selectedPaths ? props.selectedPaths : (props.selectedPath ? [props.selectedPath] : [])\n                    };\n                }\n\n                onSelectItem(state, path, selected, multiple) {\n                    this.setState({\n                        openPaths: state.openPaths,\n                        selectedPaths: selected ? [\n                            ...(multiple ? state.selectedPaths : []),\n                            path\n                        ] : _.filter(state.selectedPaths, (thispath) => thispath !== path),\n                    });\n                }\n\n                onOpenItem(state, path, open) {\n                    this.setState({\n                        openPaths: open ? [\n                            ...state.openPaths,\n                            path\n                        ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                        selectedPaths: state.selectedPaths\n                    });\n                }\n\n\n                render() {\n                    return <GraphQLComponent {...this.props}\n                                             onOpenItem={this.onOpenItem.bind(this, this.state)}\n                                             onSelectItem={this.onSelectItem.bind(this, this.state)}\n                                             openPaths={this.state.openPaths}\n                                             selectedPaths={this.state.selectedPaths}\n                    />;\n                }\n\n            }\n        }\n    }\n}\n\n// PickerData.propTypes = {\n//     /**\n//      * List of root paths for the picker\n//      */\n//     rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * List of folder paths that are open\n//      */\n//     openPaths: PropTypes.arrayOf(PropTypes.string),\n//\n//     /**\n//      * List of node types that can be \"opened\" (folders)\n//      */\n//     openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * List of node types that can be \"selected\" (items)\n//      */\n//     selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * If the picker allows multiple selection\n//      */\n//     multipleSelection: PropTypes.bool,\n//\n//     /**\n//      * Preselected item path (for single selection picker)\n//      */\n//     selectedPath: PropTypes.string,\n//\n//     /**\n//      * Preselected items path (for multiple selection picker)\n//      */\n//     selectedPaths: PropTypes.arrayOf(PropTypes.string),\n//\n//     /**\n//      * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n//      */\n//     textRenderer: PropTypes.func,\n//\n//     /**\n//      * Component to use to do the full rendering of the tree\n//      */\n//     renderComponent: PropTypes.element,\n//\n//     /**\n//      * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n//      */\n//     fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n//         PropTypes.string,\n//         PropTypes.shape({\n//             applyFor: PropTypes.string.isRequired,\n//             variables: PropTypes.string,\n//             gql: PropTypes.object.isRequired\n//         })\n//     ])),\n//\n//     /**\n//      * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n//      */\n//     variables: PropTypes.object\n//\n// };\n//\n\nexport {withPickerModel};\n","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, RadioButtonChecked, RadioButtonUnchecked} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterial = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <RadioButtonChecked/> :\n                        <RadioButtonUnchecked/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem: PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func\n};\n\nPickerViewMaterial = withTheme()(PickerViewMaterial);\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, CheckBoxOutlineBlank, CheckBox} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected, true) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <CheckBox/> :\n                        <CheckBoxOutlineBlank/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nPickerViewMaterialMultiple = withTheme()(PickerViewMaterialMultiple);\n\nexport { PickerViewMaterialMultiple };"],"names":["getI18n","options","use","XHR","init","currentLanguage","undefined","contextPath","i18n","reducers","store","debugTool","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","state","action","_","value","key","resetStateReducer","type","theme","createMuiTheme","createOutletHistory","baseHistory","outletName","getPath","path","parts","base","location","pathname","newPath","indexOf","substr","split","p","startsWith","push","getState","newState","extractPath","s","part","length","initialLocation","listeners","history","createHref","replace","n","go","goBack","goForward","prompt","block","listener","unlisten","listen","event","assign","call","createHashHistory","OutletRouter","props","outletHistory","outlet","dispose","React","children","Component","RouterExample","Test1","match","params","Test2","Test3","id","Route","DxContextProvider","dxContext","apollo","redux","mui","router","Children","only","uilang","createElement","I18nextProvider","HashRouter","ApolloProvider","client","Provider","MuiThemeProvider","childContextTypes","PropTypes","object","SimpleListView","components","done","then","reactElements","setState","componentDidMount","DynamicComponentsList","componentCache","data","ownProps","jcr","safeEval","eval","nodesByQuery","nodes","renderedView","output","imports","concat","c","getImports","promise","Promise","all","imp","SystemJS","import","r","ReactDOM","m","splice","renderComponent","cacheMatch","f","dataComponent","query","gql","graphql","mapResultsToProps","mapPropsToOptions","propTypes","string","isRequired","element","LanguageSwitcher","context","anchorEl","target","lang","changeLanguage","availableLocales","handleClick","bind","t","Boolean","handleClose","map","locale","contextTypes","translate","TestLayout","leftCol","rightCol","withNodesFromPath","fragments","ViewComponent","node","vars","types","queryVariables","MutationExampleView","RenderComponent","uuid","name","myprop","setPropertyMutation","Date","removeNodeMutation","addNodeMutation","getTime","setProperty","addNode","removeNode","MutationExample","NodesTableViewMaterial","headers","row","func","arrayOf","withPathFromSelection","reduxStoreId","WrappedComponent","connect","withPickerModel","selectedPaths","openPaths","pickerEntries","nodesById","depth","index","selected","selectable","pickerNode","openable","pageInfo","totalCount","rootNodes","root","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","child","selectedNodes","fullyOpenPath","rootFound","reduce","acc","it","rootPaths","rootPath","openableTypes","selectableTypes","GraphQLComponent","mapStateToProps","mapDispatchToProps","dispatch","select","multiple","open","ConnectedComponent","selectedPath","thispath","onOpenItem","onSelectItem","PickerViewMaterial","entry","opacity","RadioButtonChecked","RadioButtonUnchecked","ListItemText","paddingLeft","spacing","unit","hasChildren","ExpandLess","ExpandMore","array","withTheme","PickerViewMaterialMultiple","CheckBox","CheckBoxOutlineBlank"],"mappings":"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"}