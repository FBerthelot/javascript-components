{"version":3,"sources":["../src/javascript/i18n/getI18n.js","../src/javascript/reduxStore.js","../src/javascript/theme.js","../src/javascript/router/createOutletHistory.js","../src/javascript/router/OutletRouter.js","../src/javascript/router/RouterExample.jsx","../src/javascript/context/DxContextProvider.jsx","../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/i18n/LanguageSwitcher.jsx","../src/javascript/layout/TestLayout.jsx","../src/javascript/nodesTable/withNodesFromPath.jsx","../src/javascript/mutations/Mutation.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/nodesTable/withPathFromSelection.jsx","../src/javascript/picker/withPickerModel.jsx"],"names":["getI18n","options","use","XHR","init","currentLanguage","undefined","contextPath","i18n","reducers","store","debugTool","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","state","arguments","length","action","_","value","key","resetStateReducer","type","theme","createMuiTheme","console","log","createOutletHistory","baseHistory","outletName","getPath","path","parts","base","location","pathname","newPath","indexOf","substr","split","p","startsWith","push","getState","newState","extractPath","s","part","initialLocation","listeners","history","createHref","replace","n","go","goBack","goForward","prompt","block","listener","unlisten","listen","event","assign","call","_this","createHashHistory","OutletRouter","props","outletHistory","outlet","dispose","React","this","children","Component","RouterExample","id","to","Route","component","elevation","match","params","DxContextProvider","dxContext","_props","apollo","redux","mui","router","Children","only","uilang","_typeof","createElement","I18nextProvider","HashRouter","ApolloProvider","client","Provider","MuiThemeProvider","childContextTypes","PropTypes","object","SimpleListView","components","done","then","reactElements","setState","componentDidMount","DynamicComponentsList","componentCache","data","_ref","ownProps","jcr","safeEval","eval","nodesByQuery","nodes","renderedView","output","imports","c","concat","getImports","promise","Promise","all","imp","SystemJS","import","m","r","apply","ReactDOM","toConsumableArray","splice","renderComponent","cacheMatch","f","dataComponent","query","gql","_templateObject","graphql","mapResultsToProps","mapPropsToOptions","propTypes","string","isRequired","element","LanguageSwitcher","context","anchorEl","target","lang","changeLanguage","onClick","handleClick","bind","t","open","Boolean","onClose","handleClose","map","locale","_this2","contextTypes","translate","TestLayout","container","item","xs","md","leftCol","rightCol","withNodesFromPath","fragments","ViewComponent","_templateObject$2","node","vars","types","queryVariables","MutationExampleView","_templateObject$1","uuid","name","myprop","setPropertyMutation","Date","removeNodeMutation","addNodeMutation","getTime","setProperty","_templateObject2","addNode","_templateObject3","removeNode","_templateObject4","MutationExample","NodesTableViewMaterial","headers","row","func","arrayOf","PickerViewMaterial","pickerEntries","entry","button","selectable","onSelectItem","selected","onOpenItem","style","opacity","RadioButtonChecked","RadioButtonUnchecked","ListItemText","paddingLeft","depth","spacing","unit","inset","openable","hasChildren","ExpandLess","ExpandMore","array","withTheme","PickerViewMaterialMultiple","CheckBox","CheckBoxOutlineBlank","reduxStoreId","WrappedComponent","connect","_templateObject$3","GraphQLComponent","selectedPaths","openPaths","nodesById","index","pickerNode","pageInfo","totalCount","rootNodes","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","child","selectedNodes","rootFound","reduce","acc","it","rootPaths","rootPath","fullyOpenPath","openableTypes","selectableTypes","ConnectedComponent","dispatch","select","multiple","selectedPath","thispath","_extends"],"mappings":"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","sourcesContent":["import i18n from 'i18next';\nimport XHR from 'i18next-xhr-backend';\n// import LanguageDetector from 'i18next-browser-languagedetector/';\nimport { reactI18nextModule } from 'react-i18next';\n\nfunction getI18n(options) {\n    options = options || {};\n    i18n\n        .use(XHR)\n        // .use(LanguageDetector)\n        // .use(reactI18nextModule) // if not using I18nextProvider\n        .init({\n            lng: (options.currentLanguage ? options.currentLanguage : undefined),\n            fallbackLng: 'en',\n            debug: true,\n\n            interpolation: {\n                escapeValue: false, // not needed for react!!\n            },\n\n            // react i18next special options (optional)\n            react: {\n                wait: false,\n                bindI18n: 'languageChanged loaded',\n                bindStore: 'added removed',\n                nsMode: 'default'\n            },\n\n            backend: {\n                loadPath: (options.contextPath ? options.contextPath : '') + '/modules/{{ns}}/javascript/locales/{{lng}}.json',\n            }\n        });\n    return i18n;\n}\n\n\nexport { getI18n };","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import {createMuiTheme} from 'material-ui';\nimport * as _ from \"lodash\";\n\nvar indigo = {\n    50: '#e8eaf6',\n    100: '#c5cae9',\n    200: '#9fa8da',\n    300: '#7986cb',\n    400: '#5c6bc0',\n    500: '#3f51b5',\n    600: '#3949ab',\n    700: '#303f9f',\n    800: '#283593',\n    900: '#1a237e',\n    A100: '#8c9eff',\n    A200: '#536dfe',\n    A400: '#3d5afe',\n    A700: '#304ffe'\n};\n\nvar pink = {\n    50: '#fce4ec',\n    100: '#f8bbd0',\n    200: '#f48fb1',\n    300: '#f06292',\n    400: '#ec407a',\n    500: '#e91e63',\n    600: '#d81b60',\n    700: '#c2185b',\n    800: '#ad1457',\n    900: '#880e4f',\n    A100: '#ff80ab',\n    A200: '#ff4081',\n    A400: '#f50057',\n    A700: '#c51162'\n};\n\nvar red = {\n    50: '#ffebee',\n    100: '#ffcdd2',\n    200: '#ef9a9a',\n    300: '#e57373',\n    400: '#ef5350',\n    500: '#f44336',\n    600: '#e53935',\n    700: '#d32f2f',\n    800: '#c62828',\n    900: '#b71c1c',\n    A100: '#ff8a80',\n    A200: '#ff5252',\n    A400: '#ff1744',\n    A700: '#d50000'\n};\n\nconst theme = createMuiTheme();\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\n// const theme = createMuiTheme({\n//     palette: {\n//         contrastThreshold: 3.1,\n//         tonalOffset: 0.07,\n//         primary: {\n//             light: indigo[300],\n//             main: indigo[500],\n//             dark: indigo[700],\n//             contrastText: defaultTheme.palette.getContrastText(indigo[500]),\n//         },\n//         secondary: {\n//             light: pink.A200,\n//             main: pink.A400,\n//             dark: pink.A700,\n//             contrastText: defaultTheme.palette.getContrastText(pink.A400),\n//         },\n//         error: red.A400,\n//     },\n// });\nconsole.log(theme);\nexport { theme }\n","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nlet baseHistory = createHashHistory();\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {OutletRouter as Router} from './OutletRouter'\nimport {Link, Route} from 'react-router-dom'\nimport {Paper, Typography} from 'material-ui'\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 1\n                </Typography>\n                <Typography component=\"p\">\n                    Param = {props.match.params.value}\n                </Typography>\n            </Paper>\n        );\n        let Test2 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 2\n                </Typography>\n            </Paper>\n\n        );\n        let Test3 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 3\n                </Typography>\n            </Paper>\n        );\n\n        return (<Router outlet={this.props.id}>\n            <div>\n                <Link to={'/test1/value1'}>test1/value1</Link>\n                <Link to={'/test1/value2'}>Test1/value2</Link>\n                <Link to={'/test2'}>test2</Link>\n                <Link to={'/test3'}>test3</Link>\n\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React from 'react';\nimport {MuiThemeProvider} from 'material-ui';\nimport {getI18n} from \"../i18n/getI18n\";\nimport {store} from '../reduxStore';\nimport {theme} from '../theme'\nimport {client} from '@jahia/apollo-dx';\nimport {ApolloProvider} from 'react-apollo';\nimport {Provider} from 'react-redux'\nimport {I18nextProvider} from 'react-i18next'\nimport {HashRouter} from 'react-router-dom'\nimport {OutletRouter} from '../router'\nimport PropTypes from 'prop-types';\n\nclass DxContextProvider extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    getChildContext() {\n        return {dxContext: this.props.dxContext};\n    }\n\n    render() {\n        let {dxContext, children, i18n, apollo, redux, mui, router} = this.props;\n\n        let Component = React.Children.only(children);\n        if (i18n) {\n            let options = {currentLanguage:dxContext.uilang, contextPath:dxContext.contextPath};\n            if (typeof i18n === 'object') {\n                Object.assign(options, i18n)\n            }\n            Component = React.createElement(I18nextProvider, {i18n:getI18n(options)}, Component);\n        }\n        if (router) {\n            let router = HashRouter;\n            let options = {};\n            if (typeof router === 'object') {\n                if (router.type === 'outlet') {\n                    router = OutletRouter;\n                    options.outlet = router.outlet;\n                }\n            }\n            Component = React.createElement(HashRouter, options, Component);\n        }\n        if (apollo) {\n            let options = {contextPath:dxContext.contextPath};\n            if (typeof apollo === 'object') {\n                Object.assign(options, apollo)\n            }\n            Component = React.createElement(ApolloProvider, {client:client(options)}, Component);\n        }\n        if (redux) {\n            Component = React.createElement(Provider, {store:store}, Component);\n        }\n        if (mui) {\n            Component = React.createElement(MuiThemeProvider, {theme:theme}, Component);\n        }\n        return Component;\n    }\n}\n\nDxContextProvider.childContextTypes = {\n    dxContext: PropTypes.object\n};\n\nexport {DxContextProvider}","import React from 'react';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<div>{this.state.reactElements}</div>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedView.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedView(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<Component {...this.props} />);\n    }\n}\n\nDynamicComponentsList.propTypes = {\n    /**\n     * Id of the \"componentsFolder\" to look for\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Component to use to do the rendering\n     */\n    renderComponent: PropTypes.element\n}\n\nexport {DynamicComponentsList};\n","import React from 'react';\nimport {Button, Menu, MenuItem} from 'material-ui';\nimport {translate} from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nclass LanguageSwitcher extends React.Component {\n\n    constructor(props,context) {\n        super(props,context);\n        this.state = {\n            anchorEl: null,\n        };\n    }\n\n    handleClick(event) {\n        this.setState({anchorEl: event.target});\n    }\n\n    handleClose(lang) {\n        this.setState({anchorEl: null});\n        if (lang) {\n            this.context.i18n.changeLanguage(lang);\n        }\n    };\n\n    render() {\n        let availableLocales = ['fr', 'en'];\n\n        return (<div>\n            <Button onClick={this.handleClick.bind(this)}\n            >{this.props.t('label.languages')}</Button>\n            <Menu open={Boolean(this.state.anchorEl)} onClose={this.handleClose.bind(this, null)}\n                  anchorEl={this.state.anchorEl}>\n                {availableLocales.map((locale) => (\n                    <MenuItem onClick={this.handleClose.bind(this, locale)} key={locale}\n                              value={locale}>{locale}</MenuItem>))}\n            </Menu>\n        </div>);\n    }\n}\n\nLanguageSwitcher.contextTypes = {\n    i18n: PropTypes.object\n};\n\nLanguageSwitcher = translate('react-dxcomponents')(LanguageSwitcher);\n\n\nexport {LanguageSwitcher}\n","import React from 'react';\nimport {Grid, Paper} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet TestLayout = function (props) {\n    return (<Grid container>\n        <Grid item xs={12} md={6}>\n            <Paper> {props.leftCol}</Paper>\n        </Grid>\n        <Grid item xs={12} md={6}>\n            <Paper>{props.rightCol}</Paper>\n        </Grid>\n    </Grid>);\n};\n\n\nTestLayout.propTypes = {\n    leftCol: PropTypes.element,\n    rightCol: PropTypes.element\n};\n\nexport {TestLayout};","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nfunction withNodesFromPath(fragments) {\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let nodes = [];\n\n            let jcr = data.jcr;\n\n            if (jcr) {\n                if (jcr.node) {\n                    nodes = jcr.node.children.nodes;\n                }\n            }\n\n            return {\n                ...ownProps,\n                nodes: nodes,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let vars = {\n                path: props.path,\n                types: props.types,\n            };\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars,\n                skip: !props.path\n            }\n        };\n\n        let query = gql`\n            query NodesQuery($path:String!, $types:[String]!) {\n                jcr {\n                    node:nodeByPath(path: $path) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        return graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n    }\n}\n\nexport {withNodesFromPath};\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {withNodesFromPath} from \"../nodesTable/withNodesFromPath\";\nimport {Button, Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let RenderComponent = (props) => (<Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Update</TableCell>\n                        <TableCell>Delete</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableCell>{node.name}</TableCell>\n                            <TableCell>{node.myprop.value}</TableCell>\n                            <TableCell><Button onClick={() => this.props.setPropertyMutation({\n                                variables: {\n                                    path: node.path,\n                                    value: (\"test:\" + new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}>Update</Button></TableCell>\n                            <TableCell><Button onClick={() => this.props.removeNodeMutation({\n                                variables: {\n                                    path: node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}>Delete</Button></TableCell>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        );\n\n        this.Component = withNodesFromPath([{\n            applyFor: \"node\",\n            gql: gql`fragment Test on JCRNode {\n                myprop:property(name:\"myprop\") {\n                    value\n                }\n            }`\n        }])(RenderComponent);\n    }\n\n\n    render() {\n        let Component = this.Component;\n        return (\n            <div>\n                <Button onClick={() => this.props.addNodeMutation({\n                    variables: {\n                        name: (\"name-\" + (new Date().getTime())),\n                        value: (\"test:\" + new Date())\n                    },\n                    refetchQueries: [\"NodesQuery\"]\n                })}>New</Button>\n\n                <Component path={\"/\"} types={[\"nt:unstructured\"]}/>\n            </div>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path)\n        }\n    }\n`;\n\nlet MutationExample = graphql(setProperty, {name: 'setPropertyMutation'})(\n    graphql(addNode, {name: 'addNodeMutation'})(\n        graphql(removeNode, {name: 'removeNodeMutation'})(MutationExampleView)));\n\nexport {MutationExample};","import React from 'react';\nimport {Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableCell>Name</TableCell>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableCell>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableCell>\n        </TableRow>);\n\n    return (<Table>\n                <TableHead>\n                    {headers()}\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>)\n};\n\nNodesTableViewMaterial.propTypes = {\n    headers: PropTypes.func,\n    row: PropTypes.func,\n    textRenderer: PropTypes.func,\n    nodes: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, RadioButtonChecked, RadioButtonUnchecked} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterial = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <RadioButtonChecked/> :\n                        <RadioButtonUnchecked/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem: PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func\n};\n\nPickerViewMaterial = withTheme()(PickerViewMaterial);\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, CheckBoxOutlineBlank, CheckBox} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected, true) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <CheckBox/> :\n                        <CheckBoxOutlineBlank/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nPickerViewMaterialMultiple = withTheme()(PickerViewMaterialMultiple);\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\n\nfunction withPathFromSelection(reduxStoreId) {\n    return (WrappedComponent) => {\n        return connect(\n            (state, ownProps) => ({\n                ...ownProps,\n                path: (state[\"selectedPaths_\" + reduxStoreId] && state[\"selectedPaths_\" + reduxStoreId].length === 1) ? state[\"selectedPaths_\" + reduxStoreId][0] : null,\n            }),\n            () => ({}))(WrappedComponent);\n    }\n}\n\nexport { withPathFromSelection }","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\nimport {reducers, resetStateReducer, store} from \"../reduxStore\";\n\nfunction withPickerModel(fragments, reduxStoreId) {\n\n\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let selectedPaths = ownProps.selectedPaths;\n            let openPaths = ownProps.openPaths ? ownProps.openPaths : [];\n\n            let pickerEntries = [];\n            let nodesById = {};\n            let jcr = data.jcr;\n\n            let addNode = function (node, depth, index) {\n                let selected = false;\n                if (node.selectable) {\n                    selected = _.indexOf(selectedPaths, node.path) !== -1\n                }\n                let pickerNode = {\n                    name: node.name,\n                    path: node.path,\n                    open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                    selected: selected,\n                    openable: node.openable,\n                    selectable: node.selectable,\n                    depth: depth,\n                    prefix: _.repeat(\"&nbsp;\", depth * 3),\n                    node: node,\n                    hidden: false,\n                    hasChildren: node.children.pageInfo.totalCount > 0\n                };\n                pickerEntries.splice(index, 0, pickerNode);\n                nodesById[node.uuid] = pickerNode;\n                return pickerNode;\n            };\n\n            if (jcr) {\n                if (jcr.rootNodes) {\n                    _.forEach(jcr.rootNodes, rootNode => {\n                        let root = addNode(rootNode, 0, 0);\n                        root.hidden = ownProps.hideRoot;\n                    });\n                }\n                if (jcr.openNodes) {\n                    _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                        let parent = nodesById[node.uuid];\n                        if (parent) {\n                            let parentIndex = _.indexOf(pickerEntries, parent);\n                            _.forEachRight(node.children.nodes, (child) => {\n                                addNode(child, parent.depth + 1, parentIndex + 1)\n                            })\n                        }\n                    });\n                }\n            }\n\n            // Nodes loaded, fill selection list\n            let selectedNodes = _.filter(pickerEntries, (node) => {\n                return node.selected\n            }).map((node) => {\n                return node.node\n            });\n\n            selectedPaths = _.map(selectedNodes, \"path\");\n            pickerEntries = _.filter(pickerEntries, pickerNode => {\n                return !pickerNode.hidden;\n            });\n            return {\n                ...ownProps,\n                pickerEntries: pickerEntries,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let openPaths = props.openPaths ? props.openPaths : [];\n\n            let fullyOpenPath = (props, path) => {\n                let rootFound = false;\n                _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                    if (!rootFound) {\n                        _.forEach(props.rootPaths, rootPath => {\n                            rootFound = rootFound || _.startsWith(acc, rootPath);\n                        })\n                    }\n                    if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                        openPaths.push(acc);\n                    }\n                    return acc + \"/\" + it\n                }, \"\");\n            };\n\n            if (props.selectedPaths) {\n                _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n            }\n\n            let vars = {\n                rootPaths: props.rootPaths,\n                types: _.union(props.openableTypes, props.selectableTypes),\n                selectable: props.selectableTypes,\n                openable: props.openableTypes,\n                openPaths: openPaths,\n            };\n\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars\n            }\n        };\n\n        let query = gql`\n            query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                jcr {\n                    rootNodes:nodesByPath(paths: $rootPaths) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}, limit:1) {\n                            pageInfo {\n                                totalCount\n                            }\n                        }\n                        selectable : isNodeType(type: {types:$selectable})\n                        openable : isNodeType(type: {types:$openable})\n                        ... node\n                    },\n                    openNodes:nodesByPath(paths: $openPaths) {\n                        path\n                        uuid\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                children(typesFilter:{types:$types}, limit:1) {\n                                    pageInfo {\n                                        totalCount\n                                    }\n                                }\n                                selectable : isNodeType(type: {types:$selectable})\n                                openable : isNodeType(type: {types:$openable})\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        let GraphQLComponent = graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n\n\n        if (reduxStoreId) {\n            // Redux map\n            let mapStateToProps = (state, ownProps) => {\n                return {\n                    ...ownProps,\n                    openPaths: state[\"openPaths_\" + reduxStoreId] ? state[\"openPaths_\" + reduxStoreId] : ownProps.openPaths,\n                    selectedPaths: state[\"selectedPaths_\" + reduxStoreId] ? state[\"selectedPaths_\" + reduxStoreId] : ownProps.selectedPaths\n                }\n            };\n\n            let mapDispatchToProps = (dispatch, ownProps) => {\n                return {\n                    onSelectItem(path, select, multiple) {\n                        dispatch({\n                            type: select ? 'SELECT_PICKER_ENTRY_' + (multiple ? \"MULTIPLE_\" : \"SINGLE_\") + reduxStoreId : 'UNSELECT_PICKER_ENTRY_' + reduxStoreId,\n                            path: path\n                        })\n                    },\n                    onOpenItem(path, open) {\n                        dispatch({\n                            type: open ? 'OPEN_PICKER_ENTRY_' + reduxStoreId : 'CLOSE_PICKER_ENTRY_' + reduxStoreId,\n                            path: path\n                        })\n                    }\n                }\n            };\n\n            let ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(GraphQLComponent);\n\n            return class extends React.Component {\n                constructor(props) {\n                    super(props);\n                }\n\n                componentWillMount() {\n                    // Setup reducers\n                    reducers[\"openPaths_\" + reduxStoreId] = (state = this.props.openPaths || [], action) => {\n                        let index = state.indexOf(action.path);\n                        if (action.type === 'OPEN_PICKER_ENTRY_' + reduxStoreId && index === -1) {\n                            return [\n                                ...state,\n                                action.path\n                            ]\n                        } else if (action.type === 'CLOSE_PICKER_ENTRY_' + reduxStoreId && index !== -1) {\n                            return _.filter(state, (path) => path !== action.path);\n                        }\n                        return state;\n                    };\n                    reducers[\"selectedPaths_\" + reduxStoreId] = (state = this.props.selectedPaths || [], action) => {\n                        let index = state.indexOf(action.path);\n                        if (action.type === 'SELECT_PICKER_ENTRY_MULTIPLE_' + reduxStoreId && index === -1) {\n                            return [\n                                ...state,\n                                action.path\n                            ]\n                        } else if (action.type === 'SELECT_PICKER_ENTRY_SINGLE_' + reduxStoreId) {\n                            return [action.path];\n                        } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + reduxStoreId && index !== -1) {\n                            return _.filter(state, (path) => path !== action.path);\n                        }\n                        return state;\n                    };\n                }\n\n                componentWillUnmount() {\n                    reducers[\"openPaths_\" + reduxStoreId] = resetStateReducer;\n                    reducers[\"selectedPaths_\" + reduxStoreId] = resetStateReducer;\n\n                    store.dispatch({type: \"RESET_STATE\"});\n\n                    delete reducers[\"openPaths_\" + reduxStoreId];\n                    delete reducers[\"selectedPaths_\" + reduxStoreId];\n                }\n\n                render() {\n                    return (<ConnectedComponent {...this.props}/>)\n                }\n            };\n        } else {\n            return class extends React.Component {\n                constructor(props) {\n                    super(props);\n                    this.state = {\n                        openPaths: props.openPaths ? props.openPaths : [],\n                        selectedPaths: props.selectedPaths ? props.selectedPaths : (props.selectedPath ? [props.selectedPath] : [])\n                    };\n                }\n\n                onSelectItem(state, path, selected, multiple) {\n                    this.setState({\n                        openPaths: state.openPaths,\n                        selectedPaths: selected ? [\n                            ...(multiple ? state.selectedPaths : []),\n                            path\n                        ] : _.filter(state.selectedPaths, (thispath) => thispath !== path),\n                    });\n                }\n\n                onOpenItem(state, path, open) {\n                    this.setState({\n                        openPaths: open ? [\n                            ...state.openPaths,\n                            path\n                        ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                        selectedPaths: state.selectedPaths\n                    });\n                }\n\n\n                render() {\n                    return <GraphQLComponent {...this.props}\n                                             onOpenItem={this.onOpenItem.bind(this, this.state)}\n                                             onSelectItem={this.onSelectItem.bind(this, this.state)}\n                                             openPaths={this.state.openPaths}\n                                             selectedPaths={this.state.selectedPaths}\n                    />;\n                }\n\n            }\n        }\n    }\n}\n\n// PickerData.propTypes = {\n//     /**\n//      * List of root paths for the picker\n//      */\n//     rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * List of folder paths that are open\n//      */\n//     openPaths: PropTypes.arrayOf(PropTypes.string),\n//\n//     /**\n//      * List of node types that can be \"opened\" (folders)\n//      */\n//     openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * List of node types that can be \"selected\" (items)\n//      */\n//     selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * If the picker allows multiple selection\n//      */\n//     multipleSelection: PropTypes.bool,\n//\n//     /**\n//      * Preselected item path (for single selection picker)\n//      */\n//     selectedPath: PropTypes.string,\n//\n//     /**\n//      * Preselected items path (for multiple selection picker)\n//      */\n//     selectedPaths: PropTypes.arrayOf(PropTypes.string),\n//\n//     /**\n//      * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n//      */\n//     textRenderer: PropTypes.func,\n//\n//     /**\n//      * Component to use to do the full rendering of the tree\n//      */\n//     renderComponent: PropTypes.element,\n//\n//     /**\n//      * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n//      */\n//     fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n//         PropTypes.string,\n//         PropTypes.shape({\n//             applyFor: PropTypes.string.isRequired,\n//             variables: PropTypes.string,\n//             gql: PropTypes.object.isRequired\n//         })\n//     ])),\n//\n//     /**\n//      * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n//      */\n//     variables: PropTypes.object\n//\n// };\n//\n\nexport {withPickerModel};\n"]}