{"version":3,"sources":["../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/reduxStore.js","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/nodesTable/withNodesFromPath.jsx","../src/javascript/layout/TestLayout.jsx","../src/javascript/router/createOutletHistory.js","../src/javascript/router/router.js","../src/javascript/engine/Engine.jsx","../src/javascript/router/RouterExample.jsx","../src/javascript/mutations/Mutation.jsx","../src/javascript/theme.js","../src/javascript/picker/withPickerModel.jsx","../src/javascript/nodesTable/withPathFromSelection.jsx"],"names":["SimpleListView","props","state","this","components","done","then","reactElements","setState","componentDidMount","React","Component","DynamicComponentsList","componentCache","data","_ref","ownProps","jcr","safeEval","eval","nodesByQuery","_","nodes","n","renderedView","output","imports","c","concat","getImports","promise","length","Promise","all","imp","SystemJS","import","m","s","r","createElement","apply","ReactDOM","toConsumableArray","splice","id","renderComponent","cacheMatch","f","dataComponent","query","gql","_templateObject","graphql","mapResultsToProps","mapPropsToOptions","push","client","propTypes","PropTypes","string","isRequired","element","reducers","store","debugTool","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","arguments","undefined","action","value","key","resetStateReducer","type","PickerViewMaterial","pickerEntries","map","entry","button","selectable","onSelectItem","path","selected","onOpenItem","open","style","opacity","RadioButtonChecked","RadioButtonUnchecked","ListItemText","paddingLeft","depth","theme","spacing","unit","inset","call","_this","name","openable","hasChildren","onClick","ExpandLess","ExpandMore","array","func","withTheme","PickerViewMaterialMultiple","CheckBox","CheckBoxOutlineBlank","NodesTableViewMaterial","headers","row","node","arrayOf","object","withNodesFromPath","fragments","ViewComponent","_templateObject$2","children","vars","types","queryVariables","TestLayout","container","item","xs","md","leftCol","rightCol","createOutletHistory","baseHistory","outletName","getPath","parts","base","location","pathname","newPath","indexOf","substr","split","p","startsWith","getState","newState","extractPath","part","initialLocation","listeners","history","createHref","replace","go","goBack","goForward","prompt","block","listener","unlisten","listen","event","assign","createHashHistory","OutletRouter","outletHistory","outlet","dispose","Engine","_this2","handleOpen","handleClose","e","link","to","label","Route","component","RouterExample","elevation","match","params","MutationExampleView","_templateObject$3","uuid","myprop","setPropertyMutation","Date","removeNodeMutation","addNodeMutation","getTime","setProperty","_templateObject2","addNode","_templateObject3","removeNode","_templateObject4","MutationExample","createMuiTheme","console","log","reduxStoreId","_templateObject$1","GraphQLComponent","selectedPaths","openPaths","nodesById","index","pickerNode","pageInfo","totalCount","rootNodes","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","child","selectedNodes","rootFound","reduce","acc","it","rootPaths","rootPath","fullyOpenPath","openableTypes","selectableTypes","ConnectedComponent","connect","dispatch","select","multiple","selectedPath","thispath","_extends","bind","WrappedComponent"],"mappings":"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","sourcesContent":["import React from 'react';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<div>{this.state.reactElements}</div>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedView.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedView(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nDynamicComponentsList.propTypes = {\n    /**\n     * Id of the \"componentsFolder\" to look for\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Component to use to do the rendering\n     */\n    renderComponent: PropTypes.element\n}\n\nexport {DynamicComponentsList};\n","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, RadioButtonChecked, RadioButtonUnchecked} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterial = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <RadioButtonChecked/> :\n                        <RadioButtonUnchecked/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem: PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func\n};\n\nPickerViewMaterial = withTheme()(PickerViewMaterial);\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, CheckBoxOutlineBlank, CheckBox} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected, true) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <CheckBox/> :\n                        <CheckBoxOutlineBlank/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nPickerViewMaterialMultiple = withTheme()(PickerViewMaterialMultiple);\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableCell>Name</TableCell>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableCell>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableCell>\n        </TableRow>);\n\n    return (<Table>\n                <TableHead>\n                    {headers()}\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>)\n};\n\nNodesTableViewMaterial.propTypes = {\n    headers: PropTypes.func,\n    row: PropTypes.func,\n    textRenderer: PropTypes.func,\n    nodes: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nfunction withNodesFromPath(fragments) {\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let nodes = [];\n\n            let jcr = data.jcr;\n\n            if (jcr) {\n                if (jcr.node) {\n                    nodes = jcr.node.children.nodes;\n                }\n            }\n\n            return {\n                ...ownProps,\n                nodes: nodes,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let vars = {\n                path: props.path,\n                types: props.types,\n            };\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars,\n                skip: !props.path\n            }\n        };\n\n        let query = gql`\n            query NodesQuery($path:String!, $types:[String]!) {\n                jcr {\n                    node:nodeByPath(path: $path) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        return graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n    }\n}\n\nexport {withNodesFromPath};\n","import React from 'react';\nimport {Grid, Paper} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet TestLayout = function (props) {\n    return (<Grid container>\n        <Grid item xs={12} md={6}>\n            <Paper> {props.leftCol}</Paper>\n        </Grid>\n        <Grid item xs={12} md={6}>\n            <Paper>{props.rightCol}</Paper>\n        </Grid>\n    </Grid>);\n};\n\n\nTestLayout.propTypes = {\n    leftCol: PropTypes.element,\n    rightCol: PropTypes.element\n};\n\nexport {TestLayout};","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nlet baseHistory = createHashHistory();\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {Button, Dialog, DialogTitle , DialogContent, DialogActions} from 'material-ui';\nimport * as _ from \"lodash\";\nimport {OutletRouter as Router} from '../router/router'\nimport {Link, Route} from 'react-router-dom'\n\nclass Engine extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n        };\n        this.components = [\n            {\n                link:\"/link1\",\n                label:\"Link 1\",\n                component: (props) => <div>toto</div>\n            },\n            {\n                link:\"/link2\",\n                label:\"Link 2\",\n                component: (props) => (<div>titi</div>)\n            }\n        ];\n    }\n\n    handleOpen() {\n        this.setState({open: true});\n    };\n\n    handleClose() {\n        this.setState({open: false});\n    };\n\n    render() {\n        return (\n            <div>\n                <Button onClick={()=>this.handleOpen()}>Open</Button>\n                <Dialog\n                    open={this.state.open}\n                    onClose={()=>this.handleClose()}\n                >\n                    <DialogTitle>Dialog</DialogTitle>\n                    <DialogContent>\n                    <Router outlet={\"outlet1\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                    <Router outlet={\"outlet2\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={()=>this.handleClose()}>Cancel</Button>,\n                        <Button onClick={()=>this.handleClose()}>Submit</Button>\n                    </DialogActions>\n                </Dialog>\n\n            </div>);\n    }\n\n\n}\n\nexport {Engine}\n","import React from 'react';\nimport {OutletRouter as Router} from './router'\nimport {Link, Route} from 'react-router-dom'\nimport {Paper, Typography} from 'material-ui'\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 1\n                </Typography>\n                <Typography component=\"p\">\n                    Paper can be used to build surface or other elements for your application.\n                    Param = {props.match.params.value}\n                </Typography>\n            </Paper>\n        );\n        let Test2 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 2\n                </Typography>\n            </Paper>\n\n        );\n        let Test3 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 3\n                </Typography>\n            </Paper>\n        );\n\n        return (<Router outlet={this.props.id}>\n            <div>\n                <Link to={'/test1/toto'}>test1/value1</Link>\n                <Link to={'/test1/tutu'}>Test1/value2</Link>\n                <Link to={'/test2'}>test2</Link>\n                <Link to={'/test3'}>test3</Link>\n\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {client} from \"@jahia/apollo-dx\";\nimport {withNodesFromPath} from \"../nodesTable/withNodesFromPath\";\nimport {Button, Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let RenderComponent = (props) => (<Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Update</TableCell>\n                        <TableCell>Delete</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableCell>{node.name}</TableCell>\n                            <TableCell>{node.myprop.value}</TableCell>\n                            <TableCell><Button onClick={() => this.props.setPropertyMutation({\n                                variables:{\n                                    path:node.path,\n                                    value:(\"test:\"+new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}>Update</Button></TableCell>\n                            <TableCell><Button onClick={() => this.props.removeNodeMutation({\n                                variables:{\n                                    path:node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}>Delete</Button></TableCell>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        );\n\n        this.Component = withNodesFromPath([{\n            applyFor: \"node\",\n            gql: gql`fragment Test on JCRNode {\n            myprop:property(name:\"myprop\") {\n                value\n            }\n        }`\n        }])(RenderComponent);\n    }\n\n\n    render() {\n        let Component = this.Component;\n        return (\n            <div>\n            <Button onClick={() => this.props.addNodeMutation({\n                variables:{\n                    name:(\"name-\"+(new Date().getTime())),\n                    value:(\"test:\"+new Date())\n                },\n                refetchQueries: [\"NodesQuery\"]\n            })} >New</Button>\n\n            <Component path={\"/\"} types={[\"nt:unstructured\"]}/>\n            </div>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path) \n        }\n    }\n`;\n\nclass MutationExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.Component =\n            graphql(setProperty, { name: 'setPropertyMutation' })(\n                graphql(addNode, { name: 'addNodeMutation' })(\n                    graphql(removeNode, { name: 'removeNodeMutation' })(MutationExampleView)));\n    }\n\n    render() {\n        let Component = this.Component;\n        return (<ApolloProvider client={client}><Component/></ApolloProvider>)\n    }\n}\n\nexport { MutationExample};","import {createMuiTheme} from 'material-ui';\nimport * as _ from \"lodash\";\n\nvar indigo = {\n    50: '#e8eaf6',\n    100: '#c5cae9',\n    200: '#9fa8da',\n    300: '#7986cb',\n    400: '#5c6bc0',\n    500: '#3f51b5',\n    600: '#3949ab',\n    700: '#303f9f',\n    800: '#283593',\n    900: '#1a237e',\n    A100: '#8c9eff',\n    A200: '#536dfe',\n    A400: '#3d5afe',\n    A700: '#304ffe'\n};\n\nvar pink = {\n    50: '#fce4ec',\n    100: '#f8bbd0',\n    200: '#f48fb1',\n    300: '#f06292',\n    400: '#ec407a',\n    500: '#e91e63',\n    600: '#d81b60',\n    700: '#c2185b',\n    800: '#ad1457',\n    900: '#880e4f',\n    A100: '#ff80ab',\n    A200: '#ff4081',\n    A400: '#f50057',\n    A700: '#c51162'\n};\n\nvar red = {\n    50: '#ffebee',\n    100: '#ffcdd2',\n    200: '#ef9a9a',\n    300: '#e57373',\n    400: '#ef5350',\n    500: '#f44336',\n    600: '#e53935',\n    700: '#d32f2f',\n    800: '#c62828',\n    900: '#b71c1c',\n    A100: '#ff8a80',\n    A200: '#ff5252',\n    A400: '#ff1744',\n    A700: '#d50000'\n};\n\nconst theme = createMuiTheme();\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\n// const theme = createMuiTheme({\n//     palette: {\n//         contrastThreshold: 3.1,\n//         tonalOffset: 0.07,\n//         primary: {\n//             light: indigo[300],\n//             main: indigo[500],\n//             dark: indigo[700],\n//             contrastText: defaultTheme.palette.getContrastText(indigo[500]),\n//         },\n//         secondary: {\n//             light: pink.A200,\n//             main: pink.A400,\n//             dark: pink.A700,\n//             contrastText: defaultTheme.palette.getContrastText(pink.A400),\n//         },\n//         error: red.A400,\n//     },\n// });\nconsole.log(theme);\nexport { theme }\n","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\nimport {reducers, resetStateReducer, store} from \"../reduxStore\";\n\nfunction withPickerModel(fragments, reduxStoreId) {\n\n\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let selectedPaths = ownProps.selectedPaths;\n            let openPaths = ownProps.openPaths ? ownProps.openPaths : [];\n\n            let pickerEntries = [];\n            let nodesById = {};\n            let jcr = data.jcr;\n\n            let addNode = function (node, depth, index) {\n                let selected = false;\n                if (node.selectable) {\n                    selected = _.indexOf(selectedPaths, node.path) !== -1\n                }\n                let pickerNode = {\n                    name: node.name,\n                    path: node.path,\n                    open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                    selected: selected,\n                    openable: node.openable,\n                    selectable: node.selectable,\n                    depth: depth,\n                    prefix: _.repeat(\"&nbsp;\", depth * 3),\n                    node: node,\n                    hidden: false,\n                    hasChildren: node.children.pageInfo.totalCount > 0\n                };\n                pickerEntries.splice(index, 0, pickerNode);\n                nodesById[node.uuid] = pickerNode;\n                return pickerNode;\n            };\n\n            if (jcr) {\n                if (jcr.rootNodes) {\n                    _.forEach(jcr.rootNodes, rootNode => {\n                        let root = addNode(rootNode, 0, 0);\n                        root.hidden = ownProps.hideRoot;\n                    });\n                }\n                if (jcr.openNodes) {\n                    _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                        let parent = nodesById[node.uuid];\n                        if (parent) {\n                            let parentIndex = _.indexOf(pickerEntries, parent);\n                            _.forEachRight(node.children.nodes, (child) => {\n                                addNode(child, parent.depth + 1, parentIndex + 1)\n                            })\n                        }\n                    });\n                }\n            }\n\n            // Nodes loaded, fill selection list\n            let selectedNodes = _.filter(pickerEntries, (node) => {\n                return node.selected\n            }).map((node) => {\n                return node.node\n            });\n\n            selectedPaths = _.map(selectedNodes, \"path\");\n            pickerEntries = _.filter(pickerEntries, pickerNode => {\n                return !pickerNode.hidden;\n            });\n            return {\n                ...ownProps,\n                pickerEntries: pickerEntries,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let openPaths = props.openPaths ? props.openPaths : [];\n\n            let fullyOpenPath = (props, path) => {\n                let rootFound = false;\n                _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                    if (!rootFound) {\n                        _.forEach(props.rootPaths, rootPath => {\n                            rootFound = rootFound || _.startsWith(acc, rootPath);\n                        })\n                    }\n                    if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                        openPaths.push(acc);\n                    }\n                    return acc + \"/\" + it\n                }, \"\");\n            };\n\n            if (props.selectedPaths) {\n                _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n            }\n\n            let vars = {\n                rootPaths: props.rootPaths,\n                types: _.union(props.openableTypes, props.selectableTypes),\n                selectable: props.selectableTypes,\n                openable: props.openableTypes,\n                openPaths: openPaths,\n            };\n\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars\n            }\n        };\n\n        let query = gql`\n            query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                jcr {\n                    rootNodes:nodesByPath(paths: $rootPaths) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}, limit:1) {\n                            pageInfo {\n                                totalCount\n                            }\n                        }\n                        selectable : isNodeType(type: {types:$selectable})\n                        openable : isNodeType(type: {types:$openable})\n                        ... node\n                    },\n                    openNodes:nodesByPath(paths: $openPaths) {\n                        path\n                        uuid\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                children(typesFilter:{types:$types}, limit:1) {\n                                    pageInfo {\n                                        totalCount\n                                    }\n                                }\n                                selectable : isNodeType(type: {types:$selectable})\n                                openable : isNodeType(type: {types:$openable})\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        let GraphQLComponent = graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n\n\n        if (reduxStoreId) {\n            // Redux map\n            let mapStateToProps = (state, ownProps) => {\n                return {\n                    ...ownProps,\n                    openPaths: state[\"openPaths_\" + reduxStoreId] ? state[\"openPaths_\" + reduxStoreId] : ownProps.openPaths,\n                    selectedPaths: state[\"selectedPaths_\" + reduxStoreId] ? state[\"selectedPaths_\" + reduxStoreId] : ownProps.selectedPaths\n                }\n            };\n\n            let mapDispatchToProps = (dispatch, ownProps) => {\n                return {\n                    onSelectItem(path, select, multiple) {\n                        dispatch({\n                            type: select ? 'SELECT_PICKER_ENTRY_' + (multiple ? \"MULTIPLE_\" : \"SINGLE_\") + reduxStoreId : 'UNSELECT_PICKER_ENTRY_' + reduxStoreId,\n                            path: path\n                        })\n                    },\n                    onOpenItem(path, open) {\n                        dispatch({\n                            type: open ? 'OPEN_PICKER_ENTRY_' + reduxStoreId : 'CLOSE_PICKER_ENTRY_' + reduxStoreId,\n                            path: path\n                        })\n                    }\n                }\n            };\n\n            let ConnectedComponent = connect(mapStateToProps, mapDispatchToProps)(GraphQLComponent);\n\n            return class extends React.Component {\n                constructor(props) {\n                    super(props);\n                }\n\n                componentWillMount() {\n                    // Setup reducers\n                    reducers[\"openPaths_\" + reduxStoreId] = (state = this.props.openPaths || [], action) => {\n                        let index = state.indexOf(action.path);\n                        if (action.type === 'OPEN_PICKER_ENTRY_' + reduxStoreId && index === -1) {\n                            return [\n                                ...state,\n                                action.path\n                            ]\n                        } else if (action.type === 'CLOSE_PICKER_ENTRY_' + reduxStoreId && index !== -1) {\n                            return _.filter(state, (path) => path !== action.path);\n                        }\n                        return state;\n                    };\n                    reducers[\"selectedPaths_\" + reduxStoreId] = (state = this.props.selectedPaths || [], action) => {\n                        let index = state.indexOf(action.path);\n                        if (action.type === 'SELECT_PICKER_ENTRY_MULTIPLE_' + reduxStoreId && index === -1) {\n                            return [\n                                ...state,\n                                action.path\n                            ]\n                        } else if (action.type === 'SELECT_PICKER_ENTRY_SINGLE_' + reduxStoreId) {\n                            return [action.path];\n                        } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + reduxStoreId && index !== -1) {\n                            return _.filter(state, (path) => path !== action.path);\n                        }\n                        return state;\n                    };\n                }\n\n                componentWillUnmount() {\n                    reducers[\"openPaths_\" + reduxStoreId] = resetStateReducer;\n                    reducers[\"selectedPaths_\" + reduxStoreId] = resetStateReducer;\n\n                    store.dispatch({type: \"RESET_STATE\"});\n\n                    delete reducers[\"openPaths_\" + reduxStoreId];\n                    delete reducers[\"selectedPaths_\" + reduxStoreId];\n                }\n\n                render() {\n                    return (<ConnectedComponent {...this.props}/>)\n                }\n            };\n        } else {\n            return class extends React.Component {\n                constructor(props) {\n                    super(props);\n                    this.state = {\n                        openPaths: props.openPaths ? props.openPaths : [],\n                        selectedPaths: props.selectedPaths ? props.selectedPaths : (props.selectedPath ? [props.selectedPath] : [])\n                    };\n                }\n\n                onSelectItem(state, path, selected, multiple) {\n                    this.setState({\n                        openPaths: state.openPaths,\n                        selectedPaths: selected ? [\n                            ...(multiple ? state.selectedPaths : []),\n                            path\n                        ] : _.filter(state.selectedPaths, (thispath) => thispath !== path),\n                    });\n                }\n\n                onOpenItem(state, path, open) {\n                    this.setState({\n                        openPaths: open ? [\n                            ...state.openPaths,\n                            path\n                        ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                        selectedPaths: state.selectedPaths\n                    });\n                }\n\n\n                render() {\n                    return <GraphQLComponent {...this.props}\n                                             onOpenItem={this.onOpenItem.bind(this, this.state)}\n                                             onSelectItem={this.onSelectItem.bind(this, this.state)}\n                                             openPaths={this.state.openPaths}\n                                             selectedPaths={this.state.selectedPaths}\n                    />;\n                }\n\n            }\n        }\n    }\n}\n\n// PickerData.propTypes = {\n//     /**\n//      * List of root paths for the picker\n//      */\n//     rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * List of folder paths that are open\n//      */\n//     openPaths: PropTypes.arrayOf(PropTypes.string),\n//\n//     /**\n//      * List of node types that can be \"opened\" (folders)\n//      */\n//     openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * List of node types that can be \"selected\" (items)\n//      */\n//     selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n//\n//     /**\n//      * If the picker allows multiple selection\n//      */\n//     multipleSelection: PropTypes.bool,\n//\n//     /**\n//      * Preselected item path (for single selection picker)\n//      */\n//     selectedPath: PropTypes.string,\n//\n//     /**\n//      * Preselected items path (for multiple selection picker)\n//      */\n//     selectedPaths: PropTypes.arrayOf(PropTypes.string),\n//\n//     /**\n//      * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n//      */\n//     textRenderer: PropTypes.func,\n//\n//     /**\n//      * Component to use to do the full rendering of the tree\n//      */\n//     renderComponent: PropTypes.element,\n//\n//     /**\n//      * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n//      */\n//     fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n//         PropTypes.string,\n//         PropTypes.shape({\n//             applyFor: PropTypes.string.isRequired,\n//             variables: PropTypes.string,\n//             gql: PropTypes.object.isRequired\n//         })\n//     ])),\n//\n//     /**\n//      * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n//      */\n//     variables: PropTypes.object\n//\n// };\n//\n\nexport {withPickerModel};\n","import React from 'react';\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\n\nfunction withPathFromSelection(reduxStoreId) {\n    return (WrappedComponent) => {\n        return connect(\n            (state, ownProps) => ({\n                ...ownProps,\n                path: (state[\"selectedPaths_\" + reduxStoreId] && state[\"selectedPaths_\" + reduxStoreId].length === 1) ? state[\"selectedPaths_\" + reduxStoreId][0] : null,\n            }),\n            () => ({}))(WrappedComponent);\n    }\n}\n\nexport { withPathFromSelection }"]}