{"version":3,"sources":["../src/javascript/i18n/getI18n.js","../src/javascript/reduxStore.js","../src/javascript/theme/theme.js","../src/javascript/router/createOutletHistory.js","../src/javascript/theme/ThemeTester.jsx","../src/javascript/router/OutletRouter.jsx","../src/javascript/router/RouterExample.jsx","../src/javascript/notification/NotificationProvider.jsx","../src/javascript/context/DxContextProvider.jsx","../src/javascript/context/withDxContext.jsx","../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/i18n/LanguageSwitcher.jsx","../src/javascript/layout/SettingsLayout.jsx","../src/javascript/layout/SearchBar.jsx","../src/javascript/nodesTable/withNodesFromPath.jsx","../src/javascript/mutations/Mutation.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/picker/Picker.jsx","../src/javascript/nodesTable/withPathFromSelection.jsx","../src/javascript/notification/withNotifications.jsx"],"names":["getI18n","options","use","XHR","init","currentLanguage","undefined","contextPath","i18n","debugTool","reducers","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","state","arguments","length","action","_","value","key","theme","createMuiTheme","grey","blueGrey","lightBlue","red","deepOrange","green","darkTheme","purple","createOutletHistory","baseHistory","outletName","getPath","path","parts","base","location","pathname","newPath","indexOf","substr","split","p","startsWith","push","getState","newState","extractPath","s","part","initialLocation","listeners","history","createHref","replace","n","go","goBack","goForward","prompt","block","listener","unlisten","listen","event","assign","call","_this","ThemeTester","props","switch","bind","themes","setState","previous","dxContext","setTheme","checked","React","Switch","color","onChange","this","Component","withDxContext","OutletRouter","createHashHistory","outletHistory","outlet","dispose","children","RouterExample","id","to","Route","component","elevation","type","match","params","NotificationProvider","notificationContext","notify","message","closeNotification","Snackbar","notification","open","propTypes","PropTypes","object","isRequired","childContextTypes","DxContextProvider","_this$props","apollo","mui","redux","apolloClient","router","_typeof","currentTheme","client","_props","_state","Children","only","uilang","createElement","I18nextProvider","HashRouter","ApolloProvider","Provider","generateClassName","createGenerateClassName","sheetsRegistry","sheetRegistry","SheetsRegistry","JssProvider","registry","MuiThemeProvider","sheetsManager","Map","WrappedComponent","_extends","context","contextTypes","SimpleListView","components","done","then","reactElements","componentDidMount","DynamicComponentsList","componentCache","data","_ref","ownProps","jcr","safeEval","eval","nodesByQuery","nodes","renderedContent","output","imports","c","concat","getImports","promise","Promise","all","imp","SystemJS","import","m","r","apply","ReactDOM","toConsumableArray","splice","renderComponent","cacheMatch","f","dataComponent","query","gql","_templateObject","graphql","mapResultsToProps","mapPropsToOptions","string","element","LanguageSwitcher","anchorEl","target","lang","changeLanguage","onClick","handleClick","t","Boolean","onClose","handleClose","map","locale","_this2","translate","SettingsLayout","classes","appBar","footer","appBarStyle","className","root","position","style","main","withStyles","palette","background","global","typography","fontFamily","text","secondary","SearchBar","handleChange","onFocus","onBlur","persist","timeout","setTimeout","onChangeFilter","placeholderLabel","Input","focus","rootFocus","input","searchIcon","Search","primary","light","withNodesFromPath","fragments","ViewComponent","_templateObject$2","node","vars","types","queryVariables","MutationExampleView","_templateObject$1","uuid","name","myprop","setPropertyMutation","Date","removeNodeMutation","addNodeMutation","getTime","setProperty","_templateObject2","addNode","_templateObject3","removeNode","_templateObject4","MutationExample","NodesTableViewMaterial","headers","row","func","arrayOf","PickerViewMaterial","pickerEntries","entry","button","selectable","onSelectItem","selected","onOpenItem","opacity","RadioButtonChecked","RadioButtonUnchecked","ListItemText","paddingLeft","depth","spacing","unit","inset","openable","hasChildren","ExpandLess","ExpandMore","array","withTheme","PickerViewMaterialMultiple","CheckBox","CheckBoxOutlineBlank","Picker","_templateObject$3","graphqlComponentProps","objectWithoutProperties","that","openPaths","defaultOpenPaths","prevState","thispath","selectedPaths","defaultSelectedPaths","multiple","select","GraphQLComponent","render","prevProps","prevContext","onSelectionChange","nextProps","nextState","nodesById","index","pickerNode","pageInfo","totalCount","rootNodes","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","child","selectedNodes","rootFound","reduce","acc","it","rootPaths","rootPath","openableTypes","selectableTypes","oneOfType","shape","reduxStoreId","connect"],"mappings":"myCAGA,SAESA,EAAQC,YACHA,QAELC,IAAIC,GAGJC,UACSH,EAAQI,gBAAkBJ,EAAQI,qBAAkBC,cAC7C,YACN,8BAGU,gBAKP,WACI,mCACC,uBACH,8BAIGL,EAAQM,YAAcN,EAAQM,YAAc,IAAM,qDAGlEC,mOC7BX,IAGQC,EAHFC,KAEAC,GACEF,OAAAA,EACkB,oBAAXG,WACKA,OAAOC,8BAAgCD,OAAOC,mCAChD,sBACM,QAIbC,EAAAA,YAAY,eAACC,EAAD,EAAAC,UAAAC,aAAAX,IAAAU,UAAA,GAAAA,UAAA,MAAaE,EAAbF,UAAA,UAAwBG,EAAAA,UAAYT,EAAU,SAACU,EAAOC,UAAQD,EAAML,EAAMM,GAAMH,MAAUT,ICT7Ga,EAAQC,EAAAA,4CAGQC,EAAAA,KAAK,wBAEE,gBACN,iBAEHC,EAAAA,SAAS,sBAGTC,EAAAA,UAAU,kBAGVC,EAAAA,IAAI,oBAGJC,EAAAA,WAAW,oBAGXC,EAAAA,MAAM,mBAGNF,EAAAA,IAAI,yCAMC,sCAKA,uCAKA,wCAKA,eAMnBG,EAAYP,EAAAA,8BAEF,0BAEMC,EAAAA,KAAK,wBAEE,cACN,iBAEHO,EAAAA,OAAO,sBAGPF,EAAAA,MAAM,kBAGNF,EAAAA,IAAI,oBAGJC,EAAAA,WAAW,oBAGXC,EAAAA,MAAM,mBAGNF,EAAAA,IAAI,yCAMC,sCAKA,uCAKA,wCAKA,ugDClGvB,SAASK,EAAoBC,EAAaC,cAEhCC,EAAU,SAACC,OACTC,KACAC,EAAOL,EAAYM,SAASC,SAC5BC,EAAUP,EAAa,IAAME,SACR,EAArBE,EAAKI,QAAQ,eACNJ,EAAKK,OAAOL,EAAKI,QAAQ,KAAK,IACzBC,OAAO,EAAEL,EAAKI,QAAQ,OACrBE,MAAM,QACXzB,EAAAA,IAAMkB,EAAO,SAACQ,UAAMA,EAAEC,WAAWZ,EAAa,KAAOO,EAAUI,MAE3C,IAA5BR,EAAMK,QAAQD,MACRM,KAAKN,GAER,KAAMtB,EAAAA,KAAOkB,EAAM,MAAQ,KAGhCW,EAAW,SAAUjC,OACnBkC,OAAAA,SACAlC,KACWkB,EAAYM,SAASxB,MAAQkB,EAAYM,SAASxB,UACpD,UAAYmB,GAAcnB,EAC5BkB,EAAYM,SAASxB,gBACjBkB,EAAYM,SAASxB,OAChB,UAAYmB,GAEzBe,GAGLC,EAAc,SAASZ,OACA,EAArBA,EAAKI,QAAQ,KAAW,KAGpBL,QAFGC,EAAKK,OAAOL,EAAKI,QAAQ,KAAO,IAC3BC,OAAO,EAAGL,EAAKI,QAAQ,OAClBE,MAAM,MACnBO,EAAIjB,EAAa,IACjBkB,EAAOjC,EAAAA,KAAOkB,EAAO,SAACQ,UAAMA,EAAEC,WAAWK,QACzCC,SACOA,EAAKT,OAAOQ,EAAElC,cAGtB,IAGPoC,EAAkBlC,EAAAA,MAAQc,EAAYM,YAC1BC,SAAWU,EAAYG,EAAgBb,cAEnDc,KAEEC,UACMtB,EAAYhB,cACZgB,EAAYf,gBACVmC,aACE,SAACd,UACFN,EAAYuB,YAAYhB,SAASL,EAAQI,EAASC,kBAEvD,SAACJ,EAAMrB,UACFkB,EAAYc,KAAKZ,EAAQC,GAAMY,EAASjC,aAE1C,SAACqB,EAAMrB,KACA0C,QAAQtB,EAAQC,GAAMY,EAASjC,QAE3C,SAAC2C,KACWC,GAAGD,WAEX,aACQE,oBAEL,aACKC,mBAEV,SAACC,UACI7B,EAAY8B,MAAMD,WAErB,SAACE,YACKjB,KAAKiB,GACR,kBACIV,EAAWU,aAGjB,iBAKPC,EAAWhC,EAAYiC,OAAQ,SAACC,OAC9B/B,EAAOc,EAAYiB,EAAM3B,UACzBzB,OAAAA,EACAoD,EAAMpD,OAASoD,EAAMpD,MAAM,UAAYmB,OAC/BiC,EAAMpD,MAAM,UAAYmB,IAEhCqB,EAAQhB,SAASC,WAAaJ,GAAQmB,EAAQhB,SAASxB,QAAUA,WAC1DqD,OAAOb,EAAQhB,SAAU4B,KACxB5B,SAASC,SAAWJ,IACpBG,SAASxB,MAAQA,SAClBuC,EAAW,SAACU,UAAaA,EAASK,KAATC,EAAmBf,EAAQhB,sBAM5DgB,EClGLgB,EAAAA,YAAAA,SAAAA,cACUC,4EACFA,aACDC,OAASH,EAAKG,OAAOC,KAAZJ,KAETK,QAAUrD,EAAOQ,KACjBf,gBACO,uEAKP6D,SAAS,SAACC,YACNL,MAAMM,UAAUC,SAASF,EAASG,QAAU1D,EAAQQ,aAE3C+C,EAASG,mDAOpBC,EAAAA,cAACC,EAAAA,QAAOC,MAAM,UAAUC,SAAUC,KAAKZ,OAAQO,QAASK,KAAKtE,MAAMiE,gBAtB5ET,CAAoBU,EAAMK,WA4BhCf,EAAAA,YAAcgB,GAAAA,CAAgBhB,EAAAA,iBC3BxBiB,EAAAA,SAAAA,cAEUhB,4EACFA,IACFvC,EAAcwD,EAAAA,6BACbC,cAAgB1D,EAAoBC,EAAauC,EAAMmB,6HAQvDD,cAAcE,kDAIXX,EAAAA,wBAAQ1B,QAAS8B,KAAKK,oBAAqBlB,MAAMqB,gBAjB3DL,CAAqBP,EAAMK,WCF3BQ,EAAAA,SAAAA,cAEUtB,6EACFA,6DA+BES,EAAAA,iBAAQU,OAAQN,KAAKb,MAAMuB,uDAErBC,GAAI,yDACJA,GAAI,yDACJA,GAAI,2CACJA,GAAI,mCAETC,EAAAA,OAAM7D,KAAM,gBAAiB8D,UAjC1B,SAAA1B,UACRS,EAAAA,uBAAOkB,UAAW,iCACFC,KAAK,WAAWF,UAAU,8CAG1BA,UAAU,kBACHG,MAAMC,OAAOlF,2BA4B/B6E,EAAAA,OAAM7D,KAAM,SAAU8D,UAxBnB,SAAA1B,UACRS,EAAAA,uBAAOkB,UAAW,iCACFC,KAAK,WAAWF,UAAU,oCAuBrCD,EAAAA,OAAM7D,KAAM,SAAU8D,UAjBnB,SAAA1B,UACRS,EAAAA,uBAAOkB,UAAW,iCACFC,KAAK,WAAWF,UAAU,4BA5BhDJ,CAAsBb,EAAMK,WCC5BiB,EAAAA,SAAAA,cACU/B,4EACFA,IAEDgC,EAAuBlC,EAAKE,MAA5BgC,6BAEAzF,6BAEY,SACH,MAIM0F,OAAS,SAACC,KACrB9B,gCAEY8B,QACJ,QAKGC,kBAAoB,aAC/B/B,gCAEY,SACH,8FAQOS,KAAKb,MAAMgC,6DAM7BvB,EAAAA,8BACGT,MAAMqB,yBAEXe,EAAAA,iCAEiB,oBACE,yBAEE,YACTvB,KAAKb,MAAMgC,oBAAoBG,uBAClCtB,KAAKtE,MAAM8F,aAAaC,8CAEN,sBAEf7B,EAAAA,sBAAMc,GAAG,mBAAmBhF,MAAM8F,aAAaH,kBAtDlEH,CAA6BjB,EAAAA,WA4DnCiB,EAAqBQ,+BACIC,EAAUC,OAAOC,YAG1CX,EAAqBY,uCACIH,EAAUC,OAAOC,gBCpDpCE,EAAAA,SAAAA,cACU5C,4EACFA,MACsEF,EAAKE,MAA5EM,EAFUuC,EAEVvC,UAA2BwC,GAFjBD,EAECxB,SAFDwB,EAEW7G,KAFX6G,EAEiBC,QAAeC,GAFhCF,EAEyBG,MAFzBH,EAEgCE,KAAaE,GAF7CJ,EAEqCK,OAFrCL,EAE6CI,cACxD1G,QACAwG,IACmB,iBAAf,IAAOA,EAAP,YAAAI,EAAOJ,MACDK,aAAeL,IAEfK,aAAetG,IAEfyD,SAAW,SAACzD,KAEbsD,uBACatD,MAKtBwD,EAAU2C,eACJA,aAAe3C,EAAU2C,kBAC5B,GAAIA,IACDA,aAAeA,OAClB,GAAIH,EAAQ,KACXrH,GAAWM,YAAYuE,EAAUvE,aACf,iBAAlB,IAAO+G,EAAP,YAAAK,EAAOL,YACAlD,OAAOnE,EAASqH,KAErBG,aAAeI,EAAAA,OAAO5H,YAG3Bc,MAAQA,sEAIL+D,UAAWO,KAAKb,MAAMM,kDAIgCO,KAAKb,MAA9DM,EADAgD,EACAhD,UAAWe,EADXiC,EACWjC,SAAUrF,EADrBsH,EACqBtH,KAAcgH,GADnCM,EAC2BR,OAD3BQ,EACmCN,OAAYE,GAD/CI,EAC0CP,IAD1CO,EAC+CJ,UACjBrC,KAAKtE,MAAnC6G,EAFAG,EAEAH,aAAcH,EAFdM,EAEcN,aAEfnC,EAAYL,EAAM+C,SAASC,KAAKpC,MAChCrF,EAAM,KACFP,GAAWI,gBAAgByE,EAAUoD,OAAQ3H,YAAYuE,EAAUvE,aACnD,iBAAhB,IAAOC,EAAP,YAAAmH,EAAOnH,YACA4D,OAAOnE,EAASO,KAEfyE,EAAMkD,cAAcC,EAAAA,iBAAkB5H,KAAKR,EAAQC,IAAWqF,MAE1EoC,EAAQ,KACJA,EAASW,EAAAA,WACTpI,KACkB,iBAAlB,IAAOyH,EAAP,YAAAC,EAAOD,KACa,WAAhBA,EAAOtB,SACEZ,IACDG,OAAS+B,EAAO/B,UAGpBV,EAAMkD,cAAcE,EAAAA,WAAYpI,EAASqF,MAErDmC,MACYxC,EAAMkD,cAAcG,EAAAA,gBAAiBT,OAAOJ,GAAenC,IAEvEkC,MACYvC,EAAMkD,cAAcI,EAAAA,UAAW5H,MAAMA,GAAQ2E,IAGzDsC,EAAc,KACVY,EAAoB1D,EAAU0D,kBAAoB1D,EAAU0D,kBAAoBC,EAAAA,0BAChFC,EAAiB5D,EAAU6D,cAAgB7D,EAAU6D,cAAgB,IAAIC,EAAAA,iBACjE3D,EAAMkD,cAAcU,EAAAA,aAAcC,SAAUJ,EAAiBF,kBAAkBA,GAAoBvD,EAAMkD,cAAcY,EAAAA,kBAAmBzH,MAAOsG,EAAcoB,cAAc,IAAIC,KAAQ3D,aAO7LL,EAAMkD,cAAc5B,GAAuBC,wBAAyBlB,SA9ElF8B,CAA0BnC,EAAMK,WCftC,SAASC,WACE,SAAC2D,OACA5D,EAAAA,SAAAA,gKAEYL,EAAAA,cAACiE,EAADC,GAAkBrE,UAAWO,KAAK+D,QAAQtE,WAAeO,KAAKb,cAF1Ec,CAA0BL,EAAMK,oBAM1B+D,wBACKrC,EAAUC,QAGlB3B,GDuFf8B,EAAkBD,6BACHH,EAAUC,YErGnBqC,EAAAA,SAAAA,cACU9E,4EACFA,aACDzD,mGAODsE,KAAKb,MAAM+E,aAAelE,KAAKmE,WAC1BhF,MAAM+E,WAAWE,KAAK,SAACC,KACnBF,MAAO,IACP5E,UAAU8E,cAAeA,wDAMjCC,4DAIEtE,KAAKmE,KAAQvE,EAAAA,8BAAWlE,MAAM2I,eAAyBzE,EAAAA,cAAAA,MAAAA,YAvBhEqE,CAAuBrE,EAAMK,4nECO7BsE,EAAAA,SAAAA,cAEUpF,4EACFA,aACDqF,sFAGUC,EAAiBC,EAAjBD,KAAME,EAAWD,EAAXC,SACjBT,KAEAU,EAAMH,EAAKG,IACXC,EAAWC,KACXF,GAAOA,EAAIG,iBACEjJ,EAAAA,IAAMA,EAAAA,QAAU8I,EAAIG,aAAaC,MAAO,kBAAkB,SAAC3G,UAAKwG,EAAS,IAAMxG,EAAE4G,gBAAgBC,OAAS,YAGvHC,YACGjB,EAAY,SAAAkB,KACLD,EAAQE,OAAOD,EAAEE,oBAE3BC,OAAAA,SACiB,EAAjBJ,EAAQvJ,WACE4J,QAAQC,IAAI3J,EAAAA,IAAMqJ,EAAS,SAACO,UAAQC,SAASC,OAAOF,MAAOtB,KAAK,SAAAyB,UAClD/J,EAAAA,IAAMoI,EAAY,SAACkB,OAC/BtH,EAAIsH,EAAEE,aAAa1J,OACnBkK,EAAIV,EAAEtC,cAAFiD,MAAAX,GAAgBxF,EAAOoG,GAAvBX,OAAAY,EAAoCJ,cAC1CK,OAAOpI,GACFgI,YAOZnB,cACSY,8CAIFpG,2BAGC,8DAAgEA,EAAMuB,GAAK,2CAMtFyF,EAAkBnG,KAAKb,MAAMgH,gBAE7BC,EAAatK,EAAAA,KAAOkE,KAAKwE,eAAgB,SAAC6B,UAAMA,EAAEF,kBAAoBA,IACtElG,OAAAA,KACAmG,IACYA,EAAWE,kBACpB,KACCC,EAAQC,EAARC,KA2BQC,EAAAA,QAAQH,SACTvG,KAAK2G,0BACH3G,KAAK4G,mBAFNF,CAGTP,GAAmBlC,QAEjBO,eAAe9G,MAAMyI,gBAAiBA,EAAiBG,cAAerG,WAGvEL,EAAAA,cAACK,EAAcD,KAAKb,aA1F9BoF,CAA8B3E,EAAMK,WA8F1CsE,EAAsB7C,cAIdC,EAAUkF,OAAOhF,2BAKJF,EAAUmF,SC3GzBC,EAAAA,iBAAAA,SAAAA,cAEU5H,EAAM4E,4EACR5E,EAAM4E,aACPrI,gBACS,6DAINoD,QACHS,UAAUyH,SAAUlI,EAAMmI,6CAGvBC,QACH3H,UAAUyH,SAAU,OACrBE,QACKnD,QAAQ5I,KAAKgM,eAAeD,sDAO7BtH,EAAAA,mDACIwH,QAASpH,KAAKqH,YAAYhI,KAAKW,YAChCb,MAAMmI,EAAE,4CACT7F,KAAM8F,QAAQvH,KAAKtE,MAAMsL,UAAWQ,QAASxH,KAAKyH,YAAYpI,KAAKW,KAAM,eAC/DA,KAAKtE,MAAMsL,WANP,KAAM,MAOJU,IAAI,SAACC,UACnB/H,EAAAA,0BAAUwH,QAASQ,EAAKH,YAAYpI,KAAjBuI,EAA4BD,GAAS3L,IAAK2L,QAC5CA,gBA9B/BZ,CAAyBnH,EAAMK,WAoCrC8G,EAAAA,iBAAiB/C,mBACPrC,EAAUC,QAGpBmF,EAAAA,iBAAmBc,EAAAA,UAAU,qBAAVA,CAAgCd,EAAAA,kBClB7Ce,EAAAA,eAAAA,SAAAA,cACU3I,6EACFA,4DAImDa,KAAKb,MAAxD4I,EADDtF,EACCsF,QAASC,EADVvF,EACUuF,OAAQxH,EADlBiC,EACkBjC,SAAUyH,EAD5BxF,EAC4BwF,OAAQC,EADpCzF,EACoCyF,mBAErCtI,EAAAA,yBAASuI,UAAWJ,EAAQK,gCAChBC,SAAS,QAAQN,SAAUK,KAAKL,EAAQC,QAASM,MAAOJ,iCAGvDC,UAAWJ,EAAQQ,mCAGpBJ,UAAWJ,EAAQE,kBAfrCH,CAAuBlI,EAAMK,WAwBnC6H,EAAAA,eAAepG,kBACHC,EAAUmF,eACVnF,EAAUkF,QAGtBiB,EAAAA,eAAiBU,EAAAA,WApDF,SAAAvM,gCAEUA,EAAMwM,QAAQC,WAAWC,wBAG/B,8BACA,WACF,oBAGC,kBACE1M,EAAM2M,WAAWC,sBACjB,YACH,gBACE,eACJ5M,EAAMwM,QAAQK,KAAKC,8BAGd,2BAkCHP,CAAmBV,EAAAA,gBCL9BkB,EAAAA,UAAAA,SAAAA,cAEU7J,4EACFA,aACD8J,aAAehK,EAAKgK,aAAa5J,KAAlBJ,KACfiK,QAAUjK,EAAKiK,QAAQ7J,KAAbJ,KACVkK,OAASlK,EAAKkK,OAAO9J,KAAZJ,KACTvD,cACM,2DAIFoD,KAEHsK,UACFpJ,KAAKqJ,sBACQrJ,KAAKqJ,cAEjBA,QAAUC,WAAW,gBACjBnK,MAAMoK,eAAezK,EAAMmI,OAAOlL,QACzCsD,KAAKW,MAAO,4CAITT,iBACM,SAENJ,MAAM+J,gDAIN3J,iBACM,SAENJ,MAAMgK,gDAK6BnJ,KAAKb,MAArC4I,EAFHtF,EAEGsF,QAAQT,EAFX7E,EAEW6E,EAAGkC,EAFd/G,EAEc+G,wBAGf5J,EAAAA,cAAC6J,EAAAA,OAAM1B,SAAUK,KAAOpI,KAAKtE,MAAMgO,MAAQ3B,EAAQ4B,UAAY5B,EAAQK,KAAOwB,MAAO7B,EAAQ6B,gBAC5E5J,KAAKiJ,oBACPjJ,KAAKmJ,eACJnJ,KAAKkJ,0BACI,OACb,mBACQM,GAAoBlC,EAAE,0CACnB1H,EAAAA,gCAAgBmI,SAAUK,KAAML,EAAQ8B,YAAaxB,SAAS,yBAASyB,EAAAA,OAAD,eAjDnGd,CAAkBpJ,EAAMK,WAuD9B+I,EAAAA,UAAYR,EAAAA,WArGG,SAAAvM,yBAEG,kBACF,cACF,UACC,UACC,0BACUA,EAAMwM,QAAQsB,QAAQC,YACjC,eACC,kBACI,oBACE,iBACF,2BAGF,kBACF,cACF,UACC,UACA/N,EAAMwM,QAAQK,KAAKC,0BACR,aACX,eACC,kBACI,oBACE,iBACF,gBACD,4DAMS,2BACA,iCACM,+CACT,6BAIJ,oBACG,mBACD,eACJ,UA2DPP,CAAmBX,EAAAA,UAAU,qBAAVA,CAAgCmB,EAAAA,mtCC1G/D,SAMSiB,EAAkBC,UAChB,SAACC,OAkCA5D,EAAQC,EAAR4D,uCAmBuB7D,EAAO2D,GAE3BxD,EAAAA,QAAQH,SArDS,SAAA7B,OAAED,EAAoBC,EAApBD,KAAME,EAAcD,EAAdC,SACxBK,KAEAJ,EAAMH,EAAKG,WAEXA,GACIA,EAAIyF,SACIzF,EAAIyF,KAAK7J,SAASwE,YAK3BL,SACIK,aAIS,SAAC7F,OACjBmL,QACMnL,EAAMpC,WACLoC,EAAMoL,cAEbpL,EAAMqL,yBACGF,EAAMnL,EAAMqL,2BAIVF,QACJnL,EAAMpC,QAyBd2J,CAGJyD,ozDC1DLM,EAAAA,SAAAA,cAEUtL,4EACFA,aAoCDc,UAAYgK,aACH,WACLzD,EAALkE,KAFaT,CAlCK,SAAC9K,UAAWS,EAAAA,0SAUfoF,MAAQ7F,EAAM6F,MAAM0C,IAAI,SAAA2C,UAC3BzK,EAAAA,0BAAU5D,IAAKqO,EAAKM,yCACCC,yCACAC,OAAO9O,kEACLqL,QAAS,kBAAMnI,EAAKE,MAAM2L,qCAE/BT,EAAKtN,WACH,QAAU,IAAIgO,sBAET,wFAGF3D,QAAS,kBAAMnI,EAAKE,MAAM6L,oCAE/BX,EAAKtN,sBAEE,sGAoBrCkD,EAAYD,KAAKC,iBAEjBL,EAAAA,mDACYwH,QAAS,kBAAMQ,EAAKzI,MAAM8L,iCAEnB,SAAW,IAAIF,MAAOG,gBACrB,QAAU,IAAIH,sBAET,yCAGpB9K,GAAUlD,KAAM,IAAKwN,OAAQ,4BA9DxCE,CAA4BxK,EAAAA,WAoE5BkL,EAAc3E,EAAd4E,GAeAC,GAAU7E,EAAV8E,GAYAC,GAAa/E,EAAbgF,GAQFC,GAAkB/E,EAAAA,QAAQyE,GAAcP,KAAM,uBAA5BlE,CAClBA,EAAAA,QAAQ2E,IAAUT,KAAM,mBAAxBlE,CACIA,EAAAA,QAAQ6E,IAAaX,KAAM,sBAA3BlE,CAAkD+D,KC5GtDiB,GAAyB,SAAUvM,cAE/BwM,EAAUxM,EAAA,QAAmBA,EAAA,QAAmB,kBAChDS,EAAAA,yEAIAgM,EAAMzM,EAAA,IAAeA,EAAA,IAAe,SAACkL,UAAUzK,EAAAA,0BAAU5D,IAAKqO,EAAKtN,yCACnD,aAAwBoC,EAAA,aAAsBH,KAAtBC,EAAiCoL,GAAQA,EAAKO,eAGlFhL,EAAAA,oGAKeoF,MAAQ7F,EAAM6F,MAAM0C,IAAIkE,SAKnDF,GAAuBhK,mBACVC,EAAUkK,SACdlK,EAAUkK,kBACDlK,EAAUkK,WACjBlK,EAAUmK,QAAQnK,EAAUC,SCxBnCmK,EAAAA,mBAAqB,SAAU5M,qBACvBS,EAAAA,4BACGoM,cAActE,IAAI,SAACuE,UACrBrM,EAAAA,0BAAUsM,QAAA,UACS,kBAAMD,EAAME,WAAahN,EAAMiN,aAAaH,EAAMlP,MAAOkP,EAAMI,UAAYlN,EAAMmN,WAAWL,EAAMlP,MAAOkP,EAAMxK,WACnHwK,EAAMlP,sCAEAuL,MAAO2D,EAAME,eAAmBI,QAAS,MAAWF,SAAWzM,EAAAA,cAAC4M,EAAAA,mBAAD,MACzE5M,EAAAA,cAAC6M,EAAAA,qBAAD,uBACHC,EAAAA,cAAapE,OAAQqE,YAAaV,EAAMW,MAAQzN,EAAMlD,MAAM4Q,QAAQC,MAAOC,OAAA,UACrD5N,EAAA,aAAwBA,EAAA,aAAsBH,KAAtBC,EAAiCgN,GAASA,EAAMrB,wDAEpFoC,UAAYf,EAAMgB,YACrBrN,EAAAA,4BAAYwH,QAAS,kBAAMjI,EAAMmN,WAAWL,EAAMlP,MAAOkP,EAAMxK,UAAcA,KACzE7B,EAAAA,cAACsN,EAAAA,WAAD,MAAgBtN,EAAAA,cAACuN,EAAAA,WAAD,OAA+B,WAQ/EpB,EAAAA,mBAAmBrK,yBACAC,EAAUyL,MAAMvL,wBACjBF,EAAUkK,gBACZlK,EAAUkK,kBACRlK,EAAUkK,MAG5BE,EAAAA,mBAAqBsB,EAAAA,WAAAA,CAAYtB,EAAAA,oBC7B7BuB,EAAAA,2BAA6B,SAAUnO,qBAC/BS,EAAAA,4BACGoM,cAActE,IAAI,SAACuE,UACrBrM,EAAAA,0BAAUsM,QAAA,UACS,kBAAMD,EAAME,WAAahN,EAAMiN,aAAaH,EAAMlP,MAAOkP,EAAMI,UAAU,GAAQlN,EAAMmN,WAAWL,EAAMlP,MAAOkP,EAAMxK,WACzHwK,EAAMlP,sCAEAuL,MAAO2D,EAAME,eAAmBI,QAAS,MAAWF,SAAWzM,EAAAA,cAAC2N,EAAAA,SAAD,MACzE3N,EAAAA,cAAC4N,EAAAA,qBAAD,uBACHd,EAAAA,cAAapE,OAAQqE,YAAaV,EAAMW,MAAQzN,EAAMlD,MAAM4Q,QAAQC,MAAOC,OAAA,UACrD5N,EAAA,aAAwBA,EAAA,aAAsBH,KAAtBC,EAAiCgN,GAASA,EAAMrB,wDAEpFoC,UAAYf,EAAMgB,YACrBrN,EAAAA,4BAAYwH,QAAS,kBAAMjI,EAAMmN,WAAWL,EAAMlP,MAAOkP,EAAMxK,UAAcA,KACzE7B,EAAAA,cAACsN,EAAAA,WAAD,MAAgBtN,EAAAA,cAACuN,EAAAA,WAAD,OAA+B,WAQ/EG,EAAAA,2BAA2B5L,yBACRC,EAAUyL,MAAMvL,wBAChBF,EAAUkK,gBACblK,EAAUkK,kBACRlK,EAAUkK,MAG5ByB,EAAAA,2BAA6BD,EAAAA,WAAAA,CAAYC,EAAAA,4xGC3BnCG,GAAAA,SAAAA,cAEUtO,4EACFA,IAEFoH,EAAQC,EAARkH,IAsCExD,EAAwC/K,EAAxC+K,UAAcyD,EAzCLC,EAyC+BzO,GAzC/B,2CA2CYoH,EAAO2D,KAE7ByD,sBAAwBA,MAEzBjS,KACAmS,EAAAA,SACC1O,EAAM2O,cACDA,UAAY3O,EAAM4O,iBAAmBjS,EAAAA,MAAQqD,EAAM4O,uBACnCzB,WAAa,SAACvP,EAAK0E,KAChClC,SAAU,SAACyO,EAAW7O,oBACZsC,KAAAA,OAAAA,EACJuM,EAAUF,YACb/Q,IACAjB,EAAAA,OAASkS,EAAUF,UAAW,SAACG,UAAaA,IAAalR,OAE7DoC,EAAMmN,cACAA,WAAWvP,EAAK0E,KAK7BtC,EAAM+O,kBACDA,cAAgB/O,EAAMgP,qBAAuBrS,EAAAA,MAAQqD,EAAMgP,2BAC3C/B,aAAe,SAACrP,EAAKsP,EAAS+B,KAC3C7O,SAAS,SAACyO,EAAW7O,wBACPkN,KAAAA,OAAAA,EACP+B,EAAWJ,EAAUE,mBACrBnR,IACAjB,EAAAA,OAASkS,EAAUE,cAAe,SAACD,UAAaA,IAAalR,OAErEoC,EAAMiN,gBACAA,aAAarP,EAAKsR,OAAOD,OAItC1S,MAAQA,IAER4S,iBAAmB5H,EAAAA,QAAQH,SACrBtH,EAAK0H,0BACH1H,EAAK2H,mBAFMF,CAGrBzH,EAAKE,MAAMoP,sEAGCC,EAAWR,EAAWS,GACjCzO,KAAKb,MAAMuP,oBAAsB5S,EAAAA,QAAUkE,KAAKtE,MAAMwS,cAAcF,EAAUE,qBACzE/O,MAAMuP,kBAAkB1O,KAAKtE,MAAMwS,iEAItBS,EAAWC,GACuCD,EAAlEzE,UAAkEyE,EAAvDrC,WAAuDqC,EAA3CvC,iBAAiBuB,EADFC,EAC4Be,GAD5B,YAAA,aAAA,0BAEnC3O,KAAK2N,sBAAuBA,oDAGtBlJ,EAAiBC,EAAjBD,KAAME,EAAWD,EAAXC,SACjBuJ,EAAgBvJ,EAASuJ,cACzBJ,EAAYnJ,EAASmJ,UAAYnJ,EAASmJ,aAE1C9B,KACA6C,KACAjK,EAAMH,EAAKG,IAEXyG,EAAU,SAAUhB,EAAMuC,EAAOkC,OAC7BzC,GAAW,EACXhC,EAAK8B,gBAC+C,IAAzCrQ,EAAAA,QAAUoS,EAAe7D,EAAKtN,WAEzCgS,QACM1E,EAAKO,UACLP,EAAKtN,UACLsN,EAAK2C,WAAiD,IAArClR,EAAAA,QAAUgS,EAAWzD,EAAKtN,eACvCsP,WACAhC,EAAK2C,oBACH3C,EAAK8B,iBACVS,SACC9Q,EAAAA,OAAS,SAAkB,EAAR8Q,QACrBvC,UACE,cACyC,EAApCA,EAAK7J,SAASwO,SAASC,qBAE1B/I,OAAO4I,EAAO,EAAGC,KACrB1E,EAAKM,MAAQoE,GAIvBnK,IACIA,EAAIsK,qBACMtK,EAAIsK,UAAW,SAAAC,GACV9D,EAAQ8D,EAAU,EAAG,GAC3BC,OAASzK,EAAS0K,WAG3BzK,EAAI0K,oBACK1K,EAAI0K,WAAY,SAASC,QAAQ,SAAClF,OACnCmF,EAASX,EAAUxE,EAAKM,SACxB6E,EAAQ,KACJC,EAAc3T,EAAAA,QAAUkQ,EAAewD,kBAC5BnF,EAAK7J,SAASwE,MAAO,SAAC0K,KACzBA,EAAOF,EAAO5C,MAAQ,EAAG6C,EAAc,aAQ/DE,EAAgB7T,EAAAA,OAASkQ,EAAe,SAAC3B,UAClCA,EAAKgC,WACb3E,IAAI,SAAC2C,UACGA,EAAKA,gBAGAvO,EAAAA,IAAM6T,EAAe,UACrB7T,EAAAA,OAASkQ,EAAe,SAAA+C,UAC5BA,EAAWK,cAIhBzK,iBACYqH,8CAIL7M,OACV2O,EAAY3O,EAAM2O,UAAY3O,EAAM2O,aAiBpC3O,EAAM+O,sBACC/O,EAAM+O,cAAe,SAAAnR,UAhBXoC,EAgBiCA,EAhB1BpC,EAgBiCA,EAfrD6S,GAAY,cACT9T,EAAAA,MAAQiB,EAAM,MAAM8S,OAAO,SAACC,EAAKC,UAC/BH,aACSzQ,EAAM6Q,UAAW,SAAAC,KACXL,GAAa9T,EAAAA,WAAagU,EAAKG,KAG/CL,IAA4C,IAA/B9T,EAAAA,QAAUgS,EAAWgC,MACxBpS,KAAKoS,GAEZA,EAAM,IAAMC,GACpB,IAZa,IAAC5Q,EAAOpC,EACpB6S,QAkBJtF,aACWnL,EAAM6Q,gBACVlU,EAAAA,MAAQqD,EAAM+Q,cAAe/Q,EAAMgR,4BAC9BhR,EAAMgR,yBACRhR,EAAM+Q,wBACLpC,UAGX3O,EAAMqL,yBACGF,EAAMnL,EAAMqL,2BAIVF,wCAKXgE,EAAmBtO,KAAKsO,wBAErB1O,EAAAA,cAAC0O,EAADxK,KAAsB9D,KAAK2N,sBAA2B3N,KAAKtE,cAlNpE+R,CAAe7N,EAAMK,WAsN3BwN,GAAO/L,qBAIQC,EAAUmK,QAAQnK,EAAUkF,QAAQhF,4BAK7BF,EAAUmK,QAAQnK,EAAUkF,sBAK/BlF,EAAUmK,QAAQnK,EAAUkF,QAAQhF,qBAKxCF,EAAUmK,QAAQnK,EAAUkF,wBAKtBlF,EAAUmK,QAAQnK,EAAUkF,QAAQhF,gCAK/BF,EAAUmK,QAAQnK,EAAUkF,sBAKnClF,EAAUmK,QAAQnK,EAAUkF,0BAKxBlF,EAAUkK,YAKrBlK,EAAUkK,eAKPlK,EAAUmK,QAAQnK,EAAUyO,WACnCzO,EAAUkF,OACVlF,EAAU0O,gBACI1O,EAAUkF,OAAOhF,qBAChBF,EAAUkF,WAChBlF,EAAUC,OAAOC,+BAOdF,EAAUC,wMCtR9B,SAA+B0O,UACpB,SAACzM,UACG0M,EAAAA,QACH,SAAC7U,EAAOiJ,eACDA,QACIjJ,EAAM,iBAAmB4U,IAAmE,IAAlD5U,EAAM,iBAAmB4U,GAAc1U,OAAgBF,EAAM,iBAAmB4U,GAAc,GAAK,QAExJ,qBALGC,CAKS1M,kDCRxB,kBACW,SAACA,OACA5D,EAAAA,SAAAA,gKAEYL,EAAAA,cAACiE,EAADC,GAAkB3C,oBAAqBnB,KAAK+D,QAAQ5C,qBAAyBnB,KAAKb,cAF9Fc,CAA0BL,EAAMK,oBAM1B+D,kCACerC,EAAUC,QAG5B3B,sHrBEW,SAASvE,EAAOG,MAClB,gBAAhBA,EAAOkF,YAGJrF","sourcesContent":["import i18n from 'i18next';\nimport XHR from 'i18next-xhr-backend';\n// import LanguageDetector from 'i18next-browser-languagedetector/';\nimport { reactI18nextModule } from 'react-i18next';\n\nfunction getI18n(options) {\n    options = options || {};\n    i18n\n        .use(XHR)\n        // .use(LanguageDetector)\n        // .use(reactI18nextModule) // if not using I18nextProvider\n        .init({\n            lng: (options.currentLanguage ? options.currentLanguage : undefined),\n            fallbackLng: 'en',\n            debug: true,\n\n            interpolation: {\n                escapeValue: false, // not needed for react!!\n            },\n\n            // react i18next special options (optional)\n            react: {\n                wait: false,\n                bindI18n: 'languageChanged loaded',\n                bindStore: 'added removed',\n                nsMode: 'default'\n            },\n\n            backend: {\n                loadPath: (options.contextPath ? options.contextPath : '') + '/modules/{{ns}}/javascript/locales/{{lng}}.json',\n            }\n        });\n    return i18n;\n}\n\n\nexport { getI18n };","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import {createMuiTheme} from 'material-ui';\nimport {blueGrey, lightBlue, red, grey, purple, green, deepOrange} from 'material-ui/colors/index'\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\nlet theme = createMuiTheme({\n    palette: {\n        background: {\n            global: grey[200],\n        },\n        contrastThreshold: 3.1,\n        tonalOffset: 0.2,\n        primary: {\n            main: blueGrey[600],\n        },\n        secondary: {\n            main: lightBlue[600],\n        },\n        error: {\n            main: red[400],\n        },\n        publish: {\n            main: deepOrange[500],\n        },\n        enabled: {\n            main: green[400],\n        },\n        delete: {\n            main: red[600],\n        }\n    },\n    overrides: {\n        MuiButton: {\n            root: {\n                color: \"inherit\",\n            }\n        },\n        MuiTableCell: {\n            body: {\n                color: \"inherit\",\n            }\n        },\n        MuiIconButton: {\n            root: {\n                color: \"inherit\",\n            }\n        },\n        MuiCheckbox: {\n            default: {\n                color: \"inherit\",\n            }\n        }\n    }\n});\n\nlet darkTheme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n        background: {\n            global: grey[900]\n        },\n        contrastThreshold: 3.0,\n        tonalOffset: 0.2,\n        primary: {\n            main: purple[500]\n        },\n        secondary: {\n            main: green[400]\n        },\n        error: {\n            main: red[200]\n        },\n        publish: {\n            main: deepOrange[500],\n        },\n        enabled: {\n            main: green[400],\n        },\n        delete: {\n            main: red[600],\n        }\n    },\n    overrides: {\n        MuiButton: {\n            root: {\n                color: \"inherit\",\n            }\n        },\n        MuiTableCell: {\n            body: {\n                color: \"inherit\",\n            }\n        },\n        MuiIconButton: {\n            root: {\n                color: \"inherit\",\n            }\n        },\n        MuiCheckbox: {\n            default: {\n                color: \"inherit\",\n            }\n        }\n    }\n});\n\n\nexport {theme, darkTheme}\n","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\nimport {withDxContext} from \"../context\";\nimport {Switch} from 'material-ui'\nimport {theme, darkTheme} from \"./theme\";\n\nclass ThemeTester extends React.Component {\n    constructor(props) {\n        super(props);\n        this.switch = this.switch.bind(this);\n\n        this.themes = [theme, darkTheme];\n        this.state = {\n            checked:false\n        };\n    }\n\n    switch() {\n        this.setState((previous) => {\n            this.props.dxContext.setTheme(previous.checked ? theme : darkTheme);\n            return {\n                checked: !previous.checked\n            }\n        });\n    }\n\n\n    render() {\n        return <Switch color=\"default\" onChange={this.switch} checked={this.state.checked}/>\n    }\n\n}\n\n\nThemeTester = withDxContext()(ThemeTester);\n\nexport {ThemeTester}","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let baseHistory = createHashHistory();\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {OutletRouter as Router} from './OutletRouter'\nimport {Link, Route} from 'react-router-dom'\nimport {Paper, Typography} from 'material-ui'\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 1\n                </Typography>\n                <Typography component=\"p\">\n                    Param = {props.match.params.value}\n                </Typography>\n            </Paper>\n        );\n        let Test2 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 2\n                </Typography>\n            </Paper>\n\n        );\n        let Test3 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 3\n                </Typography>\n            </Paper>\n        );\n\n        return (<Router outlet={this.props.id}>\n            <div>\n                <Link to={'/test1/value1'}>test1/value1</Link>\n                <Link to={'/test1/value2'}>Test1/value2</Link>\n                <Link to={'/test2'}>test2</Link>\n                <Link to={'/test3'}>test3</Link>\n\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Component } from \"react\";\nimport {Snackbar} from \"material-ui\";\n\nclass NotificationProvider extends Component {\n    constructor(props) {\n        super(props);\n\n        let {notificationContext} = this.props;\n\n        this.state = {\n            notification: {\n                message: \"\",\n                open: false\n            }\n        };\n\n        notificationContext.notify = (message) => {\n            this.setState({\n                notification: {\n                    message: message,\n                    open:true\n                }\n            });\n        };\n\n        notificationContext.closeNotification = () => {\n            this.setState({\n                notification: {\n                    message: '',\n                    open: false\n                }\n            });\n        };\n    }\n\n    getChildContext() {\n        return {\n            notificationContext: this.props.notificationContext\n        };\n    }\n\n    render() {\n        // TODO make it configurable\n        return <div>\n            {this.props.children}\n\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                autoHideDuration={5000}\n                onClose={this.props.notificationContext.closeNotification}\n                open={this.state.notification.open}\n                SnackbarContentProps={{\n                    'aria-describedby': 'message-id',\n                }}\n                message={<span id=\"message-id\">{this.state.notification.message}</span>}\n            />\n        </div>;\n    }\n}\n\nNotificationProvider.propTypes = {\n    notificationContext: PropTypes.object.isRequired\n};\n\nNotificationProvider.childContextTypes = {\n    notificationContext: PropTypes.object.isRequired\n};\n\nexport {NotificationProvider}","import React from 'react';\nimport {MuiThemeProvider} from 'material-ui';\nimport {createGenerateClassName} from 'material-ui/styles/index';\nimport {getI18n} from \"../i18n/getI18n\";\nimport {store} from '../reduxStore';\nimport {theme} from '../theme'\nimport {client} from '@jahia/apollo-dx';\nimport {ApolloProvider} from 'react-apollo';\nimport {Provider} from 'react-redux'\nimport {I18nextProvider} from 'react-i18next'\nimport {HashRouter} from 'react-router-dom'\nimport {OutletRouter} from '../router'\nimport PropTypes from 'prop-types';\nimport { SheetsRegistry, JssProvider } from 'react-jss';\nimport {NotificationProvider} from \"../notification/NotificationProvider\";\n\nimport * as _ from \"lodash\";\n\nclass DxContextProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        let {dxContext, children, i18n, apollo, redux, mui, router, apolloClient} = this.props;\n        let state = {};\n        if (mui) {\n            if (typeof mui === 'object') {\n                state.currentTheme = mui;\n            } else {\n                state.currentTheme = theme;\n            }\n            dxContext.setTheme = (theme) => {\n                // theTheme = _.merge({}, theme, this.state.theme);\n                this.setState({\n                    currentTheme: theme\n                });\n            };\n        }\n\n        if (dxContext.apolloClient) {\n            state.apolloClient = dxContext.apolloClient;\n        } else if (apolloClient) {\n            state.apolloClient = apolloClient;\n        } else if (apollo) {\n            let options = {contextPath:dxContext.contextPath};\n            if (typeof apollo === 'object') {\n                Object.assign(options, apollo)\n            }\n            state.apolloClient = client(options);\n        }\n\n        this.state = state;\n    }\n\n    getChildContext() {\n        return {dxContext: this.props.dxContext};\n    }\n\n    render() {\n        let {dxContext, children, i18n, apollo, redux, mui, router} = this.props;\n        let {currentTheme, apolloClient} = this.state;\n\n        let Component = React.Children.only(children);\n        if (i18n) {\n            let options = {currentLanguage:dxContext.uilang, contextPath:dxContext.contextPath};\n            if (typeof i18n === 'object') {\n                Object.assign(options, i18n)\n            }\n            Component = React.createElement(I18nextProvider, {i18n:getI18n(options)}, Component);\n        }\n        if (router) {\n            let router = HashRouter;\n            let options = {};\n            if (typeof router === 'object') {\n                if (router.type === 'outlet') {\n                    router = OutletRouter;\n                    options.outlet = router.outlet;\n                }\n            }\n            Component = React.createElement(HashRouter, options, Component);\n        }\n        if (apolloClient) {\n            Component = React.createElement(ApolloProvider, {client:apolloClient}, Component);\n        }\n        if (redux) {\n            Component = React.createElement(Provider, {store:store}, Component);\n        }\n\n        if (currentTheme) {\n            let generateClassName = dxContext.generateClassName ? dxContext.generateClassName : createGenerateClassName();\n            let sheetsRegistry = dxContext.sheetRegistry ? dxContext.sheetRegistry : new SheetsRegistry();\n            Component = React.createElement(JssProvider, {registry: sheetsRegistry,  generateClassName:generateClassName}, React.createElement(MuiThemeProvider, {theme: currentTheme, sheetsManager:new Map()}, Component));\n            // } else {\n            //     Component = React.createElement(MuiThemeProvider, {theme: currentTheme}, Component);\n            // }\n        }\n\n        // add notification\n        Component = React.createElement(NotificationProvider, {notificationContext:{}}, Component);\n\n        return Component;\n    }\n}\n\nDxContextProvider.childContextTypes = {\n    dxContext: PropTypes.object\n};\n\nexport {DxContextProvider}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction withDxContext() {\n    return (WrappedComponent) => {\n        let Component = class extends React.Component {\n            render() {\n                return (<WrappedComponent dxContext={this.context.dxContext} {...this.props} />)\n            }\n        }\n\n        Component.contextTypes = {\n            dxContext: PropTypes.object\n        };\n\n        return Component\n    }\n}\n\nexport { withDxContext }","import React from 'react';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<div>{this.state.reactElements}</div>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedContent.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedContent(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<Component {...this.props} />);\n    }\n}\n\nDynamicComponentsList.propTypes = {\n    /**\n     * Id of the \"componentsFolder\" to look for\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Component to use to do the rendering\n     */\n    renderComponent: PropTypes.element\n}\n\nexport {DynamicComponentsList};\n","import React from 'react';\nimport {Button, Menu, MenuItem} from 'material-ui';\nimport {translate} from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nclass LanguageSwitcher extends React.Component {\n\n    constructor(props,context) {\n        super(props,context);\n        this.state = {\n            anchorEl: null,\n        };\n    }\n\n    handleClick(event) {\n        this.setState({anchorEl: event.target});\n    }\n\n    handleClose(lang) {\n        this.setState({anchorEl: null});\n        if (lang) {\n            this.context.i18n.changeLanguage(lang);\n        }\n    };\n\n    render() {\n        let availableLocales = ['fr', 'en'];\n\n        return (<div>\n            <Button onClick={this.handleClick.bind(this)}\n            >{this.props.t('label.languages')}</Button>\n            <Menu open={Boolean(this.state.anchorEl)} onClose={this.handleClose.bind(this, null)}\n                  anchorEl={this.state.anchorEl}>\n                {availableLocales.map((locale) => (\n                    <MenuItem onClick={this.handleClose.bind(this, locale)} key={locale}\n                              value={locale}>{locale}</MenuItem>))}\n            </Menu>\n        </div>);\n    }\n}\n\nLanguageSwitcher.contextTypes = {\n    i18n: PropTypes.object\n};\n\nLanguageSwitcher = translate('react-dxcomponents')(LanguageSwitcher);\n\n\nexport {LanguageSwitcher}\n","import React from 'react';\nimport {AppBar, Toolbar, Typography, withStyles} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n    root: {\n        backgroundColor: theme.palette.background.global\n    },\n    main: {\n        minHeight: 'calc(100% - 96px)',\n        marginTop: 64,\n        padding: 1\n    },\n    footer: {\n        fontSize: '14px',\n        fontFamily: theme.typography.fontFamily,\n        fontWeight: 300,\n        padding: \"8px\",\n        textAlign: \"center\",\n        color: theme.palette.text.secondary\n    },\n    appBar: {\n        transition: \"all 200ms ease-in-out\"\n    }\n});\n\n\nclass SettingsLayout extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let { classes, appBar, children, footer, appBarStyle } = this.props;\n        return (\n            <section className={classes.root} >\n                <AppBar position=\"fixed\" classes={{root:classes.appBar}} style={appBarStyle}>\n                    {appBar}\n                </AppBar>\n                <section className={classes.main}>\n                    {children}\n                </section>\n                <footer className={classes.footer}>\n                    {footer}\n                </footer>\n            </section>\n        );\n    }\n}\n\n\nSettingsLayout.propTypes = {\n    appBar: PropTypes.element,\n    footer: PropTypes.string\n};\n\nSettingsLayout = withStyles(styles)(SettingsLayout);\n\nexport {SettingsLayout};","import React from 'react';\nimport {Input, InputAdornment, withStyles } from 'material-ui';\nimport { Search } from 'material-ui-icons';\nimport {translate} from 'react-i18next';\n\nconst styles = theme => ({\n    root: {\n        position: 'absolute',\n        margin: '0 auto',\n        left: '0',\n        right: '0',\n        color : 'inherit',\n        backgroundColor : theme.palette.primary.light,\n        width: '720px',\n        height: '44px',\n        lineHeight: '40px',\n        borderRadius: '3px',\n        fontWeight: '200'\n    },\n    rootFocus: {\n        position: 'absolute',\n        margin: '0 auto',\n        left: '0',\n        right: '0',\n        color: theme.palette.text.secondary,\n        backgroundColor : '#fff',\n        width: '720px',\n        height: '44px',\n        lineHeight: '40px',\n        borderRadius: '3px',\n        fontWeight: '100',\n        boxShadow: \"0 1px 8px 0 rgba(0, 0, 0, 0.4)\",\n        // '& $input': {\n        //     width: '300px'\n        // }\n    },\n    input: {\n        transitionProperty: 'width',\n        transitionDuration: '300ms',\n        transitionTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1)',\n        transitionDelay: '0ms',\n\n    },\n    searchIcon: {\n        'marginTop': 'auto',\n        'marginBottom': 'auto',\n        'paddingLeft': '14px',\n        'opacity': '0.87'\n    }\n});\n\nclass SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.state = {\n            focus: false\n        }\n    }\n\n    handleChange(event) {\n        // Let the handler deal with the change only when the user has paused changing the filter text for a second.\n        event.persist();\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        this.timeout = setTimeout(function() {\n            this.props.onChangeFilter(event.target.value)\n        }.bind(this), 1000);\n    }\n\n    onFocus() {\n        this.setState({\n            focus: true\n        });\n        this.props.onFocus();\n    }\n\n    onBlur() {\n        this.setState({\n            focus: false\n        });\n        this.props.onBlur();\n    }\n\n    render() {\n\n        const { classes,t, placeholderLabel } = this.props;\n\n        return (\n            <Input classes={{root: (this.state.focus ? classes.rootFocus : classes.root), input: classes.input}}\n                   onChange={this.handleChange}\n                   onBlur={this.onBlur}\n                   onFocus={this.onFocus}\n                   disableUnderline={true}\n                   type=\"text\"\n                   placeholder={placeholderLabel || t('label.searchPlaceholder')}\n                   startAdornment={<InputAdornment classes={{root: classes.searchIcon}} position=\"start\"><Search/></InputAdornment>}\n            />\n        )\n    }\n}\n\nSearchBar = withStyles(styles)(translate('react-dxcomponents')(SearchBar));\n\nexport {SearchBar};","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nfunction withNodesFromPath(fragments) {\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let nodes = [];\n\n            let jcr = data.jcr;\n\n            if (jcr) {\n                if (jcr.node) {\n                    nodes = jcr.node.children.nodes;\n                }\n            }\n\n            return {\n                ...ownProps,\n                nodes: nodes,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let vars = {\n                path: props.path,\n                types: props.types,\n            };\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars,\n                skip: !props.path\n            }\n        };\n\n        let query = gql`\n            query NodesQuery($path:String!, $types:[String]!) {\n                jcr {\n                    node:nodeByPath(path: $path) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        return graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n    }\n}\n\nexport {withNodesFromPath};\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {withNodesFromPath} from \"../nodesTable/withNodesFromPath\";\nimport {Button, Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let RenderComponent = (props) => (<Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Update</TableCell>\n                        <TableCell>Delete</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableCell>{node.name}</TableCell>\n                            <TableCell>{node.myprop.value}</TableCell>\n                            <TableCell><Button onClick={() => this.props.setPropertyMutation({\n                                variables: {\n                                    path: node.path,\n                                    value: (\"test:\" + new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}>Update</Button></TableCell>\n                            <TableCell><Button onClick={() => this.props.removeNodeMutation({\n                                variables: {\n                                    path: node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}>Delete</Button></TableCell>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        );\n\n        this.Component = withNodesFromPath([{\n            applyFor: \"node\",\n            gql: gql`fragment Test on JCRNode {\n                myprop:property(name:\"myprop\") {\n                    value\n                }\n            }`\n        }])(RenderComponent);\n    }\n\n\n    render() {\n        let Component = this.Component;\n        return (\n            <div>\n                <Button onClick={() => this.props.addNodeMutation({\n                    variables: {\n                        name: (\"name-\" + (new Date().getTime())),\n                        value: (\"test:\" + new Date())\n                    },\n                    refetchQueries: [\"NodesQuery\"]\n                })}>New</Button>\n\n                <Component path={\"/\"} types={[\"nt:unstructured\"]}/>\n            </div>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path)\n        }\n    }\n`;\n\nlet MutationExample = graphql(setProperty, {name: 'setPropertyMutation'})(\n    graphql(addNode, {name: 'addNodeMutation'})(\n        graphql(removeNode, {name: 'removeNodeMutation'})(MutationExampleView)));\n\nexport {MutationExample};","import React from 'react';\nimport {Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableCell>Name</TableCell>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableCell>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableCell>\n        </TableRow>);\n\n    return (<Table>\n                <TableHead>\n                    {headers()}\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>)\n};\n\nNodesTableViewMaterial.propTypes = {\n    headers: PropTypes.func,\n    row: PropTypes.func,\n    textRenderer: PropTypes.func,\n    nodes: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, RadioButtonChecked, RadioButtonUnchecked} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterial = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <RadioButtonChecked/> :\n                        <RadioButtonUnchecked/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem: PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func\n};\n\nPickerViewMaterial = withTheme()(PickerViewMaterial);\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, CheckBoxOutlineBlank, CheckBox} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected, true) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <CheckBox/> :\n                        <CheckBoxOutlineBlank/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nPickerViewMaterialMultiple = withTheme()(PickerViewMaterialMultiple);\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass Picker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        let query = gql`\n            query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                jcr {\n                    rootNodes:nodesByPath(paths: $rootPaths) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}, limit:1) {\n                            pageInfo {\n                                totalCount\n                            }\n                        }\n                        selectable : isNodeType(type: {types:$selectable})\n                        openable : isNodeType(type: {types:$openable})\n                        ... node\n                    },\n                    openNodes:nodesByPath(paths: $openPaths) {\n                        path\n                        uuid\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                children(typesFilter:{types:$types}, limit:1) {\n                                    pageInfo {\n                                        totalCount\n                                    }\n                                }\n                                selectable : isNodeType(type: {types:$selectable})\n                                openable : isNodeType(type: {types:$openable})\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        let { fragments, ...graphqlComponentProps } = props;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        this.graphqlComponentProps = graphqlComponentProps;\n\n        let state = {};\n        let that = this;\n        if (!props.openPaths) {\n            state.openPaths = props.defaultOpenPaths ? _.clone(props.defaultOpenPaths) : [];\n            graphqlComponentProps.onOpenItem = (path,open) => {\n                that.setState( (prevState, props) => ({\n                    openPaths: open ? [\n                        ...prevState.openPaths,\n                        path\n                    ] : _.filter(prevState.openPaths, (thispath) => thispath !== path)\n                }));\n                if (props.onOpenItem) {\n                    props.onOpenItem(path,open);\n                }\n            }\n        }\n\n        if (!props.selectedPaths) {\n            state.selectedPaths = props.defaultSelectedPaths ? _.clone(props.defaultSelectedPaths) :  [];\n            graphqlComponentProps.onSelectItem = (path,selected,multiple) => {\n                that.setState((prevState, props)=> ({\n                    selectedPaths: selected ? [\n                        ...(multiple ? prevState.selectedPaths : []),\n                            path\n                        ] : _.filter(prevState.selectedPaths, (thispath) => thispath !== path)\n                }));\n                if (props.onSelectItem) {\n                    props.onSelectItem(path,select,multiple);\n                }\n            }\n        }\n        this.state = state;\n\n        this.GraphQLComponent = graphql(query, {\n            props: this.mapResultsToProps,\n            options: this.mapPropsToOptions\n        })(this.props.render);\n    }\n\n    componentDidUpdate(prevProps, prevState, prevContext) {\n        if (this.props.onSelectionChange && !_.isEqual(this.state.selectedPaths,prevState.selectedPaths)) {\n            this.props.onSelectionChange(this.state.selectedPaths);\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextState) {\n        let { fragments, onOpenItem, onSelectItem, ...graphqlComponentProps } = nextProps;\n        _.assign(this.graphqlComponentProps, graphqlComponentProps);\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let selectedPaths = ownProps.selectedPaths;\n        let openPaths = ownProps.openPaths ? ownProps.openPaths : [];\n\n        let pickerEntries = [];\n        let nodesById = {};\n        let jcr = data.jcr;\n\n        let addNode = function (node, depth, index) {\n            let selected = false;\n            if (node.selectable) {\n                selected = _.indexOf(selectedPaths, node.path) !== -1\n            }\n            let pickerNode = {\n                name: node.name,\n                path: node.path,\n                open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                selected: selected,\n                openable: node.openable,\n                selectable: node.selectable,\n                depth: depth,\n                prefix: _.repeat(\"&nbsp;\", depth * 3),\n                node: node,\n                hidden: false,\n                hasChildren: node.children.pageInfo.totalCount > 0\n            };\n            pickerEntries.splice(index, 0, pickerNode);\n            nodesById[node.uuid] = pickerNode;\n            return pickerNode;\n        };\n\n        if (jcr) {\n            if (jcr.rootNodes) {\n                _.forEach(jcr.rootNodes, rootNode => {\n                    let root = addNode(rootNode, 0, 0);\n                    root.hidden = ownProps.hideRoot;\n                });\n            }\n            if (jcr.openNodes) {\n                _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                    let parent = nodesById[node.uuid];\n                    if (parent) {\n                        let parentIndex = _.indexOf(pickerEntries, parent);\n                        _.forEachRight(node.children.nodes, (child) => {\n                            addNode(child, parent.depth + 1, parentIndex + 1)\n                        })\n                    }\n                });\n            }\n        }\n\n        // Nodes loaded, fill selection list\n        let selectedNodes = _.filter(pickerEntries, (node) => {\n            return node.selected\n        }).map((node) => {\n            return node.node\n        });\n\n        selectedPaths = _.map(selectedNodes, \"path\");\n        pickerEntries = _.filter(pickerEntries, pickerNode => {\n            return !pickerNode.hidden;\n        });\n\n        return {\n            ...ownProps,\n            pickerEntries: pickerEntries,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let openPaths = props.openPaths ? props.openPaths : [];\n\n        let fullyOpenPath = (props, path) => {\n            let rootFound = false;\n            _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                if (!rootFound) {\n                    _.forEach(props.rootPaths, rootPath => {\n                        rootFound = rootFound || _.startsWith(acc, rootPath);\n                    })\n                }\n                if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                    openPaths.push(acc);\n                }\n                return acc + \"/\" + it\n            }, \"\");\n        };\n\n        if (props.selectedPaths) {\n            _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n        }\n\n        let vars = {\n            rootPaths: props.rootPaths,\n            types: _.union(props.openableTypes, props.selectableTypes),\n            selectable: props.selectableTypes,\n            openable: props.openableTypes,\n            openPaths: openPaths,\n        };\n\n        if (props.queryVariables) {\n            _.assign(vars, props.queryVariables);\n        }\n\n        return {\n            variables: vars\n        }\n    }\n\n    render() {\n        let GraphQLComponent = this.GraphQLComponent;\n\n        return <GraphQLComponent {...this.graphqlComponentProps} {...this.state} />\n    }\n}\n\nPicker.propTypes = {\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open by default (uncontrolled mode)\n     */\n    defaultOpenPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of open folders in controlled mode\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * Preselected items path (uncontrolled mode)\n     */\n    defaultSelectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of selected path in controlled mode\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Callback when the selection has changed\n     */\n    onSelectionChange: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree. Should accept : pickerEntries,onSelectItem,onOpenItem . Other properties are passed through.\n     */\n    render: PropTypes.func,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    queryVariables: PropTypes.object\n\n};\n\n\nexport {Picker}","import React from 'react';\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\n\nfunction withPathFromSelection(reduxStoreId) {\n    return (WrappedComponent) => {\n        return connect(\n            (state, ownProps) => ({\n                ...ownProps,\n                path: (state[\"selectedPaths_\" + reduxStoreId] && state[\"selectedPaths_\" + reduxStoreId].length === 1) ? state[\"selectedPaths_\" + reduxStoreId][0] : null,\n            }),\n            () => ({}))(WrappedComponent);\n    }\n}\n\nexport { withPathFromSelection }","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction withNotifications() {\n    return (WrappedComponent) => {\n        let Component = class extends React.Component {\n            render() {\n                return (<WrappedComponent notificationContext={this.context.notificationContext} {...this.props} />)\n            }\n        };\n\n        Component.contextTypes = {\n            notificationContext: PropTypes.object\n        };\n\n        return Component\n    }\n}\n\nexport { withNotifications }"]}