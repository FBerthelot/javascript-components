{"version":3,"sources":["../src/javascript/themeProvider.js","../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/picker/PickerData.jsx","../src/javascript/reduxStore.js","../src/javascript/picker/PickerRedux.jsx","../src/javascript/picker/PickerState.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/nodesTable/NodesTableData.jsx","../src/javascript/nodesTable/NodesTable.jsx","../src/javascript/router/createOutletHistory.js","../src/javascript/router/router.js","../src/javascript/engine/Engine.jsx","../src/javascript/router/RouterExample.jsx","../src/javascript/mutations/Mutation.jsx","../src/javascript/picker/Picker.jsx","../src/javascript/picker/PickerView.jsx","../src/javascript/layout/TestLayout.jsx"],"names":["muiTheme","window","req","global","request","theme","_","lightBaseTheme","userAgent","getHeader","getMuiTheme","SimpleListView","props","state","this","components","done","then","reactElements","setState","componentDidMount","React","Component","DynamicComponentsList","componentCache","data","_ref","ownProps","jcr","safeEval","eval","nodesByQuery","nodes","n","renderedView","output","imports","c","concat","getImports","promise","length","Promise","all","imp","SystemJS","import","m","s","r","createElement","apply","ReactDOM","toConsumableArray","splice","id","renderComponent","cacheMatch","f","dataComponent","query","gql","_templateObject","graphql","mapResultsToProps","mapPropsToOptions","push","client","SelectableList","makeSelectable","List","PickerViewMaterial","value","selectedPath","onChange","event","path","pickerEntries","find","entry","selectable","onSelectItem","map","ListItem","key","nestedLevel","depth","call","_this","name","openable","onOpenItem","open","ExpandLess","ExpandMore","PickerViewMaterialMultiple","primaryTogglesNestedList","primaryText","Checkbox","checked","selected","rightIconButton","onClick","PickerData","selectedPaths","multipleSelection","openPaths","nodesById","addNode","node","index","pickerNode","uuid","rootNodes","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","children","child","selectedNodes","fullyOpenPath","rootFound","reduce","acc","it","rootPaths","rootPath","vars","openableTypes","selectableTypes","variables","fragments","JSON","stringify","_templateObject$1","reducers","store","debugTool","__REDUX_DEVTOOLS_EXTENSION__","createStore","arguments","undefined","action","resetStateReducer","type","PickerRedux","PickerReduxWithoutStore","connect","mapStateToProps","mapDispatchToProps","dispatch","select","_this2","indexOf","filter","_this3","_this4","PickerState","thispath","_extends","bind","NodesTableViewMaterial","headers","row","NodesTableData","types","_templateObject$2","NodesTable","NodesTableWithoutStore","defaultPath","createOutletHistory","baseHistory","outletName","getPath","parts","base","location","pathname","newPath","substr","split","p","startsWith","getState","newState","extractPath","part","initialLocation","listeners","history","createHref","replace","go","goBack","goForward","prompt","block","listener","unlisten","listen","assign","createHashHistory","OutletRouter","outletHistory","outlet","dispose","Engine","FlatButton","label","handleOpen","primary","handleClose","keyboardFocused","e","link","to","Route","component","RouterExample","Test1","match","params","Test2","MutationExampleView","frags","_templateObject$3","addNodeMutation","Date","getTime","displaySelectAll","displayRowCheckbox","myprop","setPropertyMutation","removeNodeMutation","setProperty","_templateObject2","_templateObject3","removeNode","_templateObject4","MutationExample","Picker","pickerType","style","marginLeft","target","fluid","xs","md","leftCol","rightCol"],"mappings":"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","sourcesContent":["import {getMuiTheme, lightBaseTheme} from 'material-ui/styles/index';\nimport * as _ from \"lodash\";\n\nfunction muiTheme() {\n    let ssrMode = (typeof window === 'undefined');\n    if (ssrMode) {\n        var req = global.request;\n\n        let theme = _.clone(lightBaseTheme);\n        theme.userAgent = req.getHeader(\"User-Agent\");\n        return getMuiTheme(theme);\n    } else {\n        return getMuiTheme(lightBaseTheme);\n    }\n}\n\nexport { muiTheme };","import React from 'react';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<MuiThemeProvider muiTheme={muiTheme()}><div>{this.state.reactElements}</div></MuiThemeProvider>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedView.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedView(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nexport {DynamicComponentsList};\n","import React from 'react';\nimport {IconButton, List, ListItem, makeSelectable} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\nimport {ExpandLess, ExpandMore} from 'material-ui-icons'\n\nlet SelectableList = makeSelectable(List);\n\nlet PickerViewMaterial = function (props) {\n    return (\n        <MuiThemeProvider muiTheme={muiTheme()}>\n            <SelectableList value={props.selectedPath} onChange={\n                (event, path) => {\n                    if (path && (props.pickerEntries.find(entry => entry.path === path).selectable)) {\n                        props.onSelectItem(path, true)\n                    }\n                }\n            }>\n                {props.pickerEntries.map((entry) =>\n                    (<ListItem value={entry.path} key={entry.path} nestedLevel={entry.depth + 1}\n                               primaryText={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name}\n                               rightIconButton={entry.openable ? (<IconButton\n                                   onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                   <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    />)\n                )}\n            </SelectableList>\n        </MuiThemeProvider>\n    )\n};\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {Checkbox, IconButton, List, ListItem} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\n\nimport {ExpandLess, ExpandMore} from 'material-ui-icons'\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (\n        <MuiThemeProvider muiTheme={muiTheme()}>\n            <List>\n                {props.pickerEntries.map((entry) =>\n                    (<ListItem primaryTogglesNestedList={true} key={entry.path} nestedLevel={entry.depth+1} primaryText={props['textRenderer'] ? props['textRenderer'].call(this,entry) : entry.name}\n                               leftCheckbox={entry.selectable ? <Checkbox checked={ entry.selected } /> : null}\n                               onClick={()=>{if (entry.selectable) { props.onSelectItem(entry.path, !entry.selected)}}} rightIconButton={entry.openable ? <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{ entry.open ? <ExpandLess/> : <ExpandMore/> }</IconButton> : null}\n                    />)\n                )}\n            </List>\n        </MuiThemeProvider>\n\n    )\n};\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {PickerViewMaterial} from './PickerViewMaterial'\nimport {PickerViewMaterialMultiple} from \"./PickerViewMaterialMultiple\";\n\nclass PickerData extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let selectedPaths = ownProps.multipleSelection ? ownProps.selectedPaths : [ownProps.selectedPath];\n        let openPaths = ownProps.openPaths;\n\n        let pickerEntries = [];\n        let nodesById = {};\n        let jcr = data.jcr;\n\n        let addNode = function (node, depth, index) {\n            let selected = false;\n            if (node.selectable) {\n                selected = _.indexOf(selectedPaths, node.path) !== -1\n            }\n            let pickerNode = {\n                name: node.name,\n                path: node.path,\n                open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                selected: selected,\n                openable: node.openable,\n                selectable: node.selectable,\n                depth: depth,\n                prefix: _.repeat(\"&nbsp;\", depth * 3),\n                node: node,\n                hidden: false\n            };\n            pickerEntries.splice(index, 0, pickerNode);\n            nodesById[node.uuid] = pickerNode;\n            return pickerNode;\n        };\n\n        if (jcr) {\n            if (jcr.rootNodes) {\n                _.forEach(jcr.rootNodes, rootNode => {\n                    let root = addNode(rootNode, 0, 0);\n                    root.hidden = ownProps.hideRoot;\n                });\n            }\n            if (jcr.openNodes) {\n                _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                    let parent = nodesById[node.uuid];\n                    if (parent) {\n                        let parentIndex = _.indexOf(pickerEntries, parent);\n                        _.forEachRight(node.children.nodes, (child) => {\n                            addNode(child, parent.depth + 1, parentIndex + 1)\n                        })\n                    }\n                });\n            }\n        }\n\n        // Nodes loaded, fill selection list\n        let selectedNodes = _.filter(pickerEntries, (node) => {\n            return node.selected\n        }).map((node) => {\n            return node.node\n        });\n\n        selectedPaths = _.map(selectedNodes, \"path\");\n        pickerEntries = _.filter(pickerEntries, pickerNode => {\n            return !pickerNode.hidden;\n        });\n        return {\n            ...ownProps,\n            pickerEntries: pickerEntries,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let fullyOpenPath = (props, path) => {\n            let rootFound = false;\n            _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                if (!rootFound) {\n                    _.forEach(props.rootPaths, rootPath => {\n                        rootFound = rootFound || _.startsWith(acc, rootPath);\n                    })\n                }\n                if (rootFound && _.indexOf(props.openPaths, acc) === -1) {\n                    props.openPaths.push(acc);\n                }\n                return acc + \"/\" + it\n            }, \"\");\n        };\n\n        if (props.multipleSelection) {\n            _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n        } else {\n            fullyOpenPath(props, props.selectedPath);\n        }\n\n        let vars = {\n            rootPaths: props.rootPaths,\n            types: _.union(props.openableTypes, props.selectableTypes),\n            selectable: props.selectableTypes,\n            openable: props.openableTypes,\n            openPaths: props.openPaths,\n        };\n        if (props.variables) {\n            _.assign(vars, props.variables);\n        }\n\n        return {\n            variables: vars\n        }\n    }\n\n    render() {\n        let fragments = this.props.fragments;\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => JSON.stringify(f.fragments) === JSON.stringify(fragments) && f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                    jcr {\n                        rootNodes:nodesByPath(paths: $rootPaths) {\n                            path\n                            uuid\n                            name\n                            selectable : isNodeType(type: {types:$selectable})\n                            openable : isNodeType(type: {types:$openable})\n                            ... node\n                        },\n                        openNodes:nodesByPath(paths: $openPaths) {\n                            path\n                            uuid\n                            children(typesFilter:{types:$types}) {\n                                nodes {\n                                    path\n                                    uuid\n                                    name\n                                    selectable : isNodeType(type: {types:$selectable})\n                                    openable : isNodeType(type: {types:$openable})\n                                    ... node\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            replaceFragmentsInDocument(query, fragments);\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || this.props.multipleSelection ? PickerViewMaterialMultiple : PickerViewMaterial);\n\n            this.componentCache.push({fragments: fragments, renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider  client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nexport { PickerData };\n","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import React from 'react';\nimport {connect, Provider} from 'react-redux'\nimport {PickerData} from './PickerData'\nimport {reducers, store, resetStateReducer} from \"../reduxStore\";\n\nclass PickerRedux extends React.Component {\n    constructor(props) {\n        super(props);\n        this.PickerReduxWithoutStore = connect(this.mapStateToProps, this.mapDispatchToProps)(PickerData);\n    }\n\n    mapStateToProps(state, ownProps) {\n        if (ownProps.multipleSelection) {\n            return {\n                ...ownProps,\n                openPaths: state[\"openPaths_\" + ownProps.id] ? state[\"openPaths_\" + ownProps.id] : ownProps.openPaths,\n                selectedPaths: state[\"selectedPaths_\" + ownProps.id] ? state[\"selectedPaths_\" + ownProps.id] : ownProps.selectedPaths\n            }\n        } else {\n            return {\n                ...ownProps,\n                openPaths: state[\"openPaths_\" + ownProps.id] ? state[\"openPaths_\" + ownProps.id] : ownProps.openPaths,\n                selectedPath: state[\"selectedPath_\" + ownProps.id] ? state[\"selectedPath_\" + ownProps.id] : ownProps.selectedPath\n            }\n        }\n    };\n\n    mapDispatchToProps(dispatch, ownProps) {\n        return {\n            onSelectItem(path, select) {\n                dispatch({\n                    type: select ? 'SELECT_PICKER_ENTRY_' + ownProps.id : 'UNSELECT_PICKER_ENTRY_' + ownProps.id,\n                    path: path\n                })\n            },\n            onOpenItem(path, open) {\n                dispatch({\n                    type: open ? 'OPEN_PICKER_ENTRY_' + ownProps.id : 'CLOSE_PICKER_ENTRY_' + ownProps.id,\n                    path: path\n                })\n            }\n        }\n    };\n\n    openPaths() {\n        return (state = this.props.openPaths || [], action) => {\n            let index = state.indexOf(action.path);\n            if (action.type === 'OPEN_PICKER_ENTRY_' + this.props.id && index === -1) {\n                return [\n                    ...state,\n                    action.path\n                ]\n            } else if (action.type === 'CLOSE_PICKER_ENTRY_' + this.props.id && index !== -1) {\n                return _.filter(state, (path) => path !== action.path);\n            }\n            return state;\n        };\n    }\n\n\n    selectedPath() {\n        return (state = this.props.selectedPath, action) => {\n            if (action.type === 'SELECT_PICKER_ENTRY_' + this.props.id) {\n                return action.path\n            } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + this.props.id) {\n                return null;\n            }\n            return state;\n        };\n    }\n\n    selectedPaths() {\n        return (state = this.props.selectedPaths || [], action) => {\n            let index = state.indexOf(action.path);\n            if (action.type === 'SELECT_PICKER_ENTRY_' + this.props.id && index === -1) {\n                return [\n                    ...state,\n                    action.path\n                ]\n            } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + this.props.id && index !== -1) {\n                return _.filter(state, (path) => path !== action.path);\n            }\n            return state;\n        };\n    }\n\n\n    componentWillMount() {\n        reducers[\"openPaths_\" + this.props.id] = this.openPaths();\n        if (this.props.multipleSelection) {\n            reducers[\"selectedPaths_\" + this.props.id] = this.selectedPaths();\n        } else {\n            reducers[\"selectedPath_\" + this.props.id] = this.selectedPath();\n        }\n    }\n\n    componentWillUnmount() {\n        reducers[\"openPaths_\" + this.props.id] = resetStateReducer;\n        reducers[\"selectedPath_\" + this.props.id] = resetStateReducer;\n        reducers[\"selectedPaths_\" + this.props.id] = resetStateReducer;\n\n        store.dispatch({type:\"RESET_STATE\"});\n\n        delete reducers[\"openPaths_\" + this.props.id];\n        delete reducers[\"selectedPath_\" + this.props.id];\n        delete reducers[\"selectedPaths_\" + this.props.id];\n    }\n\n    render() {\n        let PickerReduxWithoutStore = this.PickerReduxWithoutStore;\n        return (<Provider store={ store }><PickerReduxWithoutStore {...this.props}/></Provider>)\n    }\n}\n\nexport { PickerRedux };\n","import React from 'react';\nimport {PickerData} from './PickerData';\nimport * as _ from \"lodash\";\n\n\nclass PickerState extends React.Component {\n\n    constructor(props) {\n        super(props);\n        if (props.multipleSelection) {\n            this.state = {\n                openPaths: props.openPaths ? props.openPaths : [],\n                selectedPaths: props.selectedPaths ? props.selectedPaths : []\n            }\n        } else {\n            this.state = {\n                openPaths: props.openPaths ? props.openPaths : [],\n                selectedPath: props.selectedPath ? props.selectedPath : null\n            }\n        }\n    }\n\n    onSelectItem(state, path, selected) {\n        if (this.props.multipleSelection) {\n            this.setState({\n                openPaths: state.openPaths,\n                selectedPaths: selected ? [\n                    ...state.selectedPaths,\n                    path\n                ] : _.filter(state.selectedPaths, (thispath) => thispath !== path),\n            });\n        } else {\n            this.setState({\n                openPaths: state.openPaths,\n                selectedPath: selected ? path : null\n            });\n        }\n\n    }\n\n    onOpenItem(state, path, open) {\n        if (this.props.multipleSelection) {\n            this.setState({\n                openPaths: open ? [\n                    ...state.openPaths,\n                    path\n                ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                selectedPaths: state.selectedPaths\n            });\n        } else {\n            this.setState({\n                openPaths: open ? [\n                    ...state.openPaths,\n                    path\n                ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                selectedPath: state.selectedPath\n            });\n        }\n    }\n\n\n    render() {\n        if (this.props.multipleSelection) {\n            return React.createElement(PickerData, {\n                ...this.props,\n                openPaths: this.state.openPaths,\n                selectedPaths: this.state.selectedPaths,\n                onOpenItem: this.onOpenItem.bind(this, this.state),\n                onSelectItem: this.onSelectItem.bind(this, this.state)\n            })\n        } else {\n            return React.createElement(PickerData, {\n                ...this.props,\n                openPaths: this.state.openPaths,\n                selectedPath: this.state.selectedPath,\n                onOpenItem: this.onOpenItem.bind(this, this.state),\n                onSelectItem: this.onSelectItem.bind(this, this.state)\n            })\n        }\n    }\n}\n\nexport { PickerState }\n","import React from 'react';\nimport {\n    Table,\n    TableBody,\n    TableHeader,\n    TableHeaderColumn,\n    TableRow,\n    TableRowColumn\n} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableHeaderColumn>Name</TableHeaderColumn>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableRowColumn>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableRowColumn>\n        </TableRow>);\n\n    return (\n        <MuiThemeProvider muiTheme={muiTheme()}>\n            <Table>\n                <TableHeader >\n                    {headers()}\n                </TableHeader>\n                <TableBody >\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>\n        </MuiThemeProvider>\n    )\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {NodesTableViewMaterial} from './NodesTableViewMaterial'\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nclass NodesTableData extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let nodes = [];\n\n        let jcr = data.jcr;\n\n        if (jcr) {\n            if (jcr.node) {\n                nodes = jcr.node.children.nodes;\n            }\n        }\n\n        return {\n            ...ownProps,\n            nodes: nodes,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let vars = {\n            path: props.path,\n            types: props.types,\n        };\n        if (props.variables) {\n            _.assign(vars, props.variables);\n        }\n\n        return {\n            variables: vars,\n            skip: !props.path\n        }\n    }\n\n    render() {\n        let fragments = this.props.fragments;\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => JSON.stringify(f.fragments) === JSON.stringify(fragments) && f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query NodesQuery($path:String!, $types:[String]!) {\n                    jcr {\n                        node:nodeByPath(path: $path) {\n                            path\n                            uuid\n                            name\n                            children(typesFilter:{types:$types}) {\n                                nodes {\n                                    path\n                                    uuid\n                                    name\n                                    ... node\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            replaceFragmentsInDocument(query, fragments);\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || NodesTableViewMaterial);\n\n            this.componentCache.push({fragments: fragments, renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider  client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nexport { NodesTableData };\n","import React from 'react';\nimport {NodesTableData} from './NodesTableData'\nimport {connect, Provider} from 'react-redux'\nimport {reducers, store} from \"../reduxStore\";\n\nclass NodesTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.NodesTableWithoutStore = connect(this.mapStateToProps, this.mapDispatchToProps)(NodesTableData);\n    }\n\n    mapStateToProps(state, ownProps) {\n        return {\n            ...ownProps,\n            path: state[\"selectedPath_\"+ ownProps.id] ? state[\"selectedPath_\"+ ownProps.id] : ownProps.defaultPath,\n        }\n    };\n\n    mapDispatchToProps(dispatch, ownProps) {\n        return {\n        }\n    };\n\n    componentWillMount() {\n    }\n\n    componentWillUnmount() {\n    }\n\n    render() {\n        let NodesTableWithoutStore = this.NodesTableWithoutStore;\n        return (<Provider store={ store }><NodesTableWithoutStore {...this.props}/></Provider>)\n    }\n}\n\nexport { NodesTable };\n","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nlet baseHistory = createHashHistory();\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {Dialog, FlatButton} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\nimport * as _ from \"lodash\";\nimport {OutletRouter as Router} from '../router/router'\nimport {Link, Route} from 'react-router-dom'\n\nclass Engine extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n        };\n        this.components = [\n            {\n                link:\"/link1\",\n                label:\"Link 1\",\n                component: (props) => <div>toto</div>\n            },\n            {\n                link:\"/link2\",\n                label:\"Link 2\",\n                component: (props) => (<div>titi</div>)\n            }\n        ];\n    }\n\n    handleOpen() {\n        this.setState({open: true});\n    };\n\n    handleClose() {\n        this.setState({open: false});\n    };\n\n    render() {\n        return (<MuiThemeProvider muiTheme={muiTheme()}>\n            <div>\n                <FlatButton label=\"Open\" onClick={()=>this.handleOpen()}/>\n                <Dialog\n                    title=\"Dialog With Actions\"\n                    actions={[\n                        <FlatButton label=\"Cancel\" primary={true} onClick={()=>this.handleClose()}/>,\n                        <FlatButton label=\"Submit\" primary={true} keyboardFocused={true} onClick={()=>this.handleClose()}/>\n                    ]}\n                    modal={false}\n                    open={this.state.open}\n                    onRequestClose={()=>this.handleClose()}\n                >\n                    <Router outlet={\"outlet1\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                    <Router outlet={\"outlet2\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                </Dialog>\n\n            </div>\n        </MuiThemeProvider>);\n    }\n\n\n}\n\nexport {Engine}\n","import React from 'react';\nimport {OutletRouter as Router} from './router'\nimport {Link, Route} from 'react-router-dom'\n\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (<div>Test1 {props.match.params.value}</div>)\n        let Test2 = props => (<div>Test2</div>);\n        let Test3 = props => (<div>Test3</div>);\n\n        return (<Router outlet={this.props.id}>\n            <div>\n\n                ---- links : ----\n                <Link to={'/test1/toto'}>Test1 toto</Link> -\n                <Link to={'/test1/tutu'}>Test1 tutu</Link> -\n                <Link to={'/test2'}>Test2</Link> -\n                <Link to={'/test3'}>Test3</Link> -\n\n                <Router outlet=\"new\">\n                    <div>\n                        <Link to={'/test1'}>Test1/other</Link> -\n                        <Link to={'/test2'}>Test2/other</Link>\n                    </div>\n                </Router>\n                ---- routes : ----\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n\n                <Router outlet=\"new\">\n                    <div>\n                        <Route path={'/test1'} component={Test1}/>\n                        <Route path={'/test2'} component={Test2}/>\n                    </div>\n                </Router>\n\n                ------------------\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {client} from \"@jahia/apollo-dx\";\nimport {NodesTableData} from \"../nodesTable/NodesTableData\";\nimport {FlatButton, Table, TableBody, TableHeader, TableHeaderColumn, TableRow, TableRowColumn} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {muiTheme} from '../themeProvider';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n        let fragment = gql`fragment Test on JCRNode {\n            myprop:property(name:\"myprop\") {\n                value\n            }\n        }`;\n\n        // let query = gql`query GetNode($path:String!) {\n        //     jcr {\n        //         nodeByPath(path:$path) {\n        //             uuid\n        //             path\n        //             ...Test\n        //         }\n        //     }\n        // } ${fragment}`;\n        //\n        // let update = (proxy, mutationResult) => {\n        //     let updatedPath = mutationResult.data.jcr.mutateNode.node.path;\n        //\n        //     let variables = {path:updatedPath};\n        //     const data = proxy.readQuery({query, variables});\n        //\n        //     delete data.jcr.nodeByPath.myprop;\n        //\n        //     debugger;\n        //\n        //     proxy.writeQuery({query, variables, data});\n        // }\n\n\n        let frags = [{\n            applyFor: \"node\",\n            gql: fragment\n        }];\n\n        let RenderComponent = (props) => (<Table>\n                <TableHeader displaySelectAll={false} >\n                    <TableRow>\n                        <TableHeaderColumn>Name</TableHeaderColumn>\n                        <TableHeaderColumn>Value</TableHeaderColumn>\n                        <TableHeaderColumn>Update</TableHeaderColumn>\n                        <TableHeaderColumn>Delete</TableHeaderColumn>\n                    </TableRow>\n                </TableHeader>\n                <TableBody displayRowCheckbox={false} selectable={false}>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableRowColumn>{node.name}</TableRowColumn>\n                            <TableRowColumn>{node.myprop.value}</TableRowColumn>\n                            <TableRowColumn><FlatButton label={\"Update\"} onClick={() => this.props.setPropertyMutation({\n                                variables:{\n                                    path:node.path,\n                                    value:(\"test:\"+new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}/></TableRowColumn>\n                            <TableRowColumn><FlatButton label={\"Delete\"} onClick={() => this.props.removeNodeMutation({\n                                variables:{\n                                    path:node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}/></TableRowColumn>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        )\n\n        return (\n            <MuiThemeProvider muiTheme={muiTheme()}>\n            <div>\n            <FlatButton label=\"New\" onClick={() => this.props.addNodeMutation({\n                variables:{\n                    name:(\"name-\"+(new Date().getTime())),\n                    value:(\"test:\"+new Date())\n                },\n                refetchQueries: [\"NodesQuery\"]\n            })} />\n\n            <NodesTableData path={\"/\"} types={[\"nt:unstructured\"]} fragments={frags} renderComponent={RenderComponent}/>\n            </div></MuiThemeProvider>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutation {\n                    mutateProperty(name:\"myprop\") {\n                        setValue(value:$value)\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path) \n        }\n    }\n`;\n\nclass MutationExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.Component =\n            graphql(setProperty, { name: 'setPropertyMutation' })(\n                graphql(addNode, { name: 'addNodeMutation' })(\n                    graphql(removeNode, { name: 'removeNodeMutation' })(MutationExampleView)));\n    }\n\n    render() {\n        let Component = this.Component;\n        return (<ApolloProvider client={client}><Component/></ApolloProvider>)\n    }\n}\n\nexport { MutationExample};","import React from 'react';\nimport {PickerRedux} from './PickerRedux'\nimport {PickerState} from './PickerState'\n\nlet Picker = function(props) {\n    let Picker = props.pickerType === \"state\" ? PickerState : PickerRedux;\n    return (<Picker {...props} />);\n};\n\nexport { Picker };","import React from 'react';\n\nlet PickerView = function (props) {\n    return (\n        <div>\n            {props.pickerEntries.map((entry) => (\n                <div key={entry.path} style={{marginLeft: (10* entry.depth)+'px'}}>\n                    <input type=\"checkbox\" checked={ entry.open } onChange={(event) => props.onOpenItem(entry.path, event.target.checked)}/>\n                    <input type=\"checkbox\" checked={ entry.selected } onChange={(event) => props.onSelectItem(entry.path, event.target.checked)}/>\n                    <span>{props['textRenderer'] ? props['textRenderer'].call(this,entry) : entry.name}</span>\n                </div>\n            ))}\n        </div>\n    )\n};\n\nexport { PickerView };","import React from 'react';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\n\nlet TestLayout = function(props) {\n    return (<Grid fluid>\n        <Row>\n            <Col xs={6} md={3}>{props.leftCol}</Col>\n            <Col xs={6} md={6}>{props.rightCol}</Col>\n        </Row>\n    </Grid>);\n};\n\nexport { TestLayout };"]}