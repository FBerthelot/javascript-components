{"version":3,"sources":["../src/javascript/theme.js","../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/picker/PickerData.jsx","../src/javascript/reduxStore.js","../src/javascript/picker/PickerRedux.jsx","../src/javascript/picker/PickerState.jsx","../src/javascript/picker/Picker.jsx","../src/javascript/picker/PickerView.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/nodesTable/NodesTableData.jsx","../src/javascript/nodesTable/NodesTable.jsx","../src/javascript/layout/TestLayout.jsx","../src/javascript/router/createOutletHistory.js","../src/javascript/router/router.js","../src/javascript/engine/Engine.jsx","../src/javascript/router/RouterExample.jsx","../src/javascript/mutations/Mutation.jsx"],"names":["defaultTheme","createMuiTheme","theme","indigo","palette","getContrastText","pink","A200","A400","A700","red","SimpleListView","props","state","this","components","done","then","reactElements","setState","componentDidMount","React","muiTheme","Component","DynamicComponentsList","componentCache","data","_ref","ownProps","jcr","safeEval","eval","nodesByQuery","_","nodes","n","renderedView","output","imports","c","concat","getImports","promise","length","Promise","all","imp","SystemJS","import","m","s","r","createElement","apply","ReactDOM","toConsumableArray","splice","id","renderComponent","cacheMatch","f","dataComponent","query","gql","_templateObject","graphql","mapResultsToProps","mapPropsToOptions","push","client","propTypes","PropTypes","string","isRequired","element","PickerViewMaterial","value","selectedPath","onChange","event","path","pickerEntries","find","entry","selectable","onSelectItem","map","ListItem","key","nestedLevel","depth","call","_this","name","openable","onOpenItem","open","ExpandLess","ExpandMore","array","func","PickerViewMaterialMultiple","primaryTogglesNestedList","primaryText","Checkbox","checked","selected","rightIconButton","onClick","PickerData","selectedPaths","multipleSelection","openPaths","nodesById","addNode","node","index","pickerNode","uuid","rootNodes","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","children","child","selectedNodes","fullyOpenPath","rootFound","reduce","acc","it","rootPaths","rootPath","vars","openableTypes","selectableTypes","variables","fragments","JSON","stringify","_templateObject$1","arrayOf","bool","oneOfType","shape","object","reducers","store","debugTool","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","arguments","undefined","action","resetStateReducer","type","PickerRedux","PickerReduxWithoutStore","connect","mapStateToProps","mapDispatchToProps","dispatch","select","_this2","indexOf","filter","_this3","_this4","PickerState","thispath","_extends","bind","Picker","pickerType","oneOf","defaultProps","PickerView","style","marginLeft","target","NodesTableViewMaterial","headers","row","NodesTableData","types","_templateObject$2","NodesTable","NodesTableWithoutStore","defaultPath","TestLayout","container","item","xs","md","leftCol","rightCol","createOutletHistory","baseHistory","outletName","getPath","parts","base","location","pathname","newPath","substr","split","p","startsWith","getState","newState","extractPath","part","initialLocation","listeners","history","createHref","replace","go","goBack","goForward","prompt","block","listener","unlisten","listen","assign","createHashHistory","OutletRouter","outletHistory","outlet","dispose","Engine","Button","label","handleOpen","primary","handleClose","keyboardFocused","e","link","to","Route","component","RouterExample","Test1","match","params","Test2","MutationExampleView","frags","_templateObject$3","addNodeMutation","Date","getTime","myprop","setPropertyMutation","removeNodeMutation","setProperty","_templateObject2","_templateObject3","removeNode","_templateObject4","MutationExample"],"mappings":"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","sourcesContent":["import {createMuiTheme} from 'material-ui';\nimport * as _ from \"lodash\";\n\nconst defaultTheme = createMuiTheme()\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\nconst theme = createMuiTheme({\n    palette: {\n        contrastThreshold: 3.1,\n        tonalOffset: 0.07,\n        primary: {\n            light: indigo[300],\n            main: indigo[500],\n            dark: indigo[700],\n            contrastText: defaultTheme.palette.getContrastText(indigo[500]),\n        },\n        secondary: {\n            light: pink.A200,\n            main: pink.A400,\n            dark: pink.A700,\n            contrastText: defaultTheme.palette.getContrastText(pink.A400),\n        },\n        error: red.A400,\n    },\n});\n\nexport { theme }\n","import React from 'react';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {theme} from '../theme';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<MuiThemeProvider muiTheme={theme}><div>{this.state.reactElements}</div></MuiThemeProvider>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedView.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedView(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nDynamicComponentsList.propTypes = {\n    /**\n     * Id of the \"componentsFolder\" to look for\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Component to use to do the rendering\n     */\n    renderComponent: PropTypes.element\n}\n\nexport {DynamicComponentsList};\n","import React from 'react';\nimport {IconButton, List, ListItem} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {theme} from '../theme';\nimport {ExpandLess, ExpandMore} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\n// let SelectableList = makeSelectable(List);\n\nlet PickerViewMaterial = function (props) {\n    return (\n        <MuiThemeProvider muiTheme={theme}>\n            <List value={props.selectedPath} onChange={\n                (event, path) => {\n                    if (path && (props.pickerEntries.find(entry => entry.path === path).selectable)) {\n                        props.onSelectItem(path, true)\n                    }\n                }\n            }>\n                {props.pickerEntries.map((entry) =>\n                    (<ListItem value={entry.path} key={entry.path} nestedLevel={entry.depth + 1}\n                               primaryText={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name}\n                               rightIconButton={entry.openable ? (<IconButton\n                                   onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                   <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    />)\n                )}\n            </List>\n        </MuiThemeProvider>\n    )\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    selectedPath: PropTypes.string,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {Checkbox, IconButton, List, ListItem} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {theme} from '../theme';\nimport PropTypes from 'prop-types';\n\nimport {ExpandLess, ExpandMore} from 'material-ui-icons'\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (\n        <MuiThemeProvider muiTheme={theme}>\n            <List>\n                {props.pickerEntries.map((entry) =>\n                    (<ListItem primaryTogglesNestedList={true} key={entry.path} nestedLevel={entry.depth+1} primaryText={props['textRenderer'] ? props['textRenderer'].call(this,entry) : entry.name}\n                               leftCheckbox={entry.selectable ? <Checkbox checked={ entry.selected } /> : null}\n                               onClick={()=>{if (entry.selectable) { props.onSelectItem(entry.path, !entry.selected)}}} rightIconButton={entry.openable ? <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{ entry.open ? <ExpandLess/> : <ExpandMore/> }</IconButton> : null}\n                    />)\n                )}\n            </List>\n        </MuiThemeProvider>\n\n    )\n};\n\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n\n};\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {PickerViewMaterial} from './PickerViewMaterial'\nimport {PickerViewMaterialMultiple} from \"./PickerViewMaterialMultiple\";\nimport PropTypes from 'prop-types';\n\nclass PickerData extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let selectedPaths = ownProps.multipleSelection ? ownProps.selectedPaths : [ownProps.selectedPath];\n        let openPaths = ownProps.openPaths ? ownProps.openPaths : [];\n\n        let pickerEntries = [];\n        let nodesById = {};\n        let jcr = data.jcr;\n\n        let addNode = function (node, depth, index) {\n            let selected = false;\n            if (node.selectable) {\n                selected = _.indexOf(selectedPaths, node.path) !== -1\n            }\n            let pickerNode = {\n                name: node.name,\n                path: node.path,\n                open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                selected: selected,\n                openable: node.openable,\n                selectable: node.selectable,\n                depth: depth,\n                prefix: _.repeat(\"&nbsp;\", depth * 3),\n                node: node,\n                hidden: false\n            };\n            pickerEntries.splice(index, 0, pickerNode);\n            nodesById[node.uuid] = pickerNode;\n            return pickerNode;\n        };\n\n        if (jcr) {\n            if (jcr.rootNodes) {\n                _.forEach(jcr.rootNodes, rootNode => {\n                    let root = addNode(rootNode, 0, 0);\n                    root.hidden = ownProps.hideRoot;\n                });\n            }\n            if (jcr.openNodes) {\n                _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                    let parent = nodesById[node.uuid];\n                    if (parent) {\n                        let parentIndex = _.indexOf(pickerEntries, parent);\n                        _.forEachRight(node.children.nodes, (child) => {\n                            addNode(child, parent.depth + 1, parentIndex + 1)\n                        })\n                    }\n                });\n            }\n        }\n\n        // Nodes loaded, fill selection list\n        let selectedNodes = _.filter(pickerEntries, (node) => {\n            return node.selected\n        }).map((node) => {\n            return node.node\n        });\n\n        selectedPaths = _.map(selectedNodes, \"path\");\n        pickerEntries = _.filter(pickerEntries, pickerNode => {\n            return !pickerNode.hidden;\n        });\n        return {\n            ...ownProps,\n            pickerEntries: pickerEntries,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let openPaths = props.openPaths ? props.openPaths : [];\n\n        let fullyOpenPath = (props, path) => {\n            let rootFound = false;\n            _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                if (!rootFound) {\n                    _.forEach(props.rootPaths, rootPath => {\n                        rootFound = rootFound || _.startsWith(acc, rootPath);\n                    })\n                }\n                if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                    openPaths.push(acc);\n                }\n                return acc + \"/\" + it\n            }, \"\");\n        };\n\n        if (props.multipleSelection) {\n            _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n        } else {\n            fullyOpenPath(props, props.selectedPath);\n        }\n\n        let vars = {\n            rootPaths: props.rootPaths,\n            types: _.union(props.openableTypes, props.selectableTypes),\n            selectable: props.selectableTypes,\n            openable: props.openableTypes,\n            openPaths: openPaths,\n        };\n        if (props.variables) {\n            _.assign(vars, props.variables);\n        }\n\n        return {\n            variables: vars\n        }\n    }\n\n    render() {\n        let fragments = this.props.fragments;\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => JSON.stringify(f.fragments) === JSON.stringify(fragments) && f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                    jcr {\n                        rootNodes:nodesByPath(paths: $rootPaths) {\n                            path\n                            uuid\n                            name\n                            selectable : isNodeType(type: {types:$selectable})\n                            openable : isNodeType(type: {types:$openable})\n                            ... node\n                        },\n                        openNodes:nodesByPath(paths: $openPaths) {\n                            path\n                            uuid\n                            children(typesFilter:{types:$types}) {\n                                nodes {\n                                    path\n                                    uuid\n                                    name\n                                    selectable : isNodeType(type: {types:$selectable})\n                                    openable : isNodeType(type: {types:$openable})\n                                    ... node\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            replaceFragmentsInDocument(query, fragments);\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || this.props.multipleSelection ? PickerViewMaterialMultiple : PickerViewMaterial);\n\n            this.componentCache.push({fragments: fragments, renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider  client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nPickerData.propTypes = {\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n\n};\n\nexport { PickerData };\n","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import React from 'react';\nimport {connect, Provider} from 'react-redux'\nimport {PickerData} from './PickerData'\nimport {reducers, store, resetStateReducer} from \"../reduxStore\";\nimport PropTypes from 'prop-types';\n\nclass PickerRedux extends React.Component {\n    constructor(props) {\n        super(props);\n        this.PickerReduxWithoutStore = connect(this.mapStateToProps, this.mapDispatchToProps)(PickerData);\n    }\n\n    mapStateToProps(state, ownProps) {\n        if (ownProps.multipleSelection) {\n            return {\n                ...ownProps,\n                openPaths: state[\"openPaths_\" + ownProps.id] ? state[\"openPaths_\" + ownProps.id] : ownProps.openPaths,\n                selectedPaths: state[\"selectedPaths_\" + ownProps.id] ? state[\"selectedPaths_\" + ownProps.id] : ownProps.selectedPaths\n            }\n        } else {\n            return {\n                ...ownProps,\n                openPaths: state[\"openPaths_\" + ownProps.id] ? state[\"openPaths_\" + ownProps.id] : ownProps.openPaths,\n                selectedPath: state[\"selectedPath_\" + ownProps.id] ? state[\"selectedPath_\" + ownProps.id] : ownProps.selectedPath\n            }\n        }\n    };\n\n    mapDispatchToProps(dispatch, ownProps) {\n        return {\n            onSelectItem(path, select) {\n                dispatch({\n                    type: select ? 'SELECT_PICKER_ENTRY_' + ownProps.id : 'UNSELECT_PICKER_ENTRY_' + ownProps.id,\n                    path: path\n                })\n            },\n            onOpenItem(path, open) {\n                dispatch({\n                    type: open ? 'OPEN_PICKER_ENTRY_' + ownProps.id : 'CLOSE_PICKER_ENTRY_' + ownProps.id,\n                    path: path\n                })\n            }\n        }\n    };\n\n    openPaths() {\n        return (state = this.props.openPaths || [], action) => {\n            let index = state.indexOf(action.path);\n            if (action.type === 'OPEN_PICKER_ENTRY_' + this.props.id && index === -1) {\n                return [\n                    ...state,\n                    action.path\n                ]\n            } else if (action.type === 'CLOSE_PICKER_ENTRY_' + this.props.id && index !== -1) {\n                return _.filter(state, (path) => path !== action.path);\n            }\n            return state;\n        };\n    }\n\n\n    selectedPath() {\n        return (state = this.props.selectedPath, action) => {\n            if (action.type === 'SELECT_PICKER_ENTRY_' + this.props.id) {\n                return action.path\n            } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + this.props.id) {\n                return null;\n            }\n            return state;\n        };\n    }\n\n    selectedPaths() {\n        return (state = this.props.selectedPaths || [], action) => {\n            let index = state.indexOf(action.path);\n            if (action.type === 'SELECT_PICKER_ENTRY_' + this.props.id && index === -1) {\n                return [\n                    ...state,\n                    action.path\n                ]\n            } else if (action.type === 'UNSELECT_PICKER_ENTRY_' + this.props.id && index !== -1) {\n                return _.filter(state, (path) => path !== action.path);\n            }\n            return state;\n        };\n    }\n\n\n    componentWillMount() {\n        reducers[\"openPaths_\" + this.props.id] = this.openPaths();\n        if (this.props.multipleSelection) {\n            reducers[\"selectedPaths_\" + this.props.id] = this.selectedPaths();\n        } else {\n            reducers[\"selectedPath_\" + this.props.id] = this.selectedPath();\n        }\n    }\n\n    componentWillUnmount() {\n        reducers[\"openPaths_\" + this.props.id] = resetStateReducer;\n        reducers[\"selectedPath_\" + this.props.id] = resetStateReducer;\n        reducers[\"selectedPaths_\" + this.props.id] = resetStateReducer;\n\n        store.dispatch({type:\"RESET_STATE\"});\n\n        delete reducers[\"openPaths_\" + this.props.id];\n        delete reducers[\"selectedPath_\" + this.props.id];\n        delete reducers[\"selectedPaths_\" + this.props.id];\n    }\n\n    render() {\n        let PickerReduxWithoutStore = this.PickerReduxWithoutStore;\n        return (<Provider store={ store }><PickerReduxWithoutStore {...this.props}/></Provider>)\n    }\n}\n\n\nPickerRedux.propTypes = {\n    /**\n     * Identifier for the picker redux store\n     */\n    id: PropTypes.string,\n\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n\n};\n\n\nexport { PickerRedux };\n","import React from 'react';\nimport {PickerData} from './PickerData';\nimport * as _ from \"lodash\";\nimport PropTypes from 'prop-types';\n\n\nclass PickerState extends React.Component {\n\n    constructor(props) {\n        super(props);\n        if (props.multipleSelection) {\n            this.state = {\n                openPaths: props.openPaths ? props.openPaths : [],\n                selectedPaths: props.selectedPaths ? props.selectedPaths : []\n            }\n        } else {\n            this.state = {\n                openPaths: props.openPaths ? props.openPaths : [],\n                selectedPath: props.selectedPath ? props.selectedPath : null\n            }\n        }\n    }\n\n    onSelectItem(state, path, selected) {\n        if (this.props.multipleSelection) {\n            this.setState({\n                openPaths: state.openPaths,\n                selectedPaths: selected ? [\n                    ...state.selectedPaths,\n                    path\n                ] : _.filter(state.selectedPaths, (thispath) => thispath !== path),\n            });\n        } else {\n            this.setState({\n                openPaths: state.openPaths,\n                selectedPath: selected ? path : null\n            });\n        }\n\n    }\n\n    onOpenItem(state, path, open) {\n        if (this.props.multipleSelection) {\n            this.setState({\n                openPaths: open ? [\n                    ...state.openPaths,\n                    path\n                ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                selectedPaths: state.selectedPaths\n            });\n        } else {\n            this.setState({\n                openPaths: open ? [\n                    ...state.openPaths,\n                    path\n                ] : _.filter(state.openPaths, (thispath) => thispath !== path),\n                selectedPath: state.selectedPath\n            });\n        }\n    }\n\n\n    render() {\n        if (this.props.multipleSelection) {\n            return React.createElement(PickerData, {\n                ...this.props,\n                openPaths: this.state.openPaths,\n                selectedPaths: this.state.selectedPaths,\n                onOpenItem: this.onOpenItem.bind(this, this.state),\n                onSelectItem: this.onSelectItem.bind(this, this.state)\n            })\n        } else {\n            return React.createElement(PickerData, {\n                ...this.props,\n                openPaths: this.state.openPaths,\n                selectedPath: this.state.selectedPath,\n                onOpenItem: this.onOpenItem.bind(this, this.state),\n                onSelectItem: this.onSelectItem.bind(this, this.state)\n            })\n        }\n    }\n}\n\nPickerState.propTypes = {\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n};\n\nexport { PickerState }\n","import React from 'react';\nimport {PickerRedux} from './PickerRedux'\nimport {PickerState} from './PickerState'\nimport PropTypes from 'prop-types';\n\nlet Picker = function(props) {\n    let Picker = props.pickerType === \"state\" ? PickerState : PickerRedux;\n    return (<Picker {...props} />);\n};\n\nPicker.propTypes = {\n    /**\n     * Identifier for the picker redux store\n     */\n    id: PropTypes.string,\n\n    /**\n     * Type of internal state storage - either redux (can be shared) or internal state\n     */\n    pickerType: PropTypes.oneOf(['state', 'redux']),\n\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * If the picker allows multiple selection\n     */\n    multipleSelection: PropTypes.bool,\n\n    /**\n     * Preselected item path (for single selection picker)\n     */\n    selectedPath: PropTypes.string,\n\n    /**\n     * Preselected items path (for multiple selection picker)\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n\n};\n\nPicker.defaultProps = {\n    rootPaths: ['/'],\n    openableTypes:['nt:base'],\n    selectableTypes:['nt:base']\n};\n\nexport { Picker };","import React from 'react';\nimport PropTypes from 'prop-types';\n\nlet PickerView = function (props) {\n    return (\n        <div>\n            {props.pickerEntries.map((entry) => (\n                <div key={entry.path} style={{marginLeft: (10* entry.depth)+'px'}}>\n                    <input type=\"checkbox\" checked={ entry.open } onChange={(event) => props.onOpenItem(entry.path, event.target.checked)}/>\n                    <input type=\"checkbox\" checked={ entry.selected } onChange={(event) => props.onSelectItem(entry.path, event.target.checked)}/>\n                    <span>{props['textRenderer'] ? props['textRenderer'].call(this,entry) : entry.name}</span>\n                </div>\n            ))}\n        </div>\n    )\n};\n\nPickerView.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nexport { PickerView };","import React from 'react';\nimport {\n    Table, TableBody, TableCell, TableHead, TableRow\n} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {theme} from '../theme';\nimport PropTypes from 'prop-types';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableCell>Name</TableCell>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableCell>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableCell>\n        </TableRow>);\n\n    return (\n        <MuiThemeProvider muiTheme={theme}>\n            <Table>\n                <TableHead>\n                    {headers()}\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>\n        </MuiThemeProvider>\n    )\n};\n\nNodesTableViewMaterial.propTypes = {\n    headers: PropTypes.func,\n    row: PropTypes.func,\n    textRenderer: PropTypes.func,\n    nodes: PropTypes.arrayOf(PropTypes.object).isRequired\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {NodesTableViewMaterial} from './NodesTableViewMaterial'\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {client, replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass NodesTableData extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let nodes = [];\n\n        let jcr = data.jcr;\n\n        if (jcr) {\n            if (jcr.node) {\n                nodes = jcr.node.children.nodes;\n            }\n        }\n\n        return {\n            ...ownProps,\n            nodes: nodes,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let vars = {\n            path: props.path,\n            types: props.types,\n        };\n        if (props.variables) {\n            _.assign(vars, props.variables);\n        }\n\n        return {\n            variables: vars,\n            skip: !props.path\n        }\n    }\n\n    render() {\n        let fragments = this.props.fragments;\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => JSON.stringify(f.fragments) === JSON.stringify(fragments) && f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query NodesQuery($path:String!, $types:[String]!) {\n                    jcr {\n                        node:nodeByPath(path: $path) {\n                            path\n                            uuid\n                            name\n                            children(typesFilter:{types:$types}) {\n                                nodes {\n                                    path\n                                    uuid\n                                    name\n                                    ... node\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            replaceFragmentsInDocument(query, fragments);\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || NodesTableViewMaterial);\n\n            this.componentCache.push({fragments: fragments, renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<ApolloProvider  client={client}><Component {...this.props} /></ApolloProvider>);\n    }\n}\n\nNodesTableData.propTypes = {\n    /**\n     * Path of the nodes to display\n     */\n    path: PropTypes.string.isRequired,\n\n    /**\n     * List of node types of nodes to display\n     */\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * Function that returns a <TableRow> component for the header\n     */\n    headers: PropTypes.func,\n\n    /**\n     * Function that returns a <TableRow> component for a row, takes a JCR node as parameter\n     */\n    row: PropTypes.func,\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the table\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n};\n\nexport { NodesTableData };\n","import React from 'react';\nimport {NodesTableData} from './NodesTableData'\nimport {connect, Provider} from 'react-redux'\nimport {reducers, store} from \"../reduxStore\";\nimport PropTypes from 'prop-types';\n\nclass NodesTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.NodesTableWithoutStore = connect(this.mapStateToProps, this.mapDispatchToProps)(NodesTableData);\n    }\n\n    mapStateToProps(state, ownProps) {\n        return {\n            ...ownProps,\n            path: state[\"selectedPath_\"+ ownProps.id] ? state[\"selectedPath_\"+ ownProps.id] : ownProps.defaultPath,\n        }\n    };\n\n    mapDispatchToProps(dispatch, ownProps) {\n        return {\n        }\n    };\n\n    componentWillMount() {\n    }\n\n    componentWillUnmount() {\n    }\n\n    render() {\n        let NodesTableWithoutStore = this.NodesTableWithoutStore;\n        return (<Provider store={ store }><NodesTableWithoutStore {...this.props}/></Provider>)\n    }\n}\n\nNodesTable.propTypes = {\n    /**\n     * Id of the redux store where the selected path is taken\n     */\n    id: PropTypes.string,\n\n    /**\n     * Path of the nodes to display\n     */\n    defaultPath: PropTypes.string.isRequired,\n\n    /**\n     * List of node types of nodes to display\n     */\n    types: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * Function that returns a <TableRow> component for the header\n     */\n    headers: PropTypes.func,\n\n    /**\n     * Function that returns a <TableRow> component for a row, takes a JCR node as parameter\n     */\n    row: PropTypes.func,\n\n\n    /**\n     * Render function for the label of the tree node. Takes a JCR node as parameter, returns the string to display\n     */\n    textRenderer: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the table\n     */\n    renderComponent: PropTypes.element,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    variables: PropTypes.object\n};\n\nexport { NodesTable };\n","import React from 'react';\nimport {Grid} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet TestLayout = function (props) {\n    return (<Grid container>\n        <Grid item xs={12} md={6}>\n            <Paper> {props.leftCol}</Paper>\n        </Grid>\n        <Grid item xs={12} md={6}>\n            <Paper>{props.rightCol}</Paper>\n        </Grid>\n    </Grid>);\n};\n\n\nTestLayout.propTypes = {\n    leftCol: PropTypes.element,\n    rightCol: PropTypes.element\n};\n\nexport {TestLayout};","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nlet baseHistory = createHashHistory();\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {Dialog, Button} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {theme} from '../theme';\nimport * as _ from \"lodash\";\nimport {OutletRouter as Router} from '../router/router'\nimport {Link, Route} from 'react-router-dom'\n\nclass Engine extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n        };\n        this.components = [\n            {\n                link:\"/link1\",\n                label:\"Link 1\",\n                component: (props) => <div>toto</div>\n            },\n            {\n                link:\"/link2\",\n                label:\"Link 2\",\n                component: (props) => (<div>titi</div>)\n            }\n        ];\n    }\n\n    handleOpen() {\n        this.setState({open: true});\n    };\n\n    handleClose() {\n        this.setState({open: false});\n    };\n\n    render() {\n        return (<MuiThemeProvider muiTheme={theme}>\n            <div>\n                <Button label=\"Open\" onClick={()=>this.handleOpen()}/>\n                <Dialog\n                    title=\"Dialog With Actions\"\n                    actions={[\n                        <Button label=\"Cancel\" primary={true} onClick={()=>this.handleClose()}/>,\n                        <Button label=\"Submit\" primary={true} keyboardFocused={true} onClick={()=>this.handleClose()}/>\n                    ]}\n                    modal={false}\n                    open={this.state.open}\n                    onRequestClose={()=>this.handleClose()}\n                >\n                    <Router outlet={\"outlet1\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                    <Router outlet={\"outlet2\"}>\n                        <div>\n                            <div>\n                                {_.map(this.components, (e) => (<Link key={e.link} to={e.link}>{e.label}</Link>))}\n                            </div>\n                            <div>\n                                {_.map(this.components, (e) => (<Route key={e.link} path={e.link} component={e.component}/>))}\n                            </div>\n                        </div>\n                    </Router>\n                </Dialog>\n\n            </div>\n        </MuiThemeProvider>);\n    }\n\n\n}\n\nexport {Engine}\n","import React from 'react';\nimport {OutletRouter as Router} from './router'\nimport {Link, Route} from 'react-router-dom'\n\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (<div>Test1 {props.match.params.value}</div>)\n        let Test2 = props => (<div>Test2</div>);\n        let Test3 = props => (<div>Test3</div>);\n\n        return (<Router outlet={this.props.id}>\n            <div>\n\n                ---- links : ----\n                <Link to={'/test1/toto'}>Test1 toto</Link> -\n                <Link to={'/test1/tutu'}>Test1 tutu</Link> -\n                <Link to={'/test2'}>Test2</Link> -\n                <Link to={'/test3'}>Test3</Link> -\n\n                <Router outlet=\"new\">\n                    <div>\n                        <Link to={'/test1'}>Test1/other</Link> -\n                        <Link to={'/test2'}>Test2/other</Link>\n                    </div>\n                </Router>\n                ---- routes : ----\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n\n                <Router outlet=\"new\">\n                    <div>\n                        <Route path={'/test1'} component={Test1}/>\n                        <Route path={'/test2'} component={Test2}/>\n                    </div>\n                </Router>\n\n                ------------------\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {client} from \"@jahia/apollo-dx\";\nimport {NodesTableData} from \"../nodesTable/NodesTableData\";\nimport {Button, Table, TableBody, TableHead, TableRow, TableCell} from 'material-ui';\nimport {MuiThemeProvider} from 'material-ui/styles/index';\nimport {theme} from '../theme';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n\n    render() {\n        let fragment = gql`fragment Test on JCRNode {\n            myprop:property(name:\"myprop\") {\n                value\n            }\n        }`;\n\n        // let query = gql`query GetNode($path:String!) {\n        //     jcr {\n        //         nodeByPath(path:$path) {\n        //             uuid\n        //             path\n        //             ...Test\n        //         }\n        //     }\n        // } ${fragment}`;\n        //\n        // let update = (proxy, mutationResult) => {\n        //     let updatedPath = mutationResult.data.jcr.mutateNode.node.path;\n        //\n        //     let variables = {path:updatedPath};\n        //     const data = proxy.readQuery({query, variables});\n        //\n        //     delete data.jcr.nodeByPath.myprop;\n        //\n        //     debugger;\n        //\n        //     proxy.writeQuery({query, variables, data});\n        // }\n\n\n        let frags = [{\n            applyFor: \"node\",\n            gql: fragment\n        }];\n\n        let RenderComponent = (props) => (<Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Update</TableCell>\n                        <TableCell>Delete</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableCell>{node.name}</TableCell>\n                            <TableCell>{node.myprop.value}</TableCell>\n                            <TableCell><Button label={\"Update\"} onClick={() => this.props.setPropertyMutation({\n                                variables:{\n                                    path:node.path,\n                                    value:(\"test:\"+new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}/></TableCell>\n                            <TableCell><Button label={\"Delete\"} onClick={() => this.props.removeNodeMutation({\n                                variables:{\n                                    path:node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}/></TableCell>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        )\n\n        return (\n            <MuiThemeProvider muiTheme={theme}>\n            <div>\n            <Button label=\"New\" onClick={() => this.props.addNodeMutation({\n                variables:{\n                    name:(\"name-\"+(new Date().getTime())),\n                    value:(\"test:\"+new Date())\n                },\n                refetchQueries: [\"NodesQuery\"]\n            })} />\n\n            <NodesTableData path={\"/\"} types={[\"nt:unstructured\"]} fragments={frags} renderComponent={RenderComponent}/>\n            </div></MuiThemeProvider>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutation {\n                    mutateProperty(name:\"myprop\") {\n                        setValue(value:$value)\n                    }\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path) \n        }\n    }\n`;\n\nclass MutationExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.Component =\n            graphql(setProperty, { name: 'setPropertyMutation' })(\n                graphql(addNode, { name: 'addNodeMutation' })(\n                    graphql(removeNode, { name: 'removeNodeMutation' })(MutationExampleView)));\n    }\n\n    render() {\n        let Component = this.Component;\n        return (<ApolloProvider client={client}><Component/></ApolloProvider>)\n    }\n}\n\nexport { MutationExample};"]}