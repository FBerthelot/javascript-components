{"version":3,"sources":["../src/javascript/i18n/getI18n.js","../src/javascript/reduxStore.js","../src/javascript/theme.js","../src/javascript/router/createOutletHistory.js","../src/javascript/router/OutletRouter.js","../src/javascript/router/RouterExample.jsx","../src/javascript/context/DxContextProvider.jsx","../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/i18n/LanguageSwitcher.jsx","../src/javascript/layout/TestLayout.jsx","../src/javascript/nodesTable/withNodesFromPath.jsx","../src/javascript/mutations/Mutation.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/picker/Picker.jsx","../src/javascript/context/withDxContext.jsx","../src/javascript/nodesTable/withPathFromSelection.jsx"],"names":["getI18n","options","use","XHR","init","currentLanguage","undefined","contextPath","i18n","reducers","store","debugTool","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","state","arguments","length","action","_","value","key","theme","createMuiTheme","createOutletHistory","baseHistory","outletName","getPath","path","parts","base","location","pathname","newPath","indexOf","substr","split","p","startsWith","push","getState","newState","extractPath","s","part","initialLocation","listeners","history","createHref","replace","n","go","goBack","goForward","prompt","block","listener","unlisten","listen","event","assign","call","_this","createHashHistory","OutletRouter","props","outletHistory","outlet","dispose","React","this","children","Component","RouterExample","id","to","Route","component","elevation","type","match","params","DxContextProvider","dxContext","_props","apollo","redux","mui","router","Children","only","uilang","_typeof","createElement","I18nextProvider","HashRouter","ApolloProvider","client","Provider","MuiThemeProvider","childContextTypes","PropTypes","object","SimpleListView","components","done","then","reactElements","setState","componentDidMount","DynamicComponentsList","componentCache","data","_ref","ownProps","jcr","safeEval","eval","nodesByQuery","nodes","renderedView","output","imports","c","concat","getImports","promise","Promise","all","imp","SystemJS","import","m","r","apply","ReactDOM","toConsumableArray","splice","renderComponent","cacheMatch","f","dataComponent","query","gql","_templateObject","graphql","mapResultsToProps","mapPropsToOptions","propTypes","string","isRequired","element","LanguageSwitcher","context","anchorEl","target","lang","changeLanguage","onClick","handleClick","bind","t","open","Boolean","onClose","handleClose","map","locale","_this2","contextTypes","translate","TestLayout","container","item","xs","md","leftCol","rightCol","withNodesFromPath","fragments","ViewComponent","_templateObject$2","node","vars","types","queryVariables","MutationExampleView","_templateObject$1","uuid","name","myprop","setPropertyMutation","Date","removeNodeMutation","addNodeMutation","getTime","setProperty","_templateObject2","addNode","_templateObject3","removeNode","_templateObject4","MutationExample","NodesTableViewMaterial","headers","row","func","arrayOf","PickerViewMaterial","pickerEntries","entry","button","selectable","onSelectItem","selected","onOpenItem","style","opacity","RadioButtonChecked","RadioButtonUnchecked","ListItemText","paddingLeft","depth","spacing","unit","inset","openable","hasChildren","ExpandLess","ExpandMore","array","withTheme","PickerViewMaterialMultiple","CheckBox","CheckBoxOutlineBlank","Picker","_templateObject$3","graphqlComponentProps","objectWithoutProperties","that","openPaths","defaultOpenPaths","prevState","thispath","selectedPaths","defaultSelectedPaths","multiple","select","GraphQLComponent","render","prevProps","prevContext","onSelectionChange","nextProps","nextState","nodesById","index","pickerNode","pageInfo","totalCount","rootNodes","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","child","selectedNodes","rootFound","reduce","acc","it","rootPaths","rootPath","fullyOpenPath","openableTypes","selectableTypes","_extends","oneOfType","shape","WrappedComponent","reduxStoreId","connect"],"mappings":"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","sourcesContent":["import i18n from 'i18next';\nimport XHR from 'i18next-xhr-backend';\n// import LanguageDetector from 'i18next-browser-languagedetector/';\nimport { reactI18nextModule } from 'react-i18next';\n\nfunction getI18n(options) {\n    options = options || {};\n    i18n\n        .use(XHR)\n        // .use(LanguageDetector)\n        // .use(reactI18nextModule) // if not using I18nextProvider\n        .init({\n            lng: (options.currentLanguage ? options.currentLanguage : undefined),\n            fallbackLng: 'en',\n            debug: true,\n\n            interpolation: {\n                escapeValue: false, // not needed for react!!\n            },\n\n            // react i18next special options (optional)\n            react: {\n                wait: false,\n                bindI18n: 'languageChanged loaded',\n                bindStore: 'added removed',\n                nsMode: 'default'\n            },\n\n            backend: {\n                loadPath: (options.contextPath ? options.contextPath : '') + '/modules/{{ns}}/javascript/locales/{{lng}}.json',\n            }\n        });\n    return i18n;\n}\n\n\nexport { getI18n };","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import {createMuiTheme} from 'material-ui';\nimport * as _ from \"lodash\";\n\nvar indigo = {\n    50: '#e8eaf6',\n    100: '#c5cae9',\n    200: '#9fa8da',\n    300: '#7986cb',\n    400: '#5c6bc0',\n    500: '#3f51b5',\n    600: '#3949ab',\n    700: '#303f9f',\n    800: '#283593',\n    900: '#1a237e',\n    A100: '#8c9eff',\n    A200: '#536dfe',\n    A400: '#3d5afe',\n    A700: '#304ffe'\n};\n\nvar pink = {\n    50: '#fce4ec',\n    100: '#f8bbd0',\n    200: '#f48fb1',\n    300: '#f06292',\n    400: '#ec407a',\n    500: '#e91e63',\n    600: '#d81b60',\n    700: '#c2185b',\n    800: '#ad1457',\n    900: '#880e4f',\n    A100: '#ff80ab',\n    A200: '#ff4081',\n    A400: '#f50057',\n    A700: '#c51162'\n};\n\nvar red = {\n    50: '#ffebee',\n    100: '#ffcdd2',\n    200: '#ef9a9a',\n    300: '#e57373',\n    400: '#ef5350',\n    500: '#f44336',\n    600: '#e53935',\n    700: '#d32f2f',\n    800: '#c62828',\n    900: '#b71c1c',\n    A100: '#ff8a80',\n    A200: '#ff5252',\n    A400: '#ff1744',\n    A700: '#d50000'\n};\n\nconst theme = createMuiTheme();\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\n// const theme = createMuiTheme({\n//     palette: {\n//         contrastThreshold: 3.1,\n//         tonalOffset: 0.07,\n//         primary: {\n//             light: indigo[300],\n//             main: indigo[500],\n//             dark: indigo[700],\n//             contrastText: defaultTheme.palette.getContrastText(indigo[500]),\n//         },\n//         secondary: {\n//             light: pink.A200,\n//             main: pink.A400,\n//             dark: pink.A700,\n//             contrastText: defaultTheme.palette.getContrastText(pink.A400),\n//         },\n//         error: red.A400,\n//     },\n// });\n\nexport { theme }\n","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nlet baseHistory = createHashHistory();\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {OutletRouter as Router} from './OutletRouter'\nimport {Link, Route} from 'react-router-dom'\nimport {Paper, Typography} from 'material-ui'\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 1\n                </Typography>\n                <Typography component=\"p\">\n                    Param = {props.match.params.value}\n                </Typography>\n            </Paper>\n        );\n        let Test2 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 2\n                </Typography>\n            </Paper>\n\n        );\n        let Test3 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 3\n                </Typography>\n            </Paper>\n        );\n\n        return (<Router outlet={this.props.id}>\n            <div>\n                <Link to={'/test1/value1'}>test1/value1</Link>\n                <Link to={'/test1/value2'}>Test1/value2</Link>\n                <Link to={'/test2'}>test2</Link>\n                <Link to={'/test3'}>test3</Link>\n\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React from 'react';\nimport {MuiThemeProvider} from 'material-ui';\nimport {getI18n} from \"../i18n/getI18n\";\nimport {store} from '../reduxStore';\nimport {theme} from '../theme'\nimport {client} from '@jahia/apollo-dx';\nimport {ApolloProvider} from 'react-apollo';\nimport {Provider} from 'react-redux'\nimport {I18nextProvider} from 'react-i18next'\nimport {HashRouter} from 'react-router-dom'\nimport {OutletRouter} from '../router'\nimport PropTypes from 'prop-types';\n\nclass DxContextProvider extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    getChildContext() {\n        return {dxContext: this.props.dxContext};\n    }\n\n    render() {\n        let {dxContext, children, i18n, apollo, redux, mui, router} = this.props;\n\n        let Component = React.Children.only(children);\n        if (i18n) {\n            let options = {currentLanguage:dxContext.uilang, contextPath:dxContext.contextPath};\n            if (typeof i18n === 'object') {\n                Object.assign(options, i18n)\n            }\n            Component = React.createElement(I18nextProvider, {i18n:getI18n(options)}, Component);\n        }\n        if (router) {\n            let router = HashRouter;\n            let options = {};\n            if (typeof router === 'object') {\n                if (router.type === 'outlet') {\n                    router = OutletRouter;\n                    options.outlet = router.outlet;\n                }\n            }\n            Component = React.createElement(HashRouter, options, Component);\n        }\n        if (apollo) {\n            let options = {contextPath:dxContext.contextPath};\n            if (typeof apollo === 'object') {\n                Object.assign(options, apollo)\n            }\n            Component = React.createElement(ApolloProvider, {client:client(options)}, Component);\n        }\n        if (redux) {\n            Component = React.createElement(Provider, {store:store}, Component);\n        }\n        if (mui) {\n            Component = React.createElement(MuiThemeProvider, {theme:theme}, Component);\n        }\n        return Component;\n    }\n}\n\nDxContextProvider.childContextTypes = {\n    dxContext: PropTypes.object\n};\n\nexport {DxContextProvider}","import React from 'react';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<div>{this.state.reactElements}</div>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedView.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedView(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<Component {...this.props} />);\n    }\n}\n\nDynamicComponentsList.propTypes = {\n    /**\n     * Id of the \"componentsFolder\" to look for\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Component to use to do the rendering\n     */\n    renderComponent: PropTypes.element\n}\n\nexport {DynamicComponentsList};\n","import React from 'react';\nimport {Button, Menu, MenuItem} from 'material-ui';\nimport {translate} from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nclass LanguageSwitcher extends React.Component {\n\n    constructor(props,context) {\n        super(props,context);\n        this.state = {\n            anchorEl: null,\n        };\n    }\n\n    handleClick(event) {\n        this.setState({anchorEl: event.target});\n    }\n\n    handleClose(lang) {\n        this.setState({anchorEl: null});\n        if (lang) {\n            this.context.i18n.changeLanguage(lang);\n        }\n    };\n\n    render() {\n        let availableLocales = ['fr', 'en'];\n\n        return (<div>\n            <Button onClick={this.handleClick.bind(this)}\n            >{this.props.t('label.languages')}</Button>\n            <Menu open={Boolean(this.state.anchorEl)} onClose={this.handleClose.bind(this, null)}\n                  anchorEl={this.state.anchorEl}>\n                {availableLocales.map((locale) => (\n                    <MenuItem onClick={this.handleClose.bind(this, locale)} key={locale}\n                              value={locale}>{locale}</MenuItem>))}\n            </Menu>\n        </div>);\n    }\n}\n\nLanguageSwitcher.contextTypes = {\n    i18n: PropTypes.object\n};\n\nLanguageSwitcher = translate('react-dxcomponents')(LanguageSwitcher);\n\n\nexport {LanguageSwitcher}\n","import React from 'react';\nimport {Grid, Paper} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet TestLayout = function (props) {\n    return (<Grid container>\n        <Grid item xs={12} md={6}>\n            <Paper> {props.leftCol}</Paper>\n        </Grid>\n        <Grid item xs={12} md={6}>\n            <Paper>{props.rightCol}</Paper>\n        </Grid>\n    </Grid>);\n};\n\n\nTestLayout.propTypes = {\n    leftCol: PropTypes.element,\n    rightCol: PropTypes.element\n};\n\nexport {TestLayout};","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nfunction withNodesFromPath(fragments) {\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let nodes = [];\n\n            let jcr = data.jcr;\n\n            if (jcr) {\n                if (jcr.node) {\n                    nodes = jcr.node.children.nodes;\n                }\n            }\n\n            return {\n                ...ownProps,\n                nodes: nodes,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let vars = {\n                path: props.path,\n                types: props.types,\n            };\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars,\n                skip: !props.path\n            }\n        };\n\n        let query = gql`\n            query NodesQuery($path:String!, $types:[String]!) {\n                jcr {\n                    node:nodeByPath(path: $path) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        return graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n    }\n}\n\nexport {withNodesFromPath};\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {withNodesFromPath} from \"../nodesTable/withNodesFromPath\";\nimport {Button, Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let RenderComponent = (props) => (<Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Update</TableCell>\n                        <TableCell>Delete</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableCell>{node.name}</TableCell>\n                            <TableCell>{node.myprop.value}</TableCell>\n                            <TableCell><Button onClick={() => this.props.setPropertyMutation({\n                                variables: {\n                                    path: node.path,\n                                    value: (\"test:\" + new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}>Update</Button></TableCell>\n                            <TableCell><Button onClick={() => this.props.removeNodeMutation({\n                                variables: {\n                                    path: node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}>Delete</Button></TableCell>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        );\n\n        this.Component = withNodesFromPath([{\n            applyFor: \"node\",\n            gql: gql`fragment Test on JCRNode {\n                myprop:property(name:\"myprop\") {\n                    value\n                }\n            }`\n        }])(RenderComponent);\n    }\n\n\n    render() {\n        let Component = this.Component;\n        return (\n            <div>\n                <Button onClick={() => this.props.addNodeMutation({\n                    variables: {\n                        name: (\"name-\" + (new Date().getTime())),\n                        value: (\"test:\" + new Date())\n                    },\n                    refetchQueries: [\"NodesQuery\"]\n                })}>New</Button>\n\n                <Component path={\"/\"} types={[\"nt:unstructured\"]}/>\n            </div>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path)\n        }\n    }\n`;\n\nlet MutationExample = graphql(setProperty, {name: 'setPropertyMutation'})(\n    graphql(addNode, {name: 'addNodeMutation'})(\n        graphql(removeNode, {name: 'removeNodeMutation'})(MutationExampleView)));\n\nexport {MutationExample};","import React from 'react';\nimport {Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableCell>Name</TableCell>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableCell>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableCell>\n        </TableRow>);\n\n    return (<Table>\n                <TableHead>\n                    {headers()}\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>)\n};\n\nNodesTableViewMaterial.propTypes = {\n    headers: PropTypes.func,\n    row: PropTypes.func,\n    textRenderer: PropTypes.func,\n    nodes: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, RadioButtonChecked, RadioButtonUnchecked} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterial = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <RadioButtonChecked/> :\n                        <RadioButtonUnchecked/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem: PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func\n};\n\nPickerViewMaterial = withTheme()(PickerViewMaterial);\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, CheckBoxOutlineBlank, CheckBox} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected, true) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <CheckBox/> :\n                        <CheckBoxOutlineBlank/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nPickerViewMaterialMultiple = withTheme()(PickerViewMaterialMultiple);\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass Picker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        let query = gql`\n            query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                jcr {\n                    rootNodes:nodesByPath(paths: $rootPaths) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}, limit:1) {\n                            pageInfo {\n                                totalCount\n                            }\n                        }\n                        selectable : isNodeType(type: {types:$selectable})\n                        openable : isNodeType(type: {types:$openable})\n                        ... node\n                    },\n                    openNodes:nodesByPath(paths: $openPaths) {\n                        path\n                        uuid\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                children(typesFilter:{types:$types}, limit:1) {\n                                    pageInfo {\n                                        totalCount\n                                    }\n                                }\n                                selectable : isNodeType(type: {types:$selectable})\n                                openable : isNodeType(type: {types:$openable})\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        let { fragments, ...graphqlComponentProps } = props;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        this.graphqlComponentProps = graphqlComponentProps;\n\n        let state = {};\n        let that = this;\n        if (!props.openPaths) {\n            state.openPaths = props.defaultOpenPaths ? _.clone(props.defaultOpenPaths) : [];\n            graphqlComponentProps.onOpenItem = (path,open) => {\n                that.setState( (prevState, props) => ({\n                    openPaths: open ? [\n                        ...prevState.openPaths,\n                        path\n                    ] : _.filter(prevState.openPaths, (thispath) => thispath !== path)\n                }));\n                if (props.onOpenItem) {\n                    props.onOpenItem(path,open);\n                }\n            }\n        }\n\n        if (!props.selectedPaths) {\n            state.selectedPaths = props.defaultSelectedPaths ? _.clone(props.defaultSelectedPaths) :  [];\n            graphqlComponentProps.onSelectItem = (path,selected,multiple) => {\n                that.setState((prevState, props)=> ({\n                    selectedPaths: selected ? [\n                        ...(multiple ? prevState.selectedPaths : []),\n                            path\n                        ] : _.filter(prevState.selectedPaths, (thispath) => thispath !== path)\n                }));\n                if (props.onSelectItem) {\n                    props.onSelectItem(path,select,multiple);\n                }\n            }\n        }\n        this.state = state;\n\n        this.GraphQLComponent = graphql(query, {\n            props: this.mapResultsToProps,\n            options: this.mapPropsToOptions\n        })(this.props.render);\n    }\n\n    componentDidUpdate(prevProps, prevState, prevContext) {\n        if (this.props.onSelectionChange && !_.isEqual(this.state.selectedPaths,prevState.selectedPaths)) {\n            this.props.onSelectionChange(this.state.selectedPaths);\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextState) {\n        let { fragments, onOpenItem, onSelectItem, ...graphqlComponentProps } = nextProps;\n        _.assign(this.graphqlComponentProps, graphqlComponentProps);\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let selectedPaths = ownProps.selectedPaths;\n        let openPaths = ownProps.openPaths ? ownProps.openPaths : [];\n\n        let pickerEntries = [];\n        let nodesById = {};\n        let jcr = data.jcr;\n\n        let addNode = function (node, depth, index) {\n            let selected = false;\n            if (node.selectable) {\n                selected = _.indexOf(selectedPaths, node.path) !== -1\n            }\n            let pickerNode = {\n                name: node.name,\n                path: node.path,\n                open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                selected: selected,\n                openable: node.openable,\n                selectable: node.selectable,\n                depth: depth,\n                prefix: _.repeat(\"&nbsp;\", depth * 3),\n                node: node,\n                hidden: false,\n                hasChildren: node.children.pageInfo.totalCount > 0\n            };\n            pickerEntries.splice(index, 0, pickerNode);\n            nodesById[node.uuid] = pickerNode;\n            return pickerNode;\n        };\n\n        if (jcr) {\n            if (jcr.rootNodes) {\n                _.forEach(jcr.rootNodes, rootNode => {\n                    let root = addNode(rootNode, 0, 0);\n                    root.hidden = ownProps.hideRoot;\n                });\n            }\n            if (jcr.openNodes) {\n                _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                    let parent = nodesById[node.uuid];\n                    if (parent) {\n                        let parentIndex = _.indexOf(pickerEntries, parent);\n                        _.forEachRight(node.children.nodes, (child) => {\n                            addNode(child, parent.depth + 1, parentIndex + 1)\n                        })\n                    }\n                });\n            }\n        }\n\n        // Nodes loaded, fill selection list\n        let selectedNodes = _.filter(pickerEntries, (node) => {\n            return node.selected\n        }).map((node) => {\n            return node.node\n        });\n\n        selectedPaths = _.map(selectedNodes, \"path\");\n        pickerEntries = _.filter(pickerEntries, pickerNode => {\n            return !pickerNode.hidden;\n        });\n\n        return {\n            ...ownProps,\n            pickerEntries: pickerEntries,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let openPaths = props.openPaths ? props.openPaths : [];\n\n        let fullyOpenPath = (props, path) => {\n            let rootFound = false;\n            _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                if (!rootFound) {\n                    _.forEach(props.rootPaths, rootPath => {\n                        rootFound = rootFound || _.startsWith(acc, rootPath);\n                    })\n                }\n                if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                    openPaths.push(acc);\n                }\n                return acc + \"/\" + it\n            }, \"\");\n        };\n\n        if (props.selectedPaths) {\n            _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n        }\n\n        let vars = {\n            rootPaths: props.rootPaths,\n            types: _.union(props.openableTypes, props.selectableTypes),\n            selectable: props.selectableTypes,\n            openable: props.openableTypes,\n            openPaths: openPaths,\n        };\n\n        if (props.queryVariables) {\n            _.assign(vars, props.queryVariables);\n        }\n\n        return {\n            variables: vars\n        }\n    }\n\n    render() {\n        let GraphQLComponent = this.GraphQLComponent;\n\n        return <GraphQLComponent {...this.graphqlComponentProps} {...this.state} />\n    }\n}\n\nPicker.propTypes = {\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open by default (uncontrolled mode)\n     */\n    defaultOpenPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of open folders in controlled mode\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * Preselected items path (uncontrolled mode)\n     */\n    defaultSelectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of selected path in controlled mode\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Callback when the selection has changed\n     */\n    onSelectionChange: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree. Should accept : pickerEntries,onSelectItem,onOpenItem . Other properties are passed through.\n     */\n    render: PropTypes.func,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    queryVariables: PropTypes.object\n\n};\n\n\nexport {Picker}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction withDxContext() {\n    return (WrappedComponent) => {\n        let Component = class extends React.Component {\n            render() {\n                return (<WrappedComponent dxContext={this.context.dxContext} {...this.props} />)\n            }\n        }\n\n        Component.contextTypes = {\n            dxContext: PropTypes.object\n        };\n\n        return Component\n    }\n}\n\nexport { withDxContext }","import React from 'react';\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\n\nfunction withPathFromSelection(reduxStoreId) {\n    return (WrappedComponent) => {\n        return connect(\n            (state, ownProps) => ({\n                ...ownProps,\n                path: (state[\"selectedPaths_\" + reduxStoreId] && state[\"selectedPaths_\" + reduxStoreId].length === 1) ? state[\"selectedPaths_\" + reduxStoreId][0] : null,\n            }),\n            () => ({}))(WrappedComponent);\n    }\n}\n\nexport { withPathFromSelection }"]}