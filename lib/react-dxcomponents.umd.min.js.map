{"version":3,"sources":["../src/javascript/i18n/getI18n.js","../src/javascript/reduxStore.js","../src/javascript/theme.js","../src/javascript/router/createOutletHistory.js","../src/javascript/router/OutletRouter.js","../src/javascript/router/RouterExample.jsx","../src/javascript/context/DxContextProvider.jsx","../src/javascript/dynamicList/SimpleListView.jsx","../src/javascript/dynamicList/DynamicComponentsList.jsx","../src/javascript/i18n/LanguageSwitcher.jsx","../src/javascript/layout/SettingsLayout.jsx","../src/javascript/layout/SearchBar.jsx","../src/javascript/nodesTable/withNodesFromPath.jsx","../src/javascript/mutations/Mutation.jsx","../src/javascript/nodesTable/NodesTableViewMaterial.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/picker/Picker.jsx","../src/javascript/context/withDxContext.jsx","../src/javascript/nodesTable/withPathFromSelection.jsx"],"names":["getI18n","options","use","XHR","init","currentLanguage","undefined","contextPath","i18n","debugTool","reducers","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","state","arguments","length","action","_","value","key","theme","createMuiTheme","grey","blueGrey","lightBlue","red","A200","A400","A700","createOutletHistory","baseHistory","outletName","getPath","path","parts","base","location","pathname","newPath","indexOf","substr","split","p","startsWith","push","getState","newState","extractPath","s","part","initialLocation","listeners","history","createHref","replace","n","go","goBack","goForward","prompt","block","listener","unlisten","listen","event","assign","call","_this","createHashHistory","OutletRouter","props","outletHistory","outlet","dispose","React","this","children","Component","RouterExample","id","to","Route","component","elevation","type","match","params","DxContextProvider","mui","babelHelpers.typeof","dxContext","setTheme","setState","_props","apollo","redux","router","Children","only","uilang","_typeof","createElement","I18nextProvider","HashRouter","ApolloProvider","client","Provider","theTheme","MuiThemeProvider","childContextTypes","PropTypes","object","SimpleListView","components","done","then","reactElements","componentDidMount","DynamicComponentsList","componentCache","data","_ref","ownProps","jcr","safeEval","eval","nodesByQuery","nodes","renderedContent","output","imports","c","concat","getImports","promise","Promise","all","imp","SystemJS","import","m","r","apply","ReactDOM","toConsumableArray","splice","renderComponent","cacheMatch","f","dataComponent","query","gql","_templateObject","graphql","mapResultsToProps","mapPropsToOptions","propTypes","string","isRequired","element","LanguageSwitcher","context","anchorEl","target","lang","changeLanguage","onClick","handleClick","bind","t","open","Boolean","onClose","handleClose","map","locale","_this2","contextTypes","translate","SettingsLayout","classes","appBar","footer","appBarStyle","className","root","position","style","main","withStyles","palette","background","global","typography","fontFamily","text","secondary","SearchBar","handleChange","onFocus","onBlur","persist","timeout","setTimeout","onChangeFilter","rootFocus","placeholderLabel","Input","inputStyle","input","searchIcon","Search","primary","light","withNodesFromPath","fragments","ViewComponent","_templateObject$2","node","vars","types","queryVariables","MutationExampleView","_templateObject$1","uuid","name","myprop","setPropertyMutation","Date","removeNodeMutation","addNodeMutation","getTime","setProperty","_templateObject2","addNode","_templateObject3","removeNode","_templateObject4","MutationExample","NodesTableViewMaterial","headers","row","func","arrayOf","PickerViewMaterial","pickerEntries","entry","button","selectable","onSelectItem","selected","onOpenItem","opacity","RadioButtonChecked","RadioButtonUnchecked","ListItemText","paddingLeft","depth","spacing","unit","inset","openable","hasChildren","ExpandLess","ExpandMore","array","withTheme","PickerViewMaterialMultiple","CheckBox","CheckBoxOutlineBlank","Picker","_templateObject$3","graphqlComponentProps","objectWithoutProperties","that","openPaths","defaultOpenPaths","prevState","thispath","selectedPaths","defaultSelectedPaths","multiple","select","GraphQLComponent","render","prevProps","prevContext","onSelectionChange","nextProps","nextState","nodesById","index","pickerNode","pageInfo","totalCount","rootNodes","rootNode","hidden","hideRoot","openNodes","forEach","parent","parentIndex","child","selectedNodes","rootFound","reduce","acc","it","rootPaths","rootPath","openableTypes","selectableTypes","_extends","oneOfType","shape","WrappedComponent","reduxStoreId","connect"],"mappings":"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","sourcesContent":["import i18n from 'i18next';\nimport XHR from 'i18next-xhr-backend';\n// import LanguageDetector from 'i18next-browser-languagedetector/';\nimport { reactI18nextModule } from 'react-i18next';\n\nfunction getI18n(options) {\n    options = options || {};\n    i18n\n        .use(XHR)\n        // .use(LanguageDetector)\n        // .use(reactI18nextModule) // if not using I18nextProvider\n        .init({\n            lng: (options.currentLanguage ? options.currentLanguage : undefined),\n            fallbackLng: 'en',\n            debug: true,\n\n            interpolation: {\n                escapeValue: false, // not needed for react!!\n            },\n\n            // react i18next special options (optional)\n            react: {\n                wait: false,\n                bindI18n: 'languageChanged loaded',\n                bindStore: 'added removed',\n                nsMode: 'default'\n            },\n\n            backend: {\n                loadPath: (options.contextPath ? options.contextPath : '') + '/modules/{{ns}}/javascript/locales/{{lng}}.json',\n            }\n        });\n    return i18n;\n}\n\n\nexport { getI18n };","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import {createMuiTheme} from 'material-ui';\nimport {blueGrey, lightBlue, red, grey} from 'material-ui/colors/index'\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\nlet theme = createMuiTheme({\n    palette: {\n        background: {\n            global: grey[200]\n        },\n        contrastThreshold: 3.1,\n        tonalOffset: 0.07,\n        primary: {\n            main: blueGrey[600],\n            light: blueGrey[300],\n            dark: blueGrey[700]\n        },\n        secondary: {\n            main: lightBlue[600],\n            light: lightBlue[300],\n            dark: lightBlue[700]\n        },\n        error: {\n            light: red.A200,\n            main: red.A400,\n            dark: red.A700\n        },\n    },\n});\n\nexport {theme}\n","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nlet baseHistory = createHashHistory();\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport {OutletRouter as Router} from './OutletRouter'\nimport {Link, Route} from 'react-router-dom'\nimport {Paper, Typography} from 'material-ui'\nclass RouterExample extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n\n        let Test1 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 1\n                </Typography>\n                <Typography component=\"p\">\n                    Param = {props.match.params.value}\n                </Typography>\n            </Paper>\n        );\n        let Test2 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 2\n                </Typography>\n            </Paper>\n\n        );\n        let Test3 = props => (\n            <Paper elevation={4}>\n                <Typography type=\"headline\" component=\"h3\">\n                    Page 3\n                </Typography>\n            </Paper>\n        );\n\n        return (<Router outlet={this.props.id}>\n            <div>\n                <Link to={'/test1/value1'}>test1/value1</Link>\n                <Link to={'/test1/value2'}>Test1/value2</Link>\n                <Link to={'/test2'}>test2</Link>\n                <Link to={'/test3'}>test3</Link>\n\n                <Route path={'/test1/:value'} component={Test1}/>\n                <Route path={'/test2'} component={Test2}/>\n                <Route path={'/test3'} component={Test3}/>\n            </div>\n        </Router>);\n    }\n\n}\n\nexport {RouterExample}\n","import React from 'react';\nimport {MuiThemeProvider} from 'material-ui';\nimport {getI18n} from \"../i18n/getI18n\";\nimport {store} from '../reduxStore';\nimport {theme} from '../theme'\nimport {client} from '@jahia/apollo-dx';\nimport {ApolloProvider} from 'react-apollo';\nimport {Provider} from 'react-redux'\nimport {I18nextProvider} from 'react-i18next'\nimport {HashRouter} from 'react-router-dom'\nimport {OutletRouter} from '../router'\nimport PropTypes from 'prop-types';\nimport * as _ from \"lodash\";\n\nclass DxContextProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        if (props.mui && typeof props.mui === 'object') {\n            this.state = {\n                theme: props.mui\n            }\n        }\n        props.dxContext.setTheme = (theme) => {\n            this.setState({\n                theme: theme\n            });\n        }\n    }\n\n    getChildContext() {\n        return {dxContext: this.props.dxContext};\n    }\n\n    render() {\n        let {dxContext, children, i18n, apollo, redux, mui, router} = this.props;\n\n        let Component = React.Children.only(children);\n        if (i18n) {\n            let options = {currentLanguage:dxContext.uilang, contextPath:dxContext.contextPath};\n            if (typeof i18n === 'object') {\n                Object.assign(options, i18n)\n            }\n            Component = React.createElement(I18nextProvider, {i18n:getI18n(options)}, Component);\n        }\n        if (router) {\n            let router = HashRouter;\n            let options = {};\n            if (typeof router === 'object') {\n                if (router.type === 'outlet') {\n                    router = OutletRouter;\n                    options.outlet = router.outlet;\n                }\n            }\n            Component = React.createElement(HashRouter, options, Component);\n        }\n        if (apollo) {\n            let options = {contextPath:dxContext.contextPath};\n            if (typeof apollo === 'object') {\n                Object.assign(options, apollo)\n            }\n            Component = React.createElement(ApolloProvider, {client:client(options)}, Component);\n        }\n        if (redux) {\n            Component = React.createElement(Provider, {store:store}, Component);\n        }\n        if (mui) {\n            let theTheme = theme;\n            if (this.state && this.state.theme) {\n                theTheme = _.merge({}, theme, this.state.theme);\n            }\n            Component = React.createElement(MuiThemeProvider, {theme:theTheme}, Component);\n        }\n        return Component;\n    }\n}\n\nDxContextProvider.childContextTypes = {\n    dxContext: PropTypes.object\n};\n\nexport {DxContextProvider}","import React from 'react';\n\nclass SimpleListView extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            reactElements: []\n        };\n    }\n\n    // todo should move this code dynamicList itself\n    componentDidMount() {\n        if (this.props.components && !this.done) {\n            this.props.components.then((reactElements) => {\n                this.done = true;\n                this.setState({reactElements: reactElements});\n            });\n        }\n    }\n\n    componentDidUpdate() {\n        this.componentDidMount();\n    }\n\n    render() {\n        return this.done ? (<div>{this.state.reactElements}</div>) : (<div/>);\n    }\n}\n\nexport {SimpleListView}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {SimpleListView} from './SimpleListView'\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass DynamicComponentsList extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.componentCache = [];\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let components = [];\n\n        let jcr = data.jcr;\n        let safeEval = eval;\n        if (jcr && jcr.nodesByQuery) {\n            components = _.map(_.flatMap(jcr.nodesByQuery.nodes, \"children.nodes\"),(n)=> safeEval(\"(\" + n.renderedContent.output + \")\"));\n        }\n\n        let imports = [];\n        _.each(components, c => {\n            imports = imports.concat(c.getImports())\n        });\n        let promise;\n        if (imports.length > 0) {\n            promise = Promise.all(_.map(imports, (imp) => SystemJS.import(imp))).then(m => {\n                let reactElements = _.map(components, (c) => {\n                    let s = c.getImports().length;\n                    let r = c.createElement(React, ReactDOM, ...m);\n                    m.splice(s);\n                    return r;\n                });\n                return reactElements;\n            });\n        }\n\n        return {\n            ...ownProps,\n            components: promise,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        return {\n            variables : {\n                query: \"select * from [reactnt:componentsFolder] where [react:id]='\" + props.id + \"'\"\n            }\n        };\n    }\n\n    render() {\n        let renderComponent = this.props.renderComponent;\n\n        let cacheMatch = _.find(this.componentCache, (f) => f.renderComponent === renderComponent);\n        let Component;\n        if (cacheMatch) {\n            Component = cacheMatch.dataComponent;\n        } else {\n            let query = gql`\n                query ComponentsQuery($query:String!) {\n                    jcr {\n                        nodesByQuery(query:$query) {\n                            nodes {\n                                name\n                                path\n                                primaryNodeType {\n                                    name\n                                }\n                                children {\n                                    nodes {\n                                        name\n                                        path\n                                        primaryNodeType {\n                                            name\n                                        }\n                                        renderedContent(templateType:\"js\", view:\"react\") {\n                                            output\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }`;\n\n            Component = graphql(query, {\n                props: this.mapResultsToProps,\n                options: this.mapPropsToOptions\n            })(renderComponent || SimpleListView);\n\n            this.componentCache.push({renderComponent: renderComponent, dataComponent: Component});\n        }\n\n        return (<Component {...this.props} />);\n    }\n}\n\nDynamicComponentsList.propTypes = {\n    /**\n     * Id of the \"componentsFolder\" to look for\n     */\n    id: PropTypes.string.isRequired,\n\n    /**\n     * Component to use to do the rendering\n     */\n    renderComponent: PropTypes.element\n}\n\nexport {DynamicComponentsList};\n","import React from 'react';\nimport {Button, Menu, MenuItem} from 'material-ui';\nimport {translate} from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nclass LanguageSwitcher extends React.Component {\n\n    constructor(props,context) {\n        super(props,context);\n        this.state = {\n            anchorEl: null,\n        };\n    }\n\n    handleClick(event) {\n        this.setState({anchorEl: event.target});\n    }\n\n    handleClose(lang) {\n        this.setState({anchorEl: null});\n        if (lang) {\n            this.context.i18n.changeLanguage(lang);\n        }\n    };\n\n    render() {\n        let availableLocales = ['fr', 'en'];\n\n        return (<div>\n            <Button onClick={this.handleClick.bind(this)}\n            >{this.props.t('label.languages')}</Button>\n            <Menu open={Boolean(this.state.anchorEl)} onClose={this.handleClose.bind(this, null)}\n                  anchorEl={this.state.anchorEl}>\n                {availableLocales.map((locale) => (\n                    <MenuItem onClick={this.handleClose.bind(this, locale)} key={locale}\n                              value={locale}>{locale}</MenuItem>))}\n            </Menu>\n        </div>);\n    }\n}\n\nLanguageSwitcher.contextTypes = {\n    i18n: PropTypes.object\n};\n\nLanguageSwitcher = translate('react-dxcomponents')(LanguageSwitcher);\n\n\nexport {LanguageSwitcher}\n","import React from 'react';\nimport {AppBar, Toolbar, Typography, withStyles} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n    root: {\n        backgroundColor: theme.palette.background.global\n    },\n    main: {\n        minHeight: 'calc(100% - 96px)',\n        marginTop: 64,\n        padding: 1\n    },\n    footer: {\n        fontSize: '14px',\n        fontFamily: theme.typography.fontFamily,\n        fontWeight: 300,\n        padding: \"8px\",\n        textAlign: \"center\",\n        color: theme.palette.text.secondary\n    },\n    appBar: {\n        transition: \"all 200ms ease-in-out\"\n    }\n});\n\n\nclass SettingsLayout extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let { classes, appBar, children, footer, appBarStyle } = this.props;\n        return (\n            <section className={classes.root} >\n                <AppBar position=\"fixed\" classes={{root:classes.appBar}} style={appBarStyle}>\n                    {appBar}\n                </AppBar>\n                <section className={classes.main}>\n                    {children}\n                </section>\n                <footer className={classes.footer}>\n                    {footer}\n                </footer>\n            </section>\n        );\n    }\n}\n\n\nSettingsLayout.propTypes = {\n    appBar: PropTypes.element,\n    footer: PropTypes.string\n};\n\nSettingsLayout = withStyles(styles)(SettingsLayout);\n\nexport {SettingsLayout};","import React from 'react';\nimport {Input, InputAdornment, withStyles } from 'material-ui';\nimport { Search } from 'material-ui-icons';\nimport {translate} from 'react-i18next';\n\nconst styles = theme => ({\n    root: {\n        position: 'absolute',\n        margin: '0 auto',\n        left: '0',\n        right: '0',\n        color : 'inherit',\n        backgroundColor : theme.palette.primary.light,\n        width: '720px',\n        height: '44px',\n        lineHeight: '40px',\n        borderRadius: '3px',\n        fontWeight: '200'\n    },\n    rootFocus: {\n        position: 'absolute',\n        margin: '0 auto',\n        left: '0',\n        right: '0',\n        color: theme.palette.text.secondary,\n        backgroundColor : '#fff',\n        width: '720px',\n        height: '44px',\n        lineHeight: '40px',\n        borderRadius: '3px',\n        fontWeight: '100',\n        boxShadow: \"0 1px 8px 0 rgba(0, 0, 0, 0.4)\",\n        // '& $input': {\n        //     width: '300px'\n        // }\n    },\n    input: {\n        transitionProperty: 'width',\n        transitionDuration: '300ms',\n        transitionTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1)',\n        transitionDelay: '0ms',\n\n    },\n    searchIcon: {\n        'marginTop': 'auto',\n        'marginBottom': 'auto',\n        'paddingLeft': '14px',\n        'opacity': '0.87'\n    }\n});\n\nclass SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.state = {\n            inputStyle: props.classes.root\n        }\n    }\n\n    handleChange(event) {\n        // Let the handler deal with the change only when the user has paused changing the filter text for a second.\n        event.persist();\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        this.timeout = setTimeout(function() {\n            this.props.onChangeFilter(event.target.value)\n        }.bind(this), 1000);\n    }\n\n    onFocus() {\n        this.setState({\n            inputStyle: this.props.classes.rootFocus\n        });\n        this.props.onFocus();\n    }\n\n    onBlur() {\n        this.setState({\n            inputStyle: this.props.classes.root\n        });\n        this.props.onBlur();\n    }\n\n    render() {\n\n        const { classes,t, placeholderLabel } = this.props;\n\n        return (\n            <Input classes={{root: this.state.inputStyle, input: classes.input}}\n                   onChange={this.handleChange}\n                   onBlur={this.onBlur}\n                   onFocus={this.onFocus}\n                   disableUnderline={true}\n                   type=\"text\"\n                   placeholder={placeholderLabel || t('label.searchPlaceholder')}\n                   startAdornment={<InputAdornment classes={{root: classes.searchIcon}} position=\"start\"><Search/></InputAdornment>}\n            />\n        )\n    }\n}\n\nSearchBar = withStyles(styles)(translate('react-dxcomponents')(SearchBar));\n\nexport {SearchBar};","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nfunction withNodesFromPath(fragments) {\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let nodes = [];\n\n            let jcr = data.jcr;\n\n            if (jcr) {\n                if (jcr.node) {\n                    nodes = jcr.node.children.nodes;\n                }\n            }\n\n            return {\n                ...ownProps,\n                nodes: nodes,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let vars = {\n                path: props.path,\n                types: props.types,\n            };\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars,\n                skip: !props.path\n            }\n        };\n\n        let query = gql`\n            query NodesQuery($path:String!, $types:[String]!) {\n                jcr {\n                    node:nodeByPath(path: $path) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        return graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n    }\n}\n\nexport {withNodesFromPath};\n","import React, {Component} from 'react';\nimport {ApolloProvider, graphql} from 'react-apollo';\nimport gql from 'graphql-tag';\nimport {withNodesFromPath} from \"../nodesTable/withNodesFromPath\";\nimport {Button, Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\n\n\nclass MutationExampleView extends Component {\n\n    constructor(props) {\n        super(props);\n\n        let RenderComponent = (props) => (<Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Name</TableCell>\n                        <TableCell>Value</TableCell>\n                        <TableCell>Update</TableCell>\n                        <TableCell>Delete</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(node =>\n                        <TableRow key={node.uuid}>\n                            <TableCell>{node.name}</TableCell>\n                            <TableCell>{node.myprop.value}</TableCell>\n                            <TableCell><Button onClick={() => this.props.setPropertyMutation({\n                                variables: {\n                                    path: node.path,\n                                    value: (\"test:\" + new Date())\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                                // update: update\n                            })}>Update</Button></TableCell>\n                            <TableCell><Button onClick={() => this.props.removeNodeMutation({\n                                variables: {\n                                    path: node.path,\n                                },\n                                refetchQueries: [\"NodesQuery\"]\n                            })}>Delete</Button></TableCell>\n                        </TableRow>\n                    ) : []}\n                </TableBody>\n            </Table>\n        );\n\n        this.Component = withNodesFromPath([{\n            applyFor: \"node\",\n            gql: gql`fragment Test on JCRNode {\n                myprop:property(name:\"myprop\") {\n                    value\n                }\n            }`\n        }])(RenderComponent);\n    }\n\n\n    render() {\n        let Component = this.Component;\n        return (\n            <div>\n                <Button onClick={() => this.props.addNodeMutation({\n                    variables: {\n                        name: (\"name-\" + (new Date().getTime())),\n                        value: (\"test:\" + new Date())\n                    },\n                    refetchQueries: [\"NodesQuery\"]\n                })}>New</Button>\n\n                <Component path={\"/\"} types={[\"nt:unstructured\"]}/>\n            </div>\n        )\n    }\n}\n\nconst setProperty = gql`\n    mutation setProperty($value:String,$path:String!) {\n        jcr {\n            mutateNode(pathOrId:$path) {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n                node {\n                    path\n                }\n            }\n        }\n    }\n`;\n\nconst addNode = gql`\n    mutation addNode($value:String, $name:String!) {\n        jcr {\n            addNode(parentPathOrId:\"/\",name:$name,primaryNodeType:\"nt:unstructured\") {\n                mutateProperty(name:\"myprop\") {\n                    setValue(value:$value)\n                }\n            }\n        }\n    }\n`;\n\nconst removeNode = gql`\n    mutation removeNode($path:String!) {\n        jcr {\n            deleteNode(pathOrId:$path)\n        }\n    }\n`;\n\nlet MutationExample = graphql(setProperty, {name: 'setPropertyMutation'})(\n    graphql(addNode, {name: 'addNodeMutation'})(\n        graphql(removeNode, {name: 'removeNodeMutation'})(MutationExampleView)));\n\nexport {MutationExample};","import React from 'react';\nimport {Table, TableBody, TableCell, TableHead, TableRow} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nlet NodesTableViewMaterial = function (props) {\n\n    let headers = props['headers'] ? props['headers'] : () => (\n        <TableRow>\n            <TableCell>Name</TableCell>\n        </TableRow>);\n\n    let row = props['row'] ? props['row'] : (node) => (<TableRow key={node.path}>\n            <TableCell>{props['textRenderer'] ? props['textRenderer'].call(this, node) : node.name}</TableCell>\n        </TableRow>);\n\n    return (<Table>\n                <TableHead>\n                    {headers()}\n                </TableHead>\n                <TableBody>\n                    {props.nodes ? props.nodes.map(row) : []}\n                </TableBody>\n            </Table>)\n};\n\nNodesTableViewMaterial.propTypes = {\n    headers: PropTypes.func,\n    row: PropTypes.func,\n    textRenderer: PropTypes.func,\n    nodes: PropTypes.arrayOf(PropTypes.object)\n};\n\nexport {NodesTableViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, RadioButtonChecked, RadioButtonUnchecked} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterial = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <RadioButtonChecked/> :\n                        <RadioButtonUnchecked/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem: PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func\n};\n\nPickerViewMaterial = withTheme()(PickerViewMaterial);\n\nexport {PickerViewMaterial};","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, CheckBoxOutlineBlank, CheckBox} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected, true) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <CheckBox/> :\n                        <CheckBoxOutlineBlank/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nPickerViewMaterialMultiple = withTheme()(PickerViewMaterialMultiple);\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass Picker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        let query = gql`\n            query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                jcr {\n                    rootNodes:nodesByPath(paths: $rootPaths) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}, limit:1) {\n                            pageInfo {\n                                totalCount\n                            }\n                        }\n                        selectable : isNodeType(type: {types:$selectable})\n                        openable : isNodeType(type: {types:$openable})\n                        ... node\n                    },\n                    openNodes:nodesByPath(paths: $openPaths) {\n                        path\n                        uuid\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                children(typesFilter:{types:$types}, limit:1) {\n                                    pageInfo {\n                                        totalCount\n                                    }\n                                }\n                                selectable : isNodeType(type: {types:$selectable})\n                                openable : isNodeType(type: {types:$openable})\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        let { fragments, ...graphqlComponentProps } = props;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        this.graphqlComponentProps = graphqlComponentProps;\n\n        let state = {};\n        let that = this;\n        if (!props.openPaths) {\n            state.openPaths = props.defaultOpenPaths ? _.clone(props.defaultOpenPaths) : [];\n            graphqlComponentProps.onOpenItem = (path,open) => {\n                that.setState( (prevState, props) => ({\n                    openPaths: open ? [\n                        ...prevState.openPaths,\n                        path\n                    ] : _.filter(prevState.openPaths, (thispath) => thispath !== path)\n                }));\n                if (props.onOpenItem) {\n                    props.onOpenItem(path,open);\n                }\n            }\n        }\n\n        if (!props.selectedPaths) {\n            state.selectedPaths = props.defaultSelectedPaths ? _.clone(props.defaultSelectedPaths) :  [];\n            graphqlComponentProps.onSelectItem = (path,selected,multiple) => {\n                that.setState((prevState, props)=> ({\n                    selectedPaths: selected ? [\n                        ...(multiple ? prevState.selectedPaths : []),\n                            path\n                        ] : _.filter(prevState.selectedPaths, (thispath) => thispath !== path)\n                }));\n                if (props.onSelectItem) {\n                    props.onSelectItem(path,select,multiple);\n                }\n            }\n        }\n        this.state = state;\n\n        this.GraphQLComponent = graphql(query, {\n            props: this.mapResultsToProps,\n            options: this.mapPropsToOptions\n        })(this.props.render);\n    }\n\n    componentDidUpdate(prevProps, prevState, prevContext) {\n        if (this.props.onSelectionChange && !_.isEqual(this.state.selectedPaths,prevState.selectedPaths)) {\n            this.props.onSelectionChange(this.state.selectedPaths);\n        }\n    }\n\n    componentWillReceiveProps(nextProps, nextState) {\n        let { fragments, onOpenItem, onSelectItem, ...graphqlComponentProps } = nextProps;\n        _.assign(this.graphqlComponentProps, graphqlComponentProps);\n    }\n\n    mapResultsToProps({data, ownProps}) {\n        let selectedPaths = ownProps.selectedPaths;\n        let openPaths = ownProps.openPaths ? ownProps.openPaths : [];\n\n        let pickerEntries = [];\n        let nodesById = {};\n        let jcr = data.jcr;\n\n        let addNode = function (node, depth, index) {\n            let selected = false;\n            if (node.selectable) {\n                selected = _.indexOf(selectedPaths, node.path) !== -1\n            }\n            let pickerNode = {\n                name: node.name,\n                path: node.path,\n                open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                selected: selected,\n                openable: node.openable,\n                selectable: node.selectable,\n                depth: depth,\n                prefix: _.repeat(\"&nbsp;\", depth * 3),\n                node: node,\n                hidden: false,\n                hasChildren: node.children.pageInfo.totalCount > 0\n            };\n            pickerEntries.splice(index, 0, pickerNode);\n            nodesById[node.uuid] = pickerNode;\n            return pickerNode;\n        };\n\n        if (jcr) {\n            if (jcr.rootNodes) {\n                _.forEach(jcr.rootNodes, rootNode => {\n                    let root = addNode(rootNode, 0, 0);\n                    root.hidden = ownProps.hideRoot;\n                });\n            }\n            if (jcr.openNodes) {\n                _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                    let parent = nodesById[node.uuid];\n                    if (parent) {\n                        let parentIndex = _.indexOf(pickerEntries, parent);\n                        _.forEachRight(node.children.nodes, (child) => {\n                            addNode(child, parent.depth + 1, parentIndex + 1)\n                        })\n                    }\n                });\n            }\n        }\n\n        // Nodes loaded, fill selection list\n        let selectedNodes = _.filter(pickerEntries, (node) => {\n            return node.selected\n        }).map((node) => {\n            return node.node\n        });\n\n        selectedPaths = _.map(selectedNodes, \"path\");\n        pickerEntries = _.filter(pickerEntries, pickerNode => {\n            return !pickerNode.hidden;\n        });\n\n        return {\n            ...ownProps,\n            pickerEntries: pickerEntries,\n        };\n    }\n\n    mapPropsToOptions(props) {\n        let openPaths = props.openPaths ? props.openPaths : [];\n\n        let fullyOpenPath = (props, path) => {\n            let rootFound = false;\n            _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                if (!rootFound) {\n                    _.forEach(props.rootPaths, rootPath => {\n                        rootFound = rootFound || _.startsWith(acc, rootPath);\n                    })\n                }\n                if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                    openPaths.push(acc);\n                }\n                return acc + \"/\" + it\n            }, \"\");\n        };\n\n        if (props.selectedPaths) {\n            _.each(props.selectedPaths, path => fullyOpenPath(props, path));\n        }\n\n        let vars = {\n            rootPaths: props.rootPaths,\n            types: _.union(props.openableTypes, props.selectableTypes),\n            selectable: props.selectableTypes,\n            openable: props.openableTypes,\n            openPaths: openPaths,\n        };\n\n        if (props.queryVariables) {\n            _.assign(vars, props.queryVariables);\n        }\n\n        return {\n            variables: vars\n        }\n    }\n\n    render() {\n        let GraphQLComponent = this.GraphQLComponent;\n\n        return <GraphQLComponent {...this.graphqlComponentProps} {...this.state} />\n    }\n}\n\nPicker.propTypes = {\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open by default (uncontrolled mode)\n     */\n    defaultOpenPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of open folders in controlled mode\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * Preselected items path (uncontrolled mode)\n     */\n    defaultSelectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of selected path in controlled mode\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Callback when the selection has changed\n     */\n    onSelectionChange: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree. Should accept : pickerEntries,onSelectItem,onOpenItem . Other properties are passed through.\n     */\n    render: PropTypes.func,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    queryVariables: PropTypes.object\n\n};\n\n\nexport {Picker}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction withDxContext() {\n    return (WrappedComponent) => {\n        let Component = class extends React.Component {\n            render() {\n                return (<WrappedComponent dxContext={this.context.dxContext} {...this.props} />)\n            }\n        }\n\n        Component.contextTypes = {\n            dxContext: PropTypes.object\n        };\n\n        return Component\n    }\n}\n\nexport { withDxContext }","import React from 'react';\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\n\nfunction withPathFromSelection(reduxStoreId) {\n    return (WrappedComponent) => {\n        return connect(\n            (state, ownProps) => ({\n                ...ownProps,\n                path: (state[\"selectedPaths_\" + reduxStoreId] && state[\"selectedPaths_\" + reduxStoreId].length === 1) ? state[\"selectedPaths_\" + reduxStoreId][0] : null,\n            }),\n            () => ({}))(WrappedComponent);\n    }\n}\n\nexport { withPathFromSelection }"]}