{"version":3,"sources":["../src/javascript/i18n/getI18n.js","../src/javascript/reduxStore.js","../src/javascript/theme/theme.js","../src/javascript/router/createOutletHistory.js","../src/javascript/theme/ThemeTester.jsx","../src/javascript/router/OutletRouter.jsx","../src/javascript/notification/NotificationProvider.jsx","../src/javascript/context/DxContextProvider.jsx","../src/javascript/context/withDxContext.jsx","../src/javascript/i18n/LanguageSwitcher.jsx","../src/javascript/layout/SettingsLayout.jsx","../src/javascript/layout/SearchBar.jsx","../src/javascript/picker/PickerViewMaterial.jsx","../src/javascript/picker/PickerViewMaterialMultiple.jsx","../src/javascript/picker/Picker.jsx","../src/javascript/helpers/withNodeFromPath.jsx","../src/javascript/helpers/withNodesFromPath.jsx","../src/javascript/helpers/withPathFromSelection.jsx","../src/javascript/notification/withNotifications.jsx"],"names":["getI18n","options","backends","XHR","backendOptions","contextPath","getData","splice","url","callback","data","split","ns","_url$split2","lang","value","JSON","stringify","status","defaults","_","use","ChainedBackend","init","i18n","debugTool","reducers","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","state","arguments","length","undefined","action","key","theme","createMuiTheme","grey","blueGrey","red","deepOrange","green","defineProperty","_message","_overrides","darkTheme","purple","createOutletHistory","baseHistory","outletName","getPath","path","parts","base","location","pathname","newPath","indexOf","substr","p","startsWith","push","getState","newState","extractPath","s","part","initialLocation","listeners","history","createHref","replace","n","go","goBack","goForward","prompt","block","listener","unlisten","listen","event","assign","call","_this","ThemeTester","props","switch","bind","themes","setState","previous","dxContext","setTheme","checked","React","Switch","color","onChange","this","Component","withDxContext","OutletRouter","createHashHistory","outletHistory","outlet","dispose","children","NotificationProvider","notificationContext","notify","message","closeNotification","Snackbar","notification","open","id","propTypes","PropTypes","object","isRequired","childContextTypes","DxContextProvider","_this$props","apollo","mui","redux","apolloClient","router","_typeof","currentTheme","client","_props","_state","Children","only","lng","uilang","createElement","I18nextProvider","HashRouter","type","ApolloProvider","Provider","generateClassName","createGenerateClassName","sheetsRegistry","sheetRegistry","SheetsRegistry","JssProvider","registry","MuiThemeProvider","sheetsManager","Map","WrappedComponent","_extends","context","contextTypes","LanguageSwitcher","anchorEl","target","changeLanguage","onClick","handleClick","t","Boolean","onClose","handleClose","map","locale","_this2","translate","SettingsLayout","classes","appBar","footer","appBarStyle","className","root","position","style","main","element","string","withStyles","palette","background","global","typography","fontFamily","text","secondary","SearchBar","handleChange","onFocus","onBlur","onClear","persist","timeout","setTimeout","onChangeFilter","inputSearchBar","placeholderLabel","Input","focus","rootFocus","input","inputFocus","searchIcon","Search","closeIcon","hidden","Close","primary","light","exports","PickerViewMaterial","pickerEntries","onOpenItem","onSelectItem","textRenderer","iconRenderer","loading","loadingContainer","disablePadding","entry","button","selectable","selected","listItem","listItemSelected","listItemToggle","selectedText","paddingLeft","depth","opacity","openable","hasChildren","buttonContainer","stopPropagation","disabled","KeyboardArrowDown","toggleSelected","toggleUnSelected","KeyboardArrowRight","listItemNodeTypeIcon","ListItemText","listItemLabel","inset","name","array","func","withTheme","PickerViewMaterialMultiple","CheckBox","CheckBoxOutlineBlank","spacing","unit","ExpandLess","ExpandMore","Picker","fragments","openPaths","render","rootPaths","queryVariables","hideRoot","openableTypes","selectableTypes","selectedPaths","defaultSelectedPaths","onSelectionChange","defaultOpenPaths","otherProps","onLoading","objectWithoutProperties","isOpenControlled","isSelectionControlled","query","gql","_templateObject$2","eventsHandlers","prevState","thispath","multiple","newSelectedPaths","vars","nodesById","jcr","addNode","node","index","pickerNode","pageInfo","totalCount","uuid","rootNodes","rootNode","openNodes","forEach","parent","parentIndex","nodes","child","selectedNodes","nextProps","nextState","nextOpenPaths","nextSelectedPaths","nextPropsToCompare","_props2","previousPropsToCompare","_props3","rootFound","reduce","acc","it","rootPath","getVariables","variables","fetchPolicy","error","_ref","Render","_this3","previousEntries","renderProps","getPickerEntries","arrayOf","oneOfType","shape","ViewComponent","_templateObject","graphql","ownProps","workspace","_templateObject$1","types","reduxStoreId","connect"],"mappings":"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","sourcesContent":["import i18n from 'i18next';\nimport XHR from 'i18next-xhr-backend';\nimport ChainedBackend from 'i18next-chained-backend';\n\nimport * as _ from 'lodash';\n\nfunction getI18n(options) {\n\n    let backends = [ XHR ];\n    let backendOptions = [ {\n        loadPath: (options.contextPath ? options.contextPath : '') + '/modules/{{ns}}/javascript/locales/{{lng}}.json'\n    }];\n\n    if (options['getData']) {\n        let getData = options['getData'];\n        backends.splice(0,0,XHR);\n        backendOptions.splice(0,0,\n            {\n                loadPath: \"{{ns}}/{{lng}}\",\n                ajax:(url, options, callback, data) => {\n                    let [ns,lang] = url.split('/');\n                    let value = getData(ns,lang);\n                    if (value) {\n                        callback(JSON.stringify(value), {status: 200});\n                    } else {\n                        callback(null, {status:400});\n                    }\n                }\n            }\n        )\n    }\n\n    let defaults = {\n        fallbackLng: 'en',\n        debug: true,\n\n        interpolation: {\n            escapeValue: false, // not needed for react!!\n        },\n\n        // react i18next special options (optional)\n        react: {\n            wait: true,\n            bindI18n: 'languageChanged loaded',\n            bindStore: 'added removed',\n            nsMode: 'default'\n        },\n\n\n        backend: {\n            backends: backends,\n            backendOptions: backendOptions\n        }\n    };\n\n    options = _.merge(defaults, options);\n\n    i18n\n        .use(ChainedBackend)\n        .init(options);\n    return i18n;\n}\n\n\nexport { getI18n };","import {createStore} from 'redux'\nimport * as _ from \"lodash\";\n\nconst reducers = {};\n\nconst store = function () {\n    let debugTool;\n    if (typeof window !== 'undefined') {\n        debugTool = window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n            name: \"DX Redux\",\n            instanceId: \"dx\"\n        });\n    }\n\n    return createStore((state = {}, action) => _.mapValues(reducers, (value, key) => value(state[key], action)), debugTool);\n}();\n\nconst resetStateReducer = function(state, action) {\n    if (action.type === 'RESET_STATE') {\n        return undefined;\n    }\n    return state;\n};\n\nexport {reducers, store, resetStateReducer};\n","import {createMuiTheme} from 'material-ui';\nimport {blueGrey, deepOrange, green, grey, lightBlue, purple, red} from 'material-ui/colors/index'\n\n// All the following keys are optional.\n// We try our best to provide a great default value.\nlet theme = createMuiTheme({\n\tpalette: {\n        background: {\n            global: grey[200],\n        },\n        contrastThreshold: 2.5,\n        tonalOffset: 0.2,\n        primary: {\n            main: blueGrey[600],\n        },\n\t\tsecondary: {\n            main: '#00a0e3',\n        },\n        error: {\n            main: red[400],\n        },\n        publish: {\n            main: deepOrange[500],\n        },\n        enabled: {\n            main: green[400],\n        },\n        delete: {\n            main: red[600],\n        },\n\t\tcancelButton: {\n\t\t\tmain: '#676767'\n\t\t},\n\t\tconfirmColor: {\n\t\t\tmain: '#00a0e3'\n\t\t}\n    },\n\toverrides: {\n\t\tMuiList: {\n\t\t\troot: {\n\t\t\t}\n\t\t},\n\t\tMuiListItem: {\n\t\t\troot: {\n\t\t\t}\n\t\t},\n\t\tMuiListItemText: {\n\t\t\troot: {\n\t\t\t}\n\n\t\t},\n\t\tMuiDialogTitle: {\n\t\t\troot: {\n\t\t\t\twidth: '600px',\n\t\t\t\tboxSizing: 'border-box',\n\t\t\t\tpadding: '24px 24px 0px 24px',\n\t\t\t\tfontSize: '1rem',\n\t\t\t}\n\t\t},\n\t\tMuiDialogContent: {\n\t\t\troot: {\n\t\t\t\tpadding: '4px 24px 10px 24px',\n\t\t\t},\n\n\t\t},\n\t\tMuiDialogContentText: {\n\t\t\troot: {\n\t\t\t\tfontSize: '0.875rem'\n\t\t\t}\n\t\t},\n\t\tMuiDialogActions: {\n\t\t\troot: {\n\t\t\t\tjustifyContent: 'left',\n\t\t\t\tpadding: '0 20px',\n\t\t\t\tmarginTop: '30px',\n\t\t\t},\n\t\t},\n\t\tMuiSwitch: {\n\t\t\troot: {\n\t\t\t\twidth: '52px'\n\t\t\t}\n\t\t},\n        MuiButton: {\n            root: {\n                color: \"inherit\",\n\t\t\t\tpadding: '8px',\n\t\t\t\tminWidth: '68px'\n            }\n        },\n\t\tMuiTableRow: {\n\t\t\troot: {\n\t\t\t\tborderBottom: '1px solid rgba(224, 224, 224, 1)',\n\t\t\t\t'&:hover': {\n\t\t\t\t\tbackgroundColor: '#F7F7F7!important'\n\t\t\t\t}\n\t\t\t},\n\t\t},\n        MuiTableCell: {\n            body: {\n                color: \"inherit\",\n            }\n        },\n        MuiIconButton: {\n            root: {\n                color: \"inherit\",\n\t\t\t\twidth: '38px',\n            },\n\n        },\n        MuiCheckbox: {\n\t\t\troot: {\n\t\t\t    width: '18px',\n\t\t\t    marginRight: '10px',\n            }\n        },\n\t\tMuiFormControlLabel: {\n\t\t\tlabel: {\n\t\t\t\tcolor: '#676767',\n\t\t\t\tfontSize: '13px'\n\t\t\t}\n\t\t},\n\t\tMuiInput: {\n\t\t\troot: {\n\t\t\t\t'&:before': {\n\t\t\t\t\tdisplay: 'none'\n\t\t\t\t},\n\t\t\t\t'&:after': {\n\t\t\t\t\tdisplay: 'none'\n\t\t\t\t},\n\t\t\t\tboxShadow: 'inset 1px 1px 1px 0 rgba(38, 38, 38, 0.3)',\n\t\t\t\tborderRadius: '2px',\n\t\t\t\tbackground: 'whitesmoke',\n\t\t\t\tpadding: '2px 11px 0',\n\t\t\t\tboxSizing: 'border-box',\n\t\t\t},\n\t\t\tinput: {\n\t\t\t\tcolor: '#676767',\n\t\t\t\tfontSize: '0.8rem'\n\t\t\t}\n\t\t},\n\t\tMuiFormControl: {\n\t\t\troot: {\n\t\t\t\twidth:\"100%\",\n\t\t        \"& error\": {\n\t\t        },\n\t\t        \"& message\": {\n\t\t            display:\"none\"\n\t\t        },\n\t\t        \"& label\": {\n\t\t        }\n\t\t\t}\n\t\t},\n\t\tMuiCollapse: {\n\t\t\tentered: {\n\t\t\t\toverflow: 'visible'\n\t\t\t}\n\t\t},\n\t\tMuiFormHelperText: {\n\t\t\troot: {\n\t\t\t\tright: '10px',\n\t\t\t\tcolor: 'red',\n\t\t\t\tposition: 'absolute',\n\t\t\t\tbackground: 'white',\n\t\t\t\theight: 'calc(100% - 6px)',\n\t\t\t\ttop: '3px',\n\t\t\t\tmargin: '0',\n\t\t\t\tmarginTop: '0',\n\t\t\t\tlineHeight: '0.3rem',\n\t\t\t\tzIndex: '99',\n\t\t\t\tpadding: '11px 5px 11px 11px',\n\t\t\t\tboxSizing: 'border-box',\n\t\t\t\t\"&:hover message\": {\n\t\t\t\t\tdisplay: 'block'\n\t\t\t\t},\n\t\t\t\t\"& error\": {\n\t\t        },\n\t\t        \"& message\": {\n\t\t\t\t\ttop: '24px',\n\t\t\t\t    width: '280px',\n\t\t\t\t    right: '0',\n\t\t\t\t    padding: '9px',\n\t\t\t\t    zIndex: '9',\n\t\t\t\t    display: 'none',\n\t\t\t\t    position: 'absolute',\n\t\t\t\t    background: '#fc922f',\n\t\t\t\t    boxShadow: '1px 1px 2px 0px rgba(38, 38, 38, 0.3)',\n\t\t\t\t    borderRadius: '2px',\n\t\t\t\t    color: 'white',\n\t\t\t\t    padding: '14px',\n\t\t\t\t\tlineHeight: 'normal'\n\t\t        },\n\t\t        \"& label\": {\n\t\t        }\n\t\t\t}\n\t\t},\n\t\tMuiTypography: {\n\t\t\troot: {\n\t\t\t},\n\t\t\tcolorTextSecondary: {\n\t\t\t\tcolor: 'rgba(0, 0, 0, 0.54)'\n\t\t\t},\n\t\t\ttitle: {\n\t\t\t\tfontSize: '1.2rem'\n\t\t\t},\n\t\t\tsubheading: {\n\t\t\t\tfontSize: '0.875rem'\n\t\t\t},\n\t\t\tcaption: {\n\t\t\t\tfontSize: '0.65rem',\n\t\t\t\tfontWeight: '800',\n\t\t\t\ttextTransform: 'uppercase'\n\t\t\t}\n\t\t},\n\t\tMuiSelect: {\n\t\t\troot: {\n\t\t\t\tcolor: '#EBEBEB'\n\t\t\t},\n\t\t\tselect: {},\n\t\t\tselectMenu: {\n\t\t\t\tcolor: 'whitesmoke',\n\t\t\t\tpaddingRight: '23px',\n\t\t\t\t'&:focus': {\n\t\t\t\t\tbackgroundColor: 'inherit'\n\t\t\t\t}\n\t\t\t},\n\t\t\tdisabled: {},\n\t\t\ticon: {},\n\t\t},\n\t\tMuiMenuItem: {\n\t\t\troot: {\n\t\t\t\tbackgroundColor: 'transparent!important',\n\t\t\t\tpadding: '6px 0',\n\t\t\t\tfontSize: '0.875rem'\n\t\t\t},\n\t\t\tselected: {\n\t\t\t}\n\n\t\t},\n\t\tMuiListItemText: {\n\t\t\troot: {\n\t\t\t\tpadding: '0',\n\t\t\t}\n\t\t},\n\t\tMuiPaper: {\n\t\t\troot: {\n\n\t\t\t}\n\t\t}\n    }\n});\n\nlet darkTheme = createMuiTheme({\n    palette: {\n        type: \"dark\",\n        background: {\n            global: grey[900]\n        },\n        contrastThreshold: 3.0,\n        tonalOffset: 0.2,\n        primary: {\n            main: purple[500]\n        },\n        secondary: {\n            main: green[400]\n        },\n        error: {\n            main: red[200]\n        },\n        publish: {\n            main: deepOrange[500],\n        },\n        enabled: {\n            main: green[400],\n        },\n        delete: {\n            main: red[600],\n        }\n    },\n    overrides: {\n        MuiButton: {\n            root: {\n                color: \"inherit\",\n            }\n        },\n        MuiTableCell: {\n            body: {\n                color: \"inherit\",\n            }\n        },\n        MuiIconButton: {\n            root: {\n                color: \"inherit\",\n            }\n        }\n    }\n});\n\n\nexport {theme, darkTheme}\n","import * as _ from \"lodash\";\n\nfunction createOutletHistory(baseHistory, outletName) {\n\n    const getPath = (path) => {\n        let parts = [];\n        let base = baseHistory.location.pathname;\n        let newPath = outletName + ':' + path;\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(')+1);\n            base = base.substr(0,base.indexOf(')'));\n            parts = base.split('//')\n            parts = _.map(parts, (p)=> (p.startsWith(outletName + ':') ? newPath : p));\n        }\n        if (parts.indexOf(newPath) === -1) {\n            parts.push(newPath);\n        }\n        return '/('+ _.join(parts,'//') + ')';\n    };\n\n    const getState = function (state) {\n        let newState;\n        if (state) {\n            newState = baseHistory.location.state ? baseHistory.location.state : {};\n            newState['router_' + outletName] = state;\n        } else if (baseHistory.location.state) {\n            newState = baseHistory.location.state;\n            delete newState['router_' + outletName]\n        }\n        return newState;\n    };\n\n    const extractPath = function(base) {\n        if (base.indexOf('(') > -1) {\n            base = base.substr(base.indexOf('(') + 1);\n            base = base.substr(0, base.indexOf(')'));\n            let parts = base.split('//')\n            let s = outletName + ':';\n            let part = _.find(parts, (p)=> (p.startsWith(s)));\n            if (part) {\n                return part.substr(s.length)\n            }\n        }\n        return '';\n    };\n\n    let initialLocation = _.clone(baseHistory.location);\n    initialLocation.pathname = extractPath(initialLocation.pathname);\n\n    let listeners = [];\n\n    const history = {\n        length: baseHistory.length,\n        action: baseHistory.action,\n        location: initialLocation,\n        createHref: (location) => {\n            return baseHistory.createHref({pathname:getPath(location.pathname)});\n        },\n        push: (path, state) => {\n            return baseHistory.push(getPath(path),getState(state));\n        },\n        replace: (path, state) => {\n            baseHistory.replace(getPath(path),getState(state));\n        },\n        go: (n) => {\n            baseHistory.go(n)\n        },\n        goBack: () => {\n            baseHistory.goBack()\n        },\n        goForward: () => {\n            baseHistory.goForward()\n        },\n        block:(prompt) => {\n            return baseHistory.block(prompt)\n        },\n        listen: (listener) => {\n            listeners.push(listener);\n            return () => {\n                _.pull(listeners, listener);\n            }\n        },\n        dispose: () => {\n            unlisten();\n        }\n    };\n\n    const unlisten = baseHistory.listen( (event) => {\n        let path = extractPath(event.pathname);\n        let state;\n        if (event.state && event.state['router_' + outletName]) {\n            state = event.state['router_' + outletName];\n        }\n        if (history.location.pathname !== path || history.location.state !== state) {\n            Object.assign(history.location, event);\n            history.location.pathname = path;\n            history.location.state = state;\n            _.each(listeners, (listener) => listener.call(this,history.location))\n        }\n    });\n\n    // unlisten when not used anymore !\n\n    return history\n}\n\nexport { createOutletHistory }","import React from 'react';\nimport {withDxContext} from \"../context\";\nimport {Switch} from 'material-ui'\nimport {theme, darkTheme} from \"./theme\";\n\nclass ThemeTester extends React.Component {\n    constructor(props) {\n        super(props);\n        this.switch = this.switch.bind(this);\n\n        this.themes = [theme, darkTheme];\n        this.state = {\n            checked:false\n        };\n    }\n\n    switch() {\n        this.setState((previous) => {\n            this.props.dxContext.setTheme(previous.checked ? theme : darkTheme);\n            return {\n                checked: !previous.checked\n            }\n        });\n    }\n\n\n    render() {\n        return <Switch color=\"default\" onChange={this.switch} checked={this.state.checked}/>\n    }\n\n}\n\n\nThemeTester = withDxContext()(ThemeTester);\n\nexport {ThemeTester}","import React from 'react';\n\nimport {createHashHistory} from \"history\";\nimport {createOutletHistory} from \"./createOutletHistory\"\nimport {Router} from 'react-router'\n\nclass OutletRouter extends React.Component {\n\n    constructor(props) {\n        super(props);\n        let baseHistory = createHashHistory();\n        this.outletHistory = createOutletHistory(baseHistory, props.outlet);\n    }\n\n    componentWillMount() {\n\n    }\n\n    componentWillUnmount() {\n        this.outletHistory.dispose();\n    }\n\n    render() {\n        return (<Router history={this.outletHistory}>{this.props.children}</Router>)\n    }\n}\n\nexport { OutletRouter };","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Component } from \"react\";\nimport {Snackbar} from \"material-ui\";\n\nclass NotificationProvider extends Component {\n    constructor(props) {\n        super(props);\n\n        let {notificationContext} = this.props;\n\n        this.state = {\n            notification: {\n                message: \"\",\n                open: false\n            }\n        };\n\n        notificationContext.notify = (message) => {\n            this.setState({\n                notification: {\n                    message: message,\n                    open:true\n                }\n            });\n        };\n\n        notificationContext.closeNotification = () => {\n            this.setState({\n                notification: {\n                    message: '',\n                    open: false\n                }\n            });\n        };\n    }\n\n    getChildContext() {\n        return {\n            notificationContext: this.props.notificationContext\n        };\n    }\n\n    render() {\n        // TODO make it configurable\n        return <div>\n            {this.props.children}\n\n            <Snackbar\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'left',\n                }}\n                autoHideDuration={5000}\n                onClose={this.props.notificationContext.closeNotification}\n                open={this.state.notification.open}\n                SnackbarContentProps={{\n                    'aria-describedby': 'message-id',\n                }}\n                message={<span id=\"message-id\">{this.state.notification.message}</span>}\n            />\n        </div>;\n    }\n}\n\nNotificationProvider.propTypes = {\n    notificationContext: PropTypes.object.isRequired\n};\n\nNotificationProvider.childContextTypes = {\n    notificationContext: PropTypes.object.isRequired\n};\n\nexport {NotificationProvider}","import React from 'react';\nimport {MuiThemeProvider} from 'material-ui';\nimport {createGenerateClassName} from 'material-ui/styles/index';\nimport {getI18n} from \"../i18n/getI18n\";\nimport {store} from '../reduxStore';\nimport {theme} from '../theme'\nimport {client} from '@jahia/apollo-dx';\nimport {ApolloProvider} from 'react-apollo';\nimport {Provider} from 'react-redux'\nimport {I18nextProvider} from 'react-i18next'\nimport {HashRouter} from 'react-router-dom'\nimport {OutletRouter} from '../router'\nimport PropTypes from 'prop-types';\nimport {JssProvider, SheetsRegistry} from 'react-jss';\nimport {NotificationProvider} from \"../notification/NotificationProvider\";\n\nclass DxContextProvider extends React.Component {\n    constructor(props) {\n        super(props);\n        let {dxContext, children, i18n, apollo, redux, mui, router, apolloClient} = this.props;\n        let state = {};\n        if (mui) {\n            if (typeof mui === 'object') {\n                state.currentTheme = mui;\n            } else {\n                state.currentTheme = theme;\n            }\n            dxContext.setTheme = (theme) => {\n                // theTheme = _.merge({}, theme, this.state.theme);\n                this.setState({\n                    currentTheme: theme\n                });\n            };\n        }\n\n        if (dxContext.apolloClient) {\n            state.apolloClient = dxContext.apolloClient;\n        } else if (apolloClient) {\n            state.apolloClient = apolloClient;\n        } else if (apollo) {\n            let options = {contextPath:dxContext.contextPath};\n            if (typeof apollo === 'object') {\n                Object.assign(options, apollo)\n            }\n            state.apolloClient = client(options);\n        }\n\n        this.state = state;\n    }\n\n    getChildContext() {\n        return {dxContext: this.props.dxContext};\n    }\n\n    render() {\n        let {dxContext, children, i18n, apollo, redux, mui, router} = this.props;\n        let {currentTheme, apolloClient} = this.state;\n\n        let Component = React.Children.only(children);\n        if (i18n) {\n            let options = {lng:dxContext.uilang, contextPath:dxContext.contextPath};\n            if (typeof i18n === 'object') {\n                Object.assign(options, i18n)\n            }\n            Component = React.createElement(I18nextProvider, {i18n:getI18n(options)}, Component);\n        }\n        if (router) {\n            let router = HashRouter;\n            let options = {};\n            if (typeof router === 'object') {\n                if (router.type === 'outlet') {\n                    router = OutletRouter;\n                    options.outlet = router.outlet;\n                }\n            }\n            Component = React.createElement(HashRouter, options, Component);\n        }\n        if (apolloClient) {\n            Component = React.createElement(ApolloProvider, {client:apolloClient}, Component);\n        }\n        if (redux) {\n            Component = React.createElement(Provider, {store:store}, Component);\n        }\n\n        if (currentTheme) {\n            let generateClassName = dxContext.generateClassName ? dxContext.generateClassName : createGenerateClassName();\n            let sheetsRegistry = dxContext.sheetRegistry ? dxContext.sheetRegistry : new SheetsRegistry();\n\n            Component = React.createElement(JssProvider, {registry: sheetsRegistry,  generateClassName:generateClassName},\n                React.createElement(MuiThemeProvider, {theme: currentTheme, sheetsManager:new Map()},\n                    React.createElement(NotificationProvider, {notificationContext:{}}, Component)));\n        }\n\n        return Component;\n    }\n}\n\nDxContextProvider.childContextTypes = {\n    dxContext: PropTypes.object\n};\n\nexport {DxContextProvider}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction withDxContext() {\n    return (WrappedComponent) => {\n        let Component = class extends React.Component {\n            render() {\n                return (<WrappedComponent dxContext={this.context.dxContext} {...this.props} />)\n            }\n        }\n\n        Component.contextTypes = {\n            dxContext: PropTypes.object\n        };\n\n        return Component\n    }\n}\n\nexport { withDxContext }","import React from 'react';\nimport {Button, Menu, MenuItem} from 'material-ui';\nimport {translate} from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nclass LanguageSwitcher extends React.Component {\n\n    constructor(props,context) {\n        super(props,context);\n        this.state = {\n            anchorEl: null,\n        };\n    }\n\n    handleClick(event) {\n        this.setState({anchorEl: event.target});\n    }\n\n    handleClose(lang) {\n        this.setState({anchorEl: null});\n        if (lang) {\n            this.context.i18n.changeLanguage(lang);\n        }\n    };\n\n    render() {\n        let availableLocales = ['fr', 'en'];\n\n        return (<div>\n            <Button onClick={this.handleClick.bind(this)}\n            >{this.props.t('label.languages')}</Button>\n            <Menu open={Boolean(this.state.anchorEl)} onClose={this.handleClose.bind(this, null)}\n                  anchorEl={this.state.anchorEl}>\n                {availableLocales.map((locale) => (\n                    <MenuItem onClick={this.handleClose.bind(this, locale)} key={locale}\n                              value={locale}>{locale}</MenuItem>))}\n            </Menu>\n        </div>);\n    }\n}\n\nLanguageSwitcher.contextTypes = {\n    i18n: PropTypes.object\n};\n\nLanguageSwitcher = translate('react-dxcomponents')(LanguageSwitcher);\n\n\nexport {LanguageSwitcher}\n","import React from 'react';\nimport {AppBar, Toolbar, Typography, withStyles} from 'material-ui';\nimport PropTypes from 'prop-types';\n\nconst styles = theme => ({\n    root: {\n        backgroundColor: theme.palette.background.global\n    },\n    main: {\n        minHeight: 'calc(100% - 96px)',\n        marginTop: 64,\n        padding: 1\n    },\n    footer: {\n        fontSize: '14px',\n        fontFamily: theme.typography.fontFamily,\n        fontWeight: 300,\n        padding: \"8px\",\n        textAlign: \"center\",\n        color: theme.palette.text.secondary\n    },\n    appBar: {\n        transition: \"all 200ms ease-in-out\"\n    }\n});\n\n\nclass SettingsLayout extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        let { classes, appBar, children, footer, appBarStyle } = this.props;\n        return (\n            <section className={classes.root} >\n                <AppBar position=\"fixed\" classes={{root:classes.appBar}} style={appBarStyle}>\n                    {appBar}\n                </AppBar>\n                <section className={classes.main}>\n                    {children}\n                </section>\n                <footer className={classes.footer}>\n                    {footer}\n                </footer>\n            </section>\n        );\n    }\n}\n\n\nSettingsLayout.propTypes = {\n    appBar: PropTypes.element,\n    footer: PropTypes.string\n};\n\nSettingsLayout = withStyles(styles)(SettingsLayout);\n\nexport {SettingsLayout};\n","import React from 'react';\nimport {Input, InputAdornment, withStyles, Icon, IconButton} from 'material-ui';\nimport {Search, Close} from 'material-ui-icons';\nimport {translate} from 'react-i18next';\n\nconst styles = theme => ({\n    root: {\n        margin: '0',\n        color : 'inherit',\n        backgroundColor : theme.palette.primary.light,\n        width: '720px',\n        height: '44px',\n        lineHeight: '40px',\n        borderRadius: '3px',\n        fontWeight: '200'\n    },\n    rootFocus: {\n        margin: '0',\n        color: theme.palette.text.secondary,\n        backgroundColor : '#fff',\n        width: '720px',\n        height: '44px',\n        lineHeight: '40px',\n        borderRadius: '3px',\n        fontWeight: '100',\n        boxShadow: \"0 1px 8px 0 rgba(0, 0, 0, 0.4)\",\n        // '& $input': {\n        //     width: '300px'\n        // }\n    },\n\tinput: {\n        transitionProperty: 'width',\n        transitionDuration: '300ms',\n        transitionTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1)',\n        transitionDelay: '0ms',\n\t\tcolor: 'whitesmoke'\n    },\n\tinputFocus: {\n\t\tcolor: '#707070'\n    },\n    searchIcon: {\n        'marginTop': 'auto',\n        'marginBottom': 'auto',\n        'opacity': '0.87'\n    },\n    hidden: {\n        opacity: 0,\n        marginTop: 'auto',\n        marginBottom: 'auto'\n    },\n    closeIcon: {\n        marginTop: 'auto',\n        marginBottom: 'auto',\n        opacity: 0.87\n    }\n});\n\nclass SearchBar extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onClear = this.onClear.bind(this);\n        this.state = {\n            focus: false\n        }\n    }\n\n    handleChange(event) {\n        // Let the handler deal with the change only when the user has paused changing the filter text for a second.\n        event.persist();\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        this.timeout = setTimeout(function() {\n            this.props.onChangeFilter(event.target.value)\n        }.bind(this), 1000);\n    }\n\n    onClear() {\n        this.inputSearchBar.value = '';\n        this.props.onChangeFilter('');\n    }\n\n    onFocus() {\n        this.setState({\n            focus: true\n        });\n        this.props.onFocus();\n    }\n\n    onBlur() {\n        this.setState({\n            focus: false\n        });\n        this.props.onBlur();\n    }\n\n    render() {\n\n        const { classes,t, placeholderLabel } = this.props;\n\n        return (\n            <Input classes={{root: (this.state.focus ? classes.rootFocus : classes.root), input: (this.state.focus ? classes.inputFocus : classes.input)}}\n                   onChange={this.handleChange}\n                   onBlur={this.onBlur}\n                   onFocus={this.onFocus}\n                   disableUnderline={true}\n                   type=\"text\"\n                   inputRef={(input) => {this.inputSearchBar = input;}}\n                   placeholder={placeholderLabel || t('label.searchPlaceholder')}\n                   startAdornment={<InputAdornment classes={{root: classes.searchIcon}} position=\"start\"><Search/></InputAdornment>}\n                   endAdornment={<InputAdornment position=\"end\" classes={{root: (this.state.focus ? classes.closeIcon : classes.hidden)}}>\n                       <IconButton onClick={this.onClear}>\n                           <Icon><Close/></Icon>\n                       </IconButton>\n                   </InputAdornment>}\n                   style={this.props.style}\n            />\n        )\n    }\n}\n\nSearchBar = withStyles(styles)(translate('react-dxcomponents')(SearchBar));\n\nexport {SearchBar};\n","import React from 'react';\nimport {\n    IconButton,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemSecondaryAction,\n    ListItemText,\n    SvgIcon,\n    withStyles,\n    withTheme\n} from 'material-ui';\nimport {KeyboardArrowDown, KeyboardArrowRight} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\n\nlet styles = (theme) => ({\n    root: {\n        position:\"relative\",\n    },\n    loading: {\n        opacity:0.8\n    },\n\tlistItemSelected: {\n\t\tbackground: '#00a0e3',\n\t\tcolor: 'whitesmoke',\n\n\t\t'&:hover': {\n\t\t\tbackground: '#00a0e3',\n\t\t\tcolor: 'whitesmoke',\n\t\t},\n\t},\n\tlistItem: {\n\t\tpadding: '5px 10px 5px 0'\n\t},\n\tlistItemLabel: {\n\t\tpadding: '0px',\n\t\t'& h3': {\n\t\t\tfontSize: '0.875rem',\n\t\t\tcolor: '#676767',\n\t\t\tfontWeight: '100',\n\t\t}\n\t},\n\tlistItemToggle: {\n\t\tmarginRight: '10px',\n\t\tborderRadius: '0',\n\t\twidth: 'auto',\n\t},\n\tlistItemNodeTypeIcon: {\n\t\tmarginRight: '5px'\n\t},\n    selectedText: {\n        color: 'whitesmoke!important',\n    },\n    loadingContainer: {\n        position:\"absolute\",\n        width:\"100%\",\n        height:\"100%\",\n        zIndex:999\n    },\n\ttoggleUnSelected: {\n\t\tcolor: '#00a0e3',\n\t},\n\ttoggleSelected: {\n\t\tcolor: 'whitesmoke',\n\t},\n\tbuttonContainer: {\n\t\t'&:hover':{\n\t\t\tbackgroundColor: 'transparent'\n\t\t}\n\t}\n});\n\nlet PickerViewMaterial = function (props) {\n    let {theme, classes, pickerEntries, onOpenItem, onSelectItem, textRenderer, iconRenderer, loading} = props;\n    return (<div className={classes.root}>\n        { loading && <div className={classes.loadingContainer} />}\n        <List disablePadding classes={{root:loading ? (classes.root + ' ' + classes.loading) : classes.root}}>\n            {pickerEntries.map((entry) =>\n                (<ListItem button\n                           onClick={() => entry.selectable ? onSelectItem(entry.path, !entry.selected) : onOpenItem(entry.path, !entry.open)}\n                           key={entry.path}\n                           divider={true}\n                           className={entry.selected ? (classes.listItem + ' ' + classes.listItemSelected) : classes.listItem }\n                    >\n                        <ListItemIcon className={entry.selected ? (classes.listItemToggle + ' ' + classes.selectedText) : classes.listItemToggle} style={{paddingLeft: (entry.depth + 1) * 20, opacity:(entry.openable && entry.hasChildren ? 1:0)}} >\n                            <IconButton className={classes.buttonContainer} onClick={(event) => {onOpenItem(entry.path, !entry.open); event.stopPropagation()}} disabled={!(entry.openable && entry.hasChildren)}>\n                                {entry.open ?\n                                    <KeyboardArrowDown className={entry.selected ? (classes.toggleSelected) : classes.toggleUnSelected} /> :\n                                    <KeyboardArrowRight className={entry.selected ? (classes.toggleSelected) : classes.toggleUnSelected} />}\n                            </IconButton>\n                        </ListItemIcon>\n\n                        <ListItemIcon className={entry.selected ? (classes.listItemNodeTypeIcon + ' ' + classes.selectedText) : classes.listItemNodeTypeIcon} >\n                            { iconRenderer && iconRenderer.call(this,entry) }\n                        </ListItemIcon>\n\n                        <ListItemText classes={entry.selected ? {root:classes.listItemLabel, primary:classes.selectedText} : {root:classes.listItemLabel}} inset\n                                      primary={textRenderer ? textRenderer.call(this, entry) : entry.name} />\n                    </ListItem>\n                )\n            )}\n        </List>\n    </div>)\n};\n\nPickerViewMaterial.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem: PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func\n};\n\nPickerViewMaterial = withTheme()(withStyles(styles)(PickerViewMaterial));\n\nexport {PickerViewMaterial};\n","import React from 'react';\nimport {IconButton, List, ListItem, ListItemIcon, ListItemSecondaryAction, ListItemText, withTheme} from 'material-ui';\nimport {ExpandLess, ExpandMore, CheckBoxOutlineBlank, CheckBox} from 'material-ui-icons'\nimport PropTypes from 'prop-types';\n\nlet PickerViewMaterialMultiple = function (props) {\n    return (<List>\n        {props.pickerEntries.map((entry) =>\n            (<ListItem button\n                       onClick={() => entry.selectable ? props.onSelectItem(entry.path, !entry.selected, true) : props.onOpenItem(entry.path, !entry.open)}\n                       key={entry.path}\n                >\n                    <ListItemIcon style={entry.selectable ? {} : {opacity: 0}}>{entry.selected ? <CheckBox/> :\n                        <CheckBoxOutlineBlank/>}</ListItemIcon>\n                    <ListItemText style={{paddingLeft: entry.depth * props.theme.spacing.unit}} inset\n                                  primary={props['textRenderer'] ? props['textRenderer'].call(this, entry) : entry.name} />\n                    <ListItemSecondaryAction>\n                        {entry.openable && entry.hasChildren ? (\n                            <IconButton onClick={() => props.onOpenItem(entry.path, !entry.open)}>{entry.open ?\n                                <ExpandLess/> : <ExpandMore/>}</IconButton>) : null}\n                    </ListItemSecondaryAction>\n                </ListItem>\n            )\n        )}\n    </List>)\n};\n\nPickerViewMaterialMultiple.propTypes = {\n    pickerEntries: PropTypes.array.isRequired,\n    onSelectItem:  PropTypes.func,\n    onOpenItem: PropTypes.func,\n    textRenderer: PropTypes.func,\n};\n\nPickerViewMaterialMultiple = withTheme()(PickerViewMaterialMultiple);\n\nexport { PickerViewMaterialMultiple };","import React from 'react';\nimport {Query} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport PropTypes from 'prop-types';\n\nclass Picker extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        let {\n            fragments, render, rootPaths, queryVariables, hideRoot,\n            openableTypes, selectableTypes,\n            openPaths, onOpenItem,\n            selectedPaths, onSelectItem,\n            defaultSelectedPaths, onSelectionChange,\n            defaultOpenPaths,\n            onLoading,\n            ...otherProps\n        } = props;\n\n        this.isOpenControlled = openPaths != null;\n        this.isSelectionControlled = selectedPaths != null;\n\n        this.query = gql`\n            query PickerQuery($rootPaths:[String!]!, $selectable:[String]!, $openable:[String]!, $openPaths:[String!]!, $types:[String]!) {\n                jcr {\n                    rootNodes:nodesByPath(paths: $rootPaths) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}, limit:1) {\n                            pageInfo {\n                                totalCount\n                            }\n                        }\n                        selectable : isNodeType(type: {types:$selectable})\n                        openable : isNodeType(type: {types:$openable})\n                        ... node\n                    },\n                    openNodes:nodesByPath(paths: $openPaths) {\n                        path\n                        uuid\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                children(typesFilter:{types:$types}, limit:1) {\n                                    pageInfo {\n                                        totalCount\n                                    }\n                                }\n                                selectable : isNodeType(type: {types:$selectable})\n                                openable : isNodeType(type: {types:$openable})\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n\n        replaceFragmentsInDocument(this.query, fragments);\n\n        let eventsHandlers = {};\n\n        let state = {\n            renderProps: otherProps,\n            eventsHandlers: eventsHandlers\n        };\n\n\n        if (!this.isOpenControlled) {\n            state.openPaths = defaultOpenPaths ? _.clone(defaultOpenPaths) : [];\n            eventsHandlers.onOpenItem = (path, open) => {\n                this.setState((prevState) => ({\n                    openPaths: open ?\n                        [...prevState.openPaths, path] :\n                        _.filter(prevState.openPaths, (thispath) => thispath !== path)\n                }));\n            };\n        } else {\n            eventsHandlers.onOpenItem = onOpenItem;\n        }\n\n        if (!this.isSelectionControlled) {\n            state.selectedPaths = defaultSelectedPaths ? _.clone(defaultSelectedPaths) : [];\n            eventsHandlers.onSelectItem = (path, selected, multiple) => {\n                this.setState((prevState) => {\n                    let newSelectedPaths = selected ?\n                        [...(multiple ? prevState.selectedPaths : []), path] :\n                        _.filter(prevState.selectedPaths, (thispath) => thispath !== path);\n                    onSelectionChange(newSelectedPaths);\n                    return {\n                        selectedPaths: newSelectedPaths\n                    };\n                });\n            };\n        } else {\n            eventsHandlers.onSelectItem = onSelectItem;\n        }\n\n        this.state = state;\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        let {\n            fragments, render, rootPaths, queryVariables, hideRoot,\n            openableTypes, selectableTypes,\n            openPaths, onOpenItem,\n            selectedPaths, onSelectItem,\n            defaultSelectedPaths, onSelectionChange,\n            defaultOpenPaths,\n            onLoading,\n            ...otherProps\n        } = nextProps;\n\n        if (!_.isEqual(_.omit(otherProps, _.functions(otherProps)), _.omit(prevState.renderProps, _.functions(prevState.renderProps)))) {\n            return {\n                renderProps: otherProps\n            }\n        }\n\n        return null;\n    }\n\n    getVariables(selectedPaths, openPaths) {\n        let {rootPaths, openableTypes, selectableTypes, queryVariables} = this.props;\n\n        let vars = {\n            rootPaths: rootPaths,\n            types: _.union(openableTypes, selectableTypes),\n            selectable: selectableTypes,\n            openable: openableTypes,\n            openPaths: openPaths,\n        };\n\n        if (queryVariables) {\n            _.assign(vars, queryVariables);\n        }\n\n        return vars;\n    }\n\n    getPickerEntries(data, selectedPaths, openPaths) {\n        let pickerEntries = [];\n        let nodesById = {};\n        let jcr = data.jcr;\n\n        let addNode = function (node, depth, index) {\n            let selected = false;\n            if (node.selectable) {\n                selected = _.indexOf(selectedPaths, node.path) !== -1\n            }\n            let pickerNode = {\n                name: node.name,\n                path: node.path,\n                open: node.openable && _.indexOf(openPaths, node.path) !== -1,\n                selected: selected,\n                openable: node.openable,\n                selectable: node.selectable,\n                depth: depth,\n                prefix: _.repeat(\"&nbsp;\", depth * 3),\n                node: node,\n                hidden: false,\n                hasChildren: node.children.pageInfo.totalCount > 0\n            };\n            pickerEntries.splice(index, 0, pickerNode);\n            nodesById[node.uuid] = pickerNode;\n            return pickerNode;\n        };\n\n        if (jcr) {\n            if (jcr.rootNodes) {\n                _.forEach(jcr.rootNodes, rootNode => {\n                    let root = addNode(rootNode, 0, 0);\n                    root.hidden = this.props.hideRoot;\n                });\n            }\n            if (jcr.openNodes) {\n                _.sortBy(jcr.openNodes, ['path']).forEach((node) => {\n                    let parent = nodesById[node.uuid];\n                    if (parent) {\n                        let parentIndex = _.indexOf(pickerEntries, parent);\n                        _.forEachRight(node.children.nodes, (child) => {\n                            addNode(child, parent.depth + 1, parentIndex + 1)\n                        })\n                    }\n                });\n            }\n        }\n\n        // Nodes loaded, fill selection list\n        let selectedNodes = _.filter(pickerEntries, (node) => {\n            return node.selected\n        }).map((node) => {\n            return node.node\n        });\n\n        selectedPaths = _.map(selectedNodes, \"path\");\n        pickerEntries = _.filter(pickerEntries, pickerNode => {\n            return !pickerNode.hidden;\n        });\n\n        return pickerEntries;\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        let {\n            render:nextRender, rootPaths:nextRootPaths, hideRoot:nextHideRoot,\n            openPaths:nextOpenPaths, selectedPaths:nextSelectedPaths, defaultSelectedPaths:nextDefaultSelectedPaths, defaultOpenPaths:nextDefaultOpenPaths,\n            ...nextPropsToCompare\n        } = nextProps;\n\n        let {\n            render, rootPaths, hideRoot,\n            openPaths, selectedPaths, defaultSelectedPaths, defaultOpenPaths,\n            ...previousPropsToCompare\n        } = this.props;\n\n        nextPropsToCompare = _.omit(nextPropsToCompare, _.functions(nextPropsToCompare));\n        previousPropsToCompare = _.omit(previousPropsToCompare, _.functions(previousPropsToCompare));\n\n        let changed = (this.isSelectionControlled ? !_.isEqual(selectedPaths, nextSelectedPaths) : !_.isEqual(this.state.selectedPaths,nextState.selectedPaths))\n            || (this.isOpenControlled ? !_.isEqual(openPaths, nextOpenPaths) : !_.isEqual(this.state.openPaths,nextState.openPaths))\n            || !(_.isEqual(nextPropsToCompare, previousPropsToCompare));\n\n        return changed;\n        // return true;\n    }\n\n    render() {\n        let selectedPaths = this.isSelectionControlled ? this.props.selectedPaths : this.state.selectedPaths;\n        let openPaths = this.isOpenControlled ? this.props.openPaths : this.state.openPaths;\n        let {rootPaths, openableTypes, selectableTypes, queryVariables} = this.props;\n\n        openPaths = _.clone(openPaths);\n        let fullyOpenPath = (path) => {\n            let rootFound = false;\n            _.tail(_.split(path, \"/\")).reduce((acc, it) => {\n                if (!rootFound) {\n                    _.forEach(rootPaths, rootPath => {\n                        rootFound = rootFound || _.startsWith(acc, rootPath);\n                    })\n                }\n                if (rootFound && _.indexOf(openPaths, acc) === -1) {\n                    openPaths.push(acc);\n                }\n                return acc + \"/\" + it\n            }, \"\");\n        };\n\n        _.each(selectedPaths, path => fullyOpenPath(path));\n\n        let vars = this.getVariables(selectedPaths, openPaths);\n\n        return <Query query={this.query} variables={vars} fetchPolicy={\"cache-first\"} >\n            {\n                ({error, loading, data}) => {\n                    let Render = this.props.render;\n                    if (this.props.onLoading) {\n                        this.props.onLoading(loading);\n                    }\n                    if (loading) {\n                        if (this.previousEntries) {\n                            return <Render {...this.state.eventsHandlers} {...this.state.renderProps}\n                                           pickerEntries={this.previousEntries} loading={true}/>\n                        } else {\n                            return <Render {...this.state.eventsHandlers} {...this.state.renderProps}\n                                           pickerEntries={[]} loading={true}/>\n                        }\n                    }\n                    if (error) return `Error! ${error.message}`;\n                    let pickerEntries = this.getPickerEntries(data, selectedPaths, openPaths);\n                    this.previousEntries = pickerEntries;\n                    return <Render {...this.state.eventsHandlers} {...this.state.renderProps}\n                                   pickerEntries={pickerEntries} loading={false || this.props.loading}/>\n                }\n            }\n        </Query>\n    }\n\n}\n\nPicker.propTypes = {\n    /**\n     * List of root paths for the picker\n     */\n    rootPaths: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of folder paths that are open by default (uncontrolled mode)\n     */\n    defaultOpenPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"opened\" (folders)\n     */\n    openableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * List of open folders in controlled mode\n     */\n    openPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of node types that can be \"selected\" (items)\n     */\n    selectableTypes: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n    /**\n     * Preselected items path (uncontrolled mode)\n     */\n    defaultSelectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * List of selected path in controlled mode\n     */\n    selectedPaths: PropTypes.arrayOf(PropTypes.string),\n\n    /**\n     * Callback when the selection has changed\n     */\n    onSelectionChange: PropTypes.func,\n\n    /**\n     * Component to use to do the full rendering of the tree. Should accept : pickerEntries,onSelectItem,onOpenItem . Other properties are passed through.\n     */\n    render: PropTypes.func,\n\n    /**\n     * Optional set of fragments to add to the graphQL query. Can be a string that identify a predefinedFragment or a fragment definition\n     */\n    fragments: PropTypes.arrayOf(PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.shape({\n            applyFor: PropTypes.string.isRequired,\n            variables: PropTypes.string,\n            gql: PropTypes.object.isRequired\n        })\n    ])),\n\n    /**\n     * Optional set of variable to pass to the graphQL query, in order to fulfill fragments needs\n     */\n    queryVariables: PropTypes.object\n\n};\n\n\nexport {Picker}","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nfunction withNodeFromPath(fragments) {\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let node;\n\n            if (data.jcr && data.jcr.node) {\n                node = data.jcr.node;\n            }\n\n            return {\n                ...ownProps,\n                node: node,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let vars = {\n                path: props.path,\n                workspace: props.workspace ? props.workspace : 'EDIT'\n            };\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars,\n                skip: !props.path\n            }\n        };\n\n        let query = gql`\n            query NodeQuery($path:String!, $workspace:Workspace!) {\n                jcr(workspace:$workspace) {\n                    workspace\n                    node:nodeByPath(path: $path) {\n                        workspace\n                        path\n                        uuid\n                        ... node\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        return graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n    }\n}\n\nexport {withNodeFromPath};\n","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport gql from \"graphql-tag\";\nimport * as _ from \"lodash\";\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\n\nfunction withNodesFromPath(fragments) {\n    return (ViewComponent) => {\n        // GraphQL maps\n        let mapResultsToProps = ({data, ownProps}) => {\n            let nodes = [];\n\n            let jcr = data.jcr;\n\n            if (jcr) {\n                if (jcr.node) {\n                    nodes = jcr.node.children.nodes;\n                }\n            }\n\n            return {\n                ...ownProps,\n                nodes: nodes,\n            };\n        };\n\n        let mapPropsToOptions = (props) => {\n            let vars = {\n                path: props.path,\n                types: props.types,\n            };\n            if (props.queryVariables) {\n                _.assign(vars, props.queryVariables);\n            }\n\n            return {\n                variables: vars,\n                skip: !props.path\n            }\n        };\n\n        let query = gql`\n            query NodesQuery($path:String!, $types:[String]!) {\n                jcr {\n                    node:nodeByPath(path: $path) {\n                        path\n                        uuid\n                        name\n                        children(typesFilter:{types:$types}) {\n                            nodes {\n                                path\n                                uuid\n                                name\n                                ... node\n                            }\n                        }\n                    }\n                }\n            }`;\n\n        replaceFragmentsInDocument(query, fragments);\n\n        return graphql(query, {\n            props: mapResultsToProps,\n            options: mapPropsToOptions\n        })(ViewComponent);\n    }\n}\n\nexport {withNodesFromPath};\n","import React from 'react';\nimport {replaceFragmentsInDocument} from \"@jahia/apollo-dx\";\nimport {connect} from 'react-redux'\n\nfunction withPathFromSelection(reduxStoreId) {\n    return (WrappedComponent) => {\n        return connect(\n            (state, ownProps) => ({\n                ...ownProps,\n                path: (state[\"selectedPaths_\" + reduxStoreId] && state[\"selectedPaths_\" + reduxStoreId].length === 1) ? state[\"selectedPaths_\" + reduxStoreId][0] : null,\n            }),\n            () => ({}))(WrappedComponent);\n    }\n}\n\nexport { withPathFromSelection }","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction withNotifications() {\n    return (WrappedComponent) => {\n        let Component = class extends React.Component {\n            render() {\n                return (<WrappedComponent notificationContext={this.context.notificationContext} {...this.props} />)\n            }\n        };\n\n        Component.contextTypes = {\n            notificationContext: PropTypes.object\n        };\n\n        return Component\n    }\n}\n\nexport { withNotifications }"]}